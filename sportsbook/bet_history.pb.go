// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/bet_history.proto

/*
Package sportsbook is a generated protocol buffer package.

It is generated from these files:
	sportsbook/bet_history.proto
	sportsbook/betting.proto
	sportsbook/commands.proto
	sportsbook/resulting.proto
	sportsbook/sportsbook.proto
	sportsbook/static.proto

It has these top-level messages:
	EventBetHistory
	BetHistory
	BetHistoryEntry
	SelectionEntry
	SettlementInfo
	BetSelection
	SystemBet
	BetRequest
	BetResponse
	PriceUpdate
	BetAcceptanceUpdate
	UpdateStatus
	Result
	Results
	Score
	Scores
	Generic
	Competition
	Competitor
	Event
	ProviderData
	EventStatusChange
	EventList
	CompetitionList
	OutrightList
	Uint32List
	EventMedia
	Market
	Selection
	Outright
	OutrightSelection
	EventMetadata
	EventTree
	SportsTree
	CompetitionTree
	LiveEvents
	Upcoming
	Bet
	IdMap
	MultipleCompetitionListMetadata
	MultipleCompetitionLists
	MultipleCompetitionList
	SbvPair
	BetradarMarket
	PinnacleMarketMapping
	BetradarMarketMapping
	SbvValidator
	SelectionOutcome
	ColumnView
	TableView
	ViewDefinition
	MarketDefinition
	ProviderMapping
	SportV2
	Sport
	SportsList
*/
package sportsbook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BetCurrency int32

const (
	BetCurrency_BTC BetCurrency = 0
	BetCurrency_ETH BetCurrency = 1
	BetCurrency_INR BetCurrency = 2
	BetCurrency_USD BetCurrency = 3
	BetCurrency_EUR BetCurrency = 4
	BetCurrency_TRY BetCurrency = 5
	BetCurrency_PHP BetCurrency = 6
	BetCurrency_IDR BetCurrency = 7
	BetCurrency_GBP BetCurrency = 8
	BetCurrency_MYR BetCurrency = 9
	BetCurrency_CAD BetCurrency = 10
	BetCurrency_JPY BetCurrency = 11
	BetCurrency_KRW BetCurrency = 12
	BetCurrency_BRL BetCurrency = 13
	BetCurrency_CNY BetCurrency = 14
	BetCurrency_BCH BetCurrency = 15
	BetCurrency_PTS BetCurrency = 16
)

var BetCurrency_name = map[int32]string{
	0:  "BTC",
	1:  "ETH",
	2:  "INR",
	3:  "USD",
	4:  "EUR",
	5:  "TRY",
	6:  "PHP",
	7:  "IDR",
	8:  "GBP",
	9:  "MYR",
	10: "CAD",
	11: "JPY",
	12: "KRW",
	13: "BRL",
	14: "CNY",
	15: "BCH",
	16: "PTS",
}
var BetCurrency_value = map[string]int32{
	"BTC": 0,
	"ETH": 1,
	"INR": 2,
	"USD": 3,
	"EUR": 4,
	"TRY": 5,
	"PHP": 6,
	"IDR": 7,
	"GBP": 8,
	"MYR": 9,
	"CAD": 10,
	"JPY": 11,
	"KRW": 12,
	"BRL": 13,
	"CNY": 14,
	"BCH": 15,
	"PTS": 16,
}

func (x BetCurrency) Enum() *BetCurrency {
	p := new(BetCurrency)
	*p = x
	return p
}
func (x BetCurrency) String() string {
	return proto.EnumName(BetCurrency_name, int32(x))
}
func (x *BetCurrency) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BetCurrency_value, data, "BetCurrency")
	if err != nil {
		return err
	}
	*x = BetCurrency(value)
	return nil
}
func (BetCurrency) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BetState int32

const (
	BetState_PENDING   BetState = 0
	BetState_WIN       BetState = 1
	BetState_LOSS      BetState = 2
	BetState_PUSH      BetState = 3
	BetState_CANCELLED BetState = 4
	BetState_HALF_WIN  BetState = 5
	BetState_HALF_LOSS BetState = 6
	BetState_PARTIAL   BetState = 7
)

var BetState_name = map[int32]string{
	0: "PENDING",
	1: "WIN",
	2: "LOSS",
	3: "PUSH",
	4: "CANCELLED",
	5: "HALF_WIN",
	6: "HALF_LOSS",
	7: "PARTIAL",
}
var BetState_value = map[string]int32{
	"PENDING":   0,
	"WIN":       1,
	"LOSS":      2,
	"PUSH":      3,
	"CANCELLED": 4,
	"HALF_WIN":  5,
	"HALF_LOSS": 6,
	"PARTIAL":   7,
}

func (x BetState) Enum() *BetState {
	p := new(BetState)
	*p = x
	return p
}
func (x BetState) String() string {
	return proto.EnumName(BetState_name, int32(x))
}
func (x *BetState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BetState_value, data, "BetState")
	if err != nil {
		return err
	}
	*x = BetState(value)
	return nil
}
func (BetState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type EventBetHistory struct {
	EventId          *uint32            `protobuf:"varint,1,req,name=event_id,json=eventId" json:"event_id,omitempty"`
	Bets             []*BetHistoryEntry `protobuf:"bytes,2,rep,name=bets" json:"bets,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *EventBetHistory) Reset()                    { *m = EventBetHistory{} }
func (m *EventBetHistory) String() string            { return proto.CompactTextString(m) }
func (*EventBetHistory) ProtoMessage()               {}
func (*EventBetHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventBetHistory) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *EventBetHistory) GetBets() []*BetHistoryEntry {
	if m != nil {
		return m.Bets
	}
	return nil
}

type BetHistory struct {
	Bets             []*BetHistoryEntry `protobuf:"bytes,1,rep,name=bets" json:"bets,omitempty"`
	TotalEntryCount  *uint32            `protobuf:"varint,2,opt,name=total_entry_count,json=totalEntryCount" json:"total_entry_count,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *BetHistory) Reset()                    { *m = BetHistory{} }
func (m *BetHistory) String() string            { return proto.CompactTextString(m) }
func (*BetHistory) ProtoMessage()               {}
func (*BetHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BetHistory) GetBets() []*BetHistoryEntry {
	if m != nil {
		return m.Bets
	}
	return nil
}

func (m *BetHistory) GetTotalEntryCount() uint32 {
	if m != nil && m.TotalEntryCount != nil {
		return *m.TotalEntryCount
	}
	return 0
}

type BetHistoryEntry struct {
	Id           *uint32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Version      *float64          `protobuf:"fixed64,2,opt,name=version" json:"version,omitempty"`
	State        *string           `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Stake        *float64          `protobuf:"fixed64,4,opt,name=stake" json:"stake,omitempty"`
	Odds         *float64          `protobuf:"fixed64,5,opt,name=odds" json:"odds,omitempty"`
	CreatedAt    *uint32           `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Result       *string           `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	System       *uint32           `protobuf:"varint,9,opt,name=system" json:"system,omitempty"`
	Selections   []*SelectionEntry `protobuf:"bytes,10,rep,name=selections" json:"selections,omitempty"`
	WinAmount    *float64          `protobuf:"fixed64,11,opt,name=win_amount,json=winAmount" json:"win_amount,omitempty"`
	BetCurrency  *BetCurrency      `protobuf:"varint,12,opt,name=bet_currency,json=betCurrency,enum=sportsbook.BetCurrency,def=0" json:"bet_currency,omitempty"`
	BetState     *BetState         `protobuf:"varint,13,opt,name=bet_state,json=betState,enum=sportsbook.BetState" json:"bet_state,omitempty"`
	IsLay        *bool             `protobuf:"varint,14,opt,name=is_lay,json=isLay" json:"is_lay,omitempty"`
	BackersOdds  *float64          `protobuf:"fixed64,15,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
	BackersStake *float64          `protobuf:"fixed64,16,opt,name=backers_stake,json=backersStake" json:"backers_stake,omitempty"`
	// deprecated
	ReturnAmount     *float64 `protobuf:"fixed64,6,opt,name=return_amount,json=returnAmount" json:"return_amount,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BetHistoryEntry) Reset()                    { *m = BetHistoryEntry{} }
func (m *BetHistoryEntry) String() string            { return proto.CompactTextString(m) }
func (*BetHistoryEntry) ProtoMessage()               {}
func (*BetHistoryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_BetHistoryEntry_BetCurrency BetCurrency = BetCurrency_BTC

func (m *BetHistoryEntry) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BetHistoryEntry) GetVersion() float64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BetHistoryEntry) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *BetHistoryEntry) GetStake() float64 {
	if m != nil && m.Stake != nil {
		return *m.Stake
	}
	return 0
}

func (m *BetHistoryEntry) GetOdds() float64 {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return 0
}

func (m *BetHistoryEntry) GetCreatedAt() uint32 {
	if m != nil && m.CreatedAt != nil {
		return *m.CreatedAt
	}
	return 0
}

func (m *BetHistoryEntry) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *BetHistoryEntry) GetSystem() uint32 {
	if m != nil && m.System != nil {
		return *m.System
	}
	return 0
}

func (m *BetHistoryEntry) GetSelections() []*SelectionEntry {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *BetHistoryEntry) GetWinAmount() float64 {
	if m != nil && m.WinAmount != nil {
		return *m.WinAmount
	}
	return 0
}

func (m *BetHistoryEntry) GetBetCurrency() BetCurrency {
	if m != nil && m.BetCurrency != nil {
		return *m.BetCurrency
	}
	return Default_BetHistoryEntry_BetCurrency
}

func (m *BetHistoryEntry) GetBetState() BetState {
	if m != nil && m.BetState != nil {
		return *m.BetState
	}
	return BetState_PENDING
}

func (m *BetHistoryEntry) GetIsLay() bool {
	if m != nil && m.IsLay != nil {
		return *m.IsLay
	}
	return false
}

func (m *BetHistoryEntry) GetBackersOdds() float64 {
	if m != nil && m.BackersOdds != nil {
		return *m.BackersOdds
	}
	return 0
}

func (m *BetHistoryEntry) GetBackersStake() float64 {
	if m != nil && m.BackersStake != nil {
		return *m.BackersStake
	}
	return 0
}

func (m *BetHistoryEntry) GetReturnAmount() float64 {
	if m != nil && m.ReturnAmount != nil {
		return *m.ReturnAmount
	}
	return 0
}

type SelectionEntry struct {
	Name            *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Odds            *float64 `protobuf:"fixed64,2,opt,name=odds" json:"odds,omitempty"`
	Result          *string  `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	EventId         *uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	IsLive          *bool    `protobuf:"varint,7,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	IsOutright      *bool    `protobuf:"varint,8,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
	StartsAt        *uint32  `protobuf:"varint,9,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt          *uint32  `protobuf:"varint,10,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	SpecialBetValue *string  `protobuf:"bytes,11,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	MarketId        *uint32  `protobuf:"varint,15,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	// this is useful for outrights only
	EventName *string `protobuf:"bytes,5,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	// this is for normal events
	Competitors       []string      `protobuf:"bytes,14,rep,name=competitors" json:"competitors,omitempty"`
	CompetitorDetails []*Competitor `protobuf:"bytes,18,rep,name=competitor_details,json=competitorDetails" json:"competitor_details,omitempty"`
	// deprecated
	MarketName       *string         `protobuf:"bytes,6,opt,name=market_name,json=marketName" json:"market_name,omitempty"`
	SmvFields        *string         `protobuf:"bytes,12,opt,name=smv_fields,json=smvFields" json:"smv_fields,omitempty"`
	SmvRegex         *string         `protobuf:"bytes,13,opt,name=smv_regex,json=smvRegex" json:"smv_regex,omitempty"`
	SettlementInfo   *SettlementInfo `protobuf:"bytes,16,opt,name=settlement_info,json=settlementInfo" json:"settlement_info,omitempty"`
	BetState         *BetState       `protobuf:"varint,17,opt,name=bet_state,json=betState,enum=sportsbook.BetState" json:"bet_state,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SelectionEntry) Reset()                    { *m = SelectionEntry{} }
func (m *SelectionEntry) String() string            { return proto.CompactTextString(m) }
func (*SelectionEntry) ProtoMessage()               {}
func (*SelectionEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SelectionEntry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SelectionEntry) GetOdds() float64 {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return 0
}

func (m *SelectionEntry) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *SelectionEntry) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *SelectionEntry) GetIsLive() bool {
	if m != nil && m.IsLive != nil {
		return *m.IsLive
	}
	return false
}

func (m *SelectionEntry) GetIsOutright() bool {
	if m != nil && m.IsOutright != nil {
		return *m.IsOutright
	}
	return false
}

func (m *SelectionEntry) GetStartsAt() uint32 {
	if m != nil && m.StartsAt != nil {
		return *m.StartsAt
	}
	return 0
}

func (m *SelectionEntry) GetEndsAt() uint32 {
	if m != nil && m.EndsAt != nil {
		return *m.EndsAt
	}
	return 0
}

func (m *SelectionEntry) GetSpecialBetValue() string {
	if m != nil && m.SpecialBetValue != nil {
		return *m.SpecialBetValue
	}
	return ""
}

func (m *SelectionEntry) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

func (m *SelectionEntry) GetEventName() string {
	if m != nil && m.EventName != nil {
		return *m.EventName
	}
	return ""
}

func (m *SelectionEntry) GetCompetitors() []string {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *SelectionEntry) GetCompetitorDetails() []*Competitor {
	if m != nil {
		return m.CompetitorDetails
	}
	return nil
}

func (m *SelectionEntry) GetMarketName() string {
	if m != nil && m.MarketName != nil {
		return *m.MarketName
	}
	return ""
}

func (m *SelectionEntry) GetSmvFields() string {
	if m != nil && m.SmvFields != nil {
		return *m.SmvFields
	}
	return ""
}

func (m *SelectionEntry) GetSmvRegex() string {
	if m != nil && m.SmvRegex != nil {
		return *m.SmvRegex
	}
	return ""
}

func (m *SelectionEntry) GetSettlementInfo() *SettlementInfo {
	if m != nil {
		return m.SettlementInfo
	}
	return nil
}

func (m *SelectionEntry) GetBetState() BetState {
	if m != nil && m.BetState != nil {
		return *m.BetState
	}
	return BetState_PENDING
}

type SettlementInfo struct {
	BetPitcherHome      *string `protobuf:"bytes,1,opt,name=bet_pitcher_home,json=betPitcherHome" json:"bet_pitcher_home,omitempty"`
	BetPitcherAway      *string `protobuf:"bytes,2,opt,name=bet_pitcher_away,json=betPitcherAway" json:"bet_pitcher_away,omitempty"`
	StartingPitcherHome *string `protobuf:"bytes,3,opt,name=starting_pitcher_home,json=startingPitcherHome" json:"starting_pitcher_home,omitempty"`
	StartingPitcherAway *string `protobuf:"bytes,4,opt,name=starting_pitcher_away,json=startingPitcherAway" json:"starting_pitcher_away,omitempty"`
	Comment             *string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *SettlementInfo) Reset()                    { *m = SettlementInfo{} }
func (m *SettlementInfo) String() string            { return proto.CompactTextString(m) }
func (*SettlementInfo) ProtoMessage()               {}
func (*SettlementInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SettlementInfo) GetBetPitcherHome() string {
	if m != nil && m.BetPitcherHome != nil {
		return *m.BetPitcherHome
	}
	return ""
}

func (m *SettlementInfo) GetBetPitcherAway() string {
	if m != nil && m.BetPitcherAway != nil {
		return *m.BetPitcherAway
	}
	return ""
}

func (m *SettlementInfo) GetStartingPitcherHome() string {
	if m != nil && m.StartingPitcherHome != nil {
		return *m.StartingPitcherHome
	}
	return ""
}

func (m *SettlementInfo) GetStartingPitcherAway() string {
	if m != nil && m.StartingPitcherAway != nil {
		return *m.StartingPitcherAway
	}
	return ""
}

func (m *SettlementInfo) GetComment() string {
	if m != nil && m.Comment != nil {
		return *m.Comment
	}
	return ""
}

func init() {
	proto.RegisterType((*EventBetHistory)(nil), "sportsbook.EventBetHistory")
	proto.RegisterType((*BetHistory)(nil), "sportsbook.BetHistory")
	proto.RegisterType((*BetHistoryEntry)(nil), "sportsbook.BetHistoryEntry")
	proto.RegisterType((*SelectionEntry)(nil), "sportsbook.SelectionEntry")
	proto.RegisterType((*SettlementInfo)(nil), "sportsbook.SettlementInfo")
	proto.RegisterEnum("sportsbook.BetCurrency", BetCurrency_name, BetCurrency_value)
	proto.RegisterEnum("sportsbook.BetState", BetState_name, BetState_value)
}

func init() { proto.RegisterFile("sportsbook/bet_history.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x72, 0x22, 0x37,
	0x10, 0xce, 0xf0, 0x3b, 0xd3, 0x18, 0x90, 0x95, 0xfd, 0x99, 0xd8, 0xbb, 0x15, 0xe2, 0xbd, 0x50,
	0x3e, 0x78, 0x2b, 0x3e, 0xee, 0x25, 0x85, 0x81, 0x5d, 0x48, 0x08, 0xa6, 0x84, 0x9d, 0x2d, 0x1f,
	0x52, 0x53, 0xc3, 0x20, 0xdb, 0x2a, 0x33, 0x23, 0xd7, 0x48, 0xe0, 0x70, 0xcc, 0x83, 0xe4, 0x9a,
	0x47, 0xcb, 0x73, 0xa4, 0xd4, 0x1a, 0x60, 0xf0, 0xee, 0x61, 0x6f, 0xdd, 0x5f, 0x77, 0x7f, 0x6a,
	0x75, 0x7f, 0x12, 0xbc, 0x51, 0x8f, 0x32, 0xd5, 0x6a, 0x26, 0xe5, 0xc3, 0xfb, 0x19, 0xd7, 0xc1,
	0xbd, 0x50, 0x5a, 0xa6, 0xeb, 0xb3, 0xc7, 0x54, 0x6a, 0x49, 0x61, 0x17, 0x3d, 0x3a, 0xce, 0x65,
	0xee, 0x4c, 0x9b, 0x78, 0xf2, 0x27, 0x34, 0xfb, 0x2b, 0x9e, 0xe8, 0x0b, 0xae, 0x07, 0x96, 0x81,
	0xfe, 0x00, 0x2e, 0x37, 0x50, 0x20, 0xe6, 0xbe, 0xd3, 0x2a, 0xb4, 0xeb, 0xac, 0x8a, 0xfe, 0x70,
	0x4e, 0xdf, 0x43, 0x69, 0xc6, 0xb5, 0xf2, 0x0b, 0xad, 0x62, 0xbb, 0x76, 0x7e, 0x7c, 0x96, 0xa3,
	0xdb, 0x11, 0xf4, 0x13, 0x9d, 0xae, 0x19, 0x26, 0x9e, 0x08, 0x80, 0x1c, 0xf3, 0xa6, 0xdc, 0xf9,
	0xc6, 0x72, 0x7a, 0x0a, 0x87, 0x5a, 0xea, 0x70, 0x11, 0x70, 0x03, 0x06, 0x91, 0x5c, 0x26, 0xda,
	0x2f, 0xb4, 0x9c, 0x76, 0x9d, 0x35, 0x31, 0x80, 0xc9, 0x5d, 0x03, 0x9f, 0xfc, 0x53, 0x82, 0xe6,
	0x33, 0x16, 0xda, 0x80, 0x02, 0x5e, 0xc2, 0x14, 0x14, 0xc4, 0x9c, 0xfa, 0x50, 0x5d, 0xf1, 0x54,
	0x09, 0x99, 0x20, 0x8b, 0xc3, 0x36, 0x2e, 0x7d, 0x01, 0x65, 0xa5, 0x43, 0xcd, 0xfd, 0x62, 0xcb,
	0x69, 0x7b, 0xcc, 0x3a, 0x19, 0xfa, 0xc0, 0xfd, 0x12, 0x66, 0x5b, 0x87, 0x52, 0x28, 0xc9, 0xf9,
	0x5c, 0xf9, 0x65, 0x04, 0xd1, 0xa6, 0x6f, 0x01, 0xa2, 0x94, 0x87, 0x9a, 0xcf, 0x83, 0x50, 0xfb,
	0x55, 0x3c, 0xd1, 0xcb, 0x90, 0x8e, 0xa6, 0xaf, 0xa0, 0x92, 0x72, 0xb5, 0x5c, 0x68, 0xdf, 0x45,
	0xfe, 0xcc, 0x33, 0xb8, 0x5a, 0x2b, 0xcd, 0x63, 0xdf, 0xc3, 0x92, 0xcc, 0xa3, 0x1f, 0x00, 0x14,
	0x5f, 0xf0, 0x48, 0x0b, 0x99, 0x28, 0x1f, 0x70, 0x5e, 0x47, 0xf9, 0x79, 0x4d, 0x37, 0x51, 0x3b,
	0xae, 0x5c, 0xb6, 0x69, 0xe5, 0x49, 0x24, 0x41, 0x18, 0xe3, 0xb4, 0x6a, 0xd8, 0xa4, 0xf7, 0x24,
	0x92, 0x0e, 0x02, 0xf4, 0x17, 0x38, 0x30, 0x7a, 0x89, 0x96, 0x69, 0xca, 0x93, 0x68, 0xed, 0x1f,
	0xb4, 0x9c, 0x76, 0xe3, 0xfc, 0xf5, 0xb3, 0x65, 0x74, 0xb3, 0xf0, 0x87, 0xe2, 0xc5, 0x55, 0x97,
	0xd5, 0x66, 0x3b, 0x84, 0xfe, 0x0c, 0x9e, 0x21, 0xb0, 0xe3, 0xaa, 0x63, 0xf5, 0x8b, 0x67, 0xd5,
	0x53, 0x13, 0x63, 0xee, 0x2c, 0xb3, 0xe8, 0x4b, 0xa8, 0x08, 0x15, 0x2c, 0xc2, 0xb5, 0xdf, 0x68,
	0x39, 0x6d, 0x97, 0x95, 0x85, 0x1a, 0x85, 0x6b, 0xfa, 0x13, 0x1c, 0xcc, 0xc2, 0xe8, 0x81, 0xa7,
	0x2a, 0xc0, 0x81, 0x36, 0xb1, 0xd7, 0x5a, 0x86, 0x5d, 0x9a, 0xb9, 0xbe, 0x83, 0xfa, 0x26, 0xc5,
	0x6e, 0x82, 0x60, 0xce, 0xa6, 0x6e, 0x8a, 0x0b, 0x79, 0x07, 0xf5, 0x94, 0xeb, 0x65, 0xba, 0xbd,
	0x74, 0xc5, 0x26, 0x59, 0xd0, 0xde, 0xfb, 0xe4, 0xef, 0x32, 0x34, 0xf6, 0xa7, 0x66, 0x16, 0x99,
	0x84, 0x31, 0x47, 0x81, 0x78, 0x0c, 0xed, 0xed, 0x72, 0x0b, 0xb9, 0xe5, 0xee, 0xb6, 0x57, 0xdc,
	0xdb, 0x5e, 0xfe, 0xa5, 0x94, 0x70, 0x7f, 0xdb, 0x97, 0xf2, 0x1a, 0xaa, 0xe6, 0xc6, 0x62, 0xc5,
	0x51, 0x0c, 0x2e, 0xab, 0x08, 0x35, 0x12, 0x2b, 0x4e, 0x7f, 0x84, 0x9a, 0x50, 0x81, 0x5c, 0xea,
	0x54, 0xdc, 0xdd, 0x5b, 0x39, 0xb8, 0x0c, 0x84, 0xba, 0xcc, 0x10, 0x7a, 0x0c, 0x9e, 0xd2, 0x61,
	0xaa, 0x95, 0x11, 0x92, 0x55, 0x85, 0x6b, 0x81, 0x8e, 0x36, 0xb4, 0x3c, 0x99, 0x63, 0x08, 0xac,
	0x60, 0x8c, 0xdb, 0xd1, 0xe6, 0xa5, 0xa8, 0x47, 0x1e, 0x89, 0x70, 0x11, 0x98, 0xe5, 0xac, 0xc2,
	0xc5, 0x92, 0xe3, 0xee, 0x3d, 0xd6, 0xcc, 0x02, 0x17, 0x5c, 0xff, 0x61, 0x60, 0x73, 0x42, 0x1c,
	0xa6, 0x0f, 0x1c, 0xfb, 0x6e, 0xda, 0x13, 0x2c, 0x30, 0x9c, 0x1b, 0xf5, 0xd8, 0x3b, 0xe1, 0x64,
	0xca, 0xc8, 0xe0, 0x21, 0x32, 0x36, 0xe3, 0x69, 0x41, 0x2d, 0x92, 0xf1, 0x23, 0xd7, 0x42, 0xcb,
	0x54, 0xf9, 0x8d, 0x56, 0xb1, 0xed, 0xb1, 0x3c, 0x44, 0xfb, 0x40, 0x77, 0x6e, 0x30, 0xe7, 0x3a,
	0x14, 0x0b, 0xe5, 0x53, 0x94, 0xf0, 0xab, 0xbc, 0x4e, 0xba, 0xdb, 0x2c, 0x76, 0xb8, 0xab, 0xe8,
	0xd9, 0x02, 0x33, 0xa7, 0xac, 0x49, 0x6c, 0xa4, 0x82, 0x8d, 0x80, 0x85, 0xb0, 0x93, 0xb7, 0x00,
	0x2a, 0x5e, 0x05, 0xb7, 0x82, 0x2f, 0xe6, 0x0a, 0x55, 0xec, 0x31, 0x4f, 0xc5, 0xab, 0x8f, 0x08,
	0xe0, 0x18, 0xe3, 0x55, 0x90, 0xf2, 0x3b, 0xfe, 0x17, 0xaa, 0xd4, 0x63, 0xae, 0x8a, 0x57, 0xcc,
	0xf8, 0xb4, 0x0b, 0x4d, 0xc5, 0xb5, 0x5e, 0xf0, 0x18, 0xb7, 0x97, 0xdc, 0x4a, 0xd4, 0xd5, 0x17,
	0x6f, 0x6c, 0x93, 0x32, 0x4c, 0x6e, 0x25, 0x6b, 0xa8, 0x3d, 0x7f, 0xff, 0x1d, 0x1c, 0x7e, 0xcb,
	0x3b, 0x38, 0xf9, 0xcf, 0x31, 0x1a, 0xdc, 0x63, 0x69, 0x03, 0x31, 0x2c, 0x8f, 0x42, 0x47, 0xf7,
	0x3c, 0x0d, 0xee, 0xe5, 0x56, 0x8f, 0x8d, 0x19, 0xd7, 0x13, 0x0b, 0x0f, 0x64, 0xcc, 0x9f, 0x67,
	0x86, 0x4f, 0xe1, 0x1a, 0x55, 0xba, 0x97, 0xd9, 0x79, 0x0a, 0xd7, 0xf4, 0x1c, 0x5e, 0xa2, 0x62,
	0x44, 0x72, 0xb7, 0x4f, 0x6c, 0xe5, 0xfb, 0xfd, 0x26, 0x98, 0x67, 0xff, 0x5a, 0x0d, 0x1e, 0x51,
	0xfa, 0x6a, 0x0d, 0x9e, 0xe3, 0x43, 0x35, 0x92, 0xb1, 0xb9, 0x4a, 0x26, 0x94, 0x8d, 0x7b, 0xfa,
	0xaf, 0x03, 0xb5, 0xdc, 0x2f, 0x42, 0xab, 0x60, 0xfe, 0x11, 0xf2, 0x9d, 0x31, 0xfa, 0x57, 0x03,
	0xe2, 0x18, 0x63, 0x38, 0x66, 0xa4, 0x60, 0x8c, 0xeb, 0x69, 0x8f, 0x14, 0x31, 0x74, 0xcd, 0x48,
	0xc9, 0x18, 0x57, 0xec, 0x86, 0x94, 0x8d, 0x31, 0x19, 0x4c, 0x48, 0x05, 0x93, 0x7b, 0x8c, 0x54,
	0x8d, 0xf1, 0xe9, 0x62, 0x42, 0x5c, 0x63, 0xfc, 0x7e, 0xc3, 0x88, 0x67, 0x8c, 0x6e, 0xa7, 0x47,
	0xc0, 0x18, 0xbf, 0x4e, 0x6e, 0x48, 0xcd, 0x18, 0xbf, 0xb1, 0xcf, 0xe4, 0x00, 0x0f, 0x65, 0x23,
	0x52, 0xc7, 0x9c, 0xf1, 0x0d, 0x69, 0x20, 0xd2, 0x1d, 0x90, 0x26, 0x32, 0x5f, 0x4d, 0x09, 0x39,
	0x8d, 0xc1, 0xdd, 0xec, 0x89, 0xd6, 0xa0, 0x3a, 0xe9, 0x8f, 0x7b, 0xc3, 0xf1, 0x27, 0xdb, 0xe8,
	0xe7, 0xe1, 0x98, 0x38, 0xd4, 0x85, 0xd2, 0xe8, 0x72, 0x3a, 0x25, 0x05, 0x63, 0x4d, 0xae, 0xa7,
	0x03, 0x52, 0xa4, 0x75, 0xf0, 0xba, 0x9d, 0x71, 0xb7, 0x3f, 0x1a, 0xf5, 0x7b, 0xa4, 0x44, 0x0f,
	0xc0, 0x1d, 0x74, 0x46, 0x1f, 0x03, 0x53, 0x50, 0x36, 0x41, 0xf4, 0xb0, 0xaa, 0x82, 0xac, 0x1d,
	0x76, 0x35, 0xec, 0x8c, 0x48, 0xf5, 0xe2, 0x0d, 0x1c, 0x45, 0x32, 0x3e, 0x9b, 0x09, 0x7d, 0x17,
	0xc6, 0x7c, 0x11, 0xce, 0x54, 0x4e, 0x31, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x91, 0x49,
	0x97, 0xd4, 0x07, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/resulting.proto

package sportsbook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResultCommentKey int32

const (
	ResultCommentKey_PITCHER_CHANGE ResultCommentKey = 0
)

var ResultCommentKey_name = map[int32]string{
	0: "PITCHER_CHANGE",
}
var ResultCommentKey_value = map[string]int32{
	"PITCHER_CHANGE": 0,
}

func (x ResultCommentKey) Enum() *ResultCommentKey {
	p := new(ResultCommentKey)
	*p = x
	return p
}
func (x ResultCommentKey) String() string {
	return proto.EnumName(ResultCommentKey_name, int32(x))
}
func (x *ResultCommentKey) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResultCommentKey_value, data, "ResultCommentKey")
	if err != nil {
		return err
	}
	*x = ResultCommentKey(value)
	return nil
}
func (ResultCommentKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type SettlementFlags int32

const (
	SettlementFlags_APPROVAL_PENDING    SettlementFlags = 1
	SettlementFlags_APPROVED            SettlementFlags = 2
	SettlementFlags_DISAPPROVED         SettlementFlags = 4
	SettlementFlags_PITCHER_CHANGE_HOME SettlementFlags = 8
	SettlementFlags_PITCHER_CHANGE_AWAY SettlementFlags = 16
)

var SettlementFlags_name = map[int32]string{
	1:  "APPROVAL_PENDING",
	2:  "APPROVED",
	4:  "DISAPPROVED",
	8:  "PITCHER_CHANGE_HOME",
	16: "PITCHER_CHANGE_AWAY",
}
var SettlementFlags_value = map[string]int32{
	"APPROVAL_PENDING":    1,
	"APPROVED":            2,
	"DISAPPROVED":         4,
	"PITCHER_CHANGE_HOME": 8,
	"PITCHER_CHANGE_AWAY": 16,
}

func (x SettlementFlags) Enum() *SettlementFlags {
	p := new(SettlementFlags)
	*p = x
	return p
}
func (x SettlementFlags) String() string {
	return proto.EnumName(SettlementFlags_name, int32(x))
}
func (x *SettlementFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SettlementFlags_value, data, "SettlementFlags")
	if err != nil {
		return err
	}
	*x = SettlementFlags(value)
	return nil
}
func (SettlementFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type Result struct {
	Timestamp       *int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventId         *uint32  `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        *uint32  `protobuf:"varint,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	SelectionType   *string  `protobuf:"bytes,4,opt,name=selection_type,json=selectionType" json:"selection_type,omitempty"`
	SpecialBetValue *string  `protobuf:"bytes,5,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Voidfactor      *float64 `protobuf:"fixed64,6,opt,name=voidfactor" json:"voidfactor,omitempty"`
	Outcome         *int32   `protobuf:"varint,7,opt,name=outcome" json:"outcome,omitempty"`
	Reason          *string  `protobuf:"bytes,14,opt,name=reason" json:"reason,omitempty"`
	// live additions
	IsLive    *bool   `protobuf:"varint,8,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	Status    *string `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	StartTime *int64  `protobuf:"varint,10,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *int64  `protobuf:"varint,11,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Flags     *uint32 `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	// outrights
	IsOutright       *bool   `protobuf:"varint,13,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
	ExternalId       *string `protobuf:"bytes,15,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	ExternalProvider *string `protobuf:"bytes,16,opt,name=external_provider,json=externalProvider" json:"external_provider,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Result) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Result) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *Result) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

func (m *Result) GetSelectionType() string {
	if m != nil && m.SelectionType != nil {
		return *m.SelectionType
	}
	return ""
}

func (m *Result) GetSpecialBetValue() string {
	if m != nil && m.SpecialBetValue != nil {
		return *m.SpecialBetValue
	}
	return ""
}

func (m *Result) GetVoidfactor() float64 {
	if m != nil && m.Voidfactor != nil {
		return *m.Voidfactor
	}
	return 0
}

func (m *Result) GetOutcome() int32 {
	if m != nil && m.Outcome != nil {
		return *m.Outcome
	}
	return 0
}

func (m *Result) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *Result) GetIsLive() bool {
	if m != nil && m.IsLive != nil {
		return *m.IsLive
	}
	return false
}

func (m *Result) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *Result) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *Result) GetEndTime() int64 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *Result) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *Result) GetIsOutright() bool {
	if m != nil && m.IsOutright != nil {
		return *m.IsOutright
	}
	return false
}

func (m *Result) GetExternalId() string {
	if m != nil && m.ExternalId != nil {
		return *m.ExternalId
	}
	return ""
}

func (m *Result) GetExternalProvider() string {
	if m != nil && m.ExternalProvider != nil {
		return *m.ExternalProvider
	}
	return ""
}

type Results struct {
	Entries          []*Result `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Results) GetEntries() []*Result {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Score struct {
	Timestamp        *int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventId          *uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SportId          *uint32 `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	ScoreType        *string `protobuf:"bytes,4,opt,name=score_type,json=scoreType" json:"score_type,omitempty"`
	Home             *int32  `protobuf:"varint,5,opt,name=home" json:"home,omitempty"`
	Away             *int32  `protobuf:"varint,6,opt,name=away" json:"away,omitempty"`
	Flags            *uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	DecidedByFa      *bool   `protobuf:"varint,8,opt,name=decided_by_fa,json=decidedByFa" json:"decided_by_fa,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Score) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Score) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *Score) GetSportId() uint32 {
	if m != nil && m.SportId != nil {
		return *m.SportId
	}
	return 0
}

func (m *Score) GetScoreType() string {
	if m != nil && m.ScoreType != nil {
		return *m.ScoreType
	}
	return ""
}

func (m *Score) GetHome() int32 {
	if m != nil && m.Home != nil {
		return *m.Home
	}
	return 0
}

func (m *Score) GetAway() int32 {
	if m != nil && m.Away != nil {
		return *m.Away
	}
	return 0
}

func (m *Score) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *Score) GetDecidedByFa() bool {
	if m != nil && m.DecidedByFa != nil {
		return *m.DecidedByFa
	}
	return false
}

type Scores struct {
	Entries          []*Score `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Scores) Reset()                    { *m = Scores{} }
func (m *Scores) String() string            { return proto.CompactTextString(m) }
func (*Scores) ProtoMessage()               {}
func (*Scores) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Scores) GetEntries() []*Score {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "sportsbook.Result")
	proto.RegisterType((*Results)(nil), "sportsbook.Results")
	proto.RegisterType((*Score)(nil), "sportsbook.Score")
	proto.RegisterType((*Scores)(nil), "sportsbook.Scores")
	proto.RegisterEnum("sportsbook.ResultCommentKey", ResultCommentKey_name, ResultCommentKey_value)
	proto.RegisterEnum("sportsbook.SettlementFlags", SettlementFlags_name, SettlementFlags_value)
}

func init() { proto.RegisterFile("sportsbook/resulting.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xdf, 0x4e, 0xdb, 0x4a,
	0x10, 0xc6, 0x8f, 0x09, 0x89, 0x93, 0x09, 0x21, 0x66, 0x0f, 0x3a, 0x2c, 0x1c, 0xda, 0x46, 0x91,
	0x5a, 0x59, 0x50, 0xa5, 0x52, 0xa5, 0xaa, 0xd7, 0x01, 0x02, 0x58, 0xa5, 0x10, 0x19, 0x44, 0xd5,
	0x2b, 0x6b, 0x63, 0x0f, 0x61, 0x85, 0xed, 0xb5, 0xbc, 0x9b, 0x94, 0xbc, 0x6b, 0xdf, 0xa2, 0x2f,
	0x50, 0x79, 0x9c, 0x7f, 0xad, 0x7a, 0xd5, 0x3b, 0xcf, 0xef, 0xfb, 0x76, 0x3d, 0xfb, 0xcd, 0xc0,
	0x81, 0xce, 0x54, 0x6e, 0xf4, 0x48, 0xa9, 0xa7, 0x77, 0x39, 0xea, 0x49, 0x6c, 0x64, 0x3a, 0xee,
	0x65, 0xb9, 0x32, 0x8a, 0xc1, 0x4a, 0xeb, 0xfe, 0xa8, 0x40, 0xcd, 0x27, 0x9d, 0x1d, 0x42, 0xc3,
	0xc8, 0x04, 0xb5, 0x11, 0x49, 0xc6, 0xad, 0x8e, 0xe5, 0x56, 0xfc, 0x15, 0x60, 0xfb, 0x50, 0xc7,
	0x29, 0xa6, 0x26, 0x90, 0x11, 0xdf, 0xe8, 0x58, 0x6e, 0xcb, 0xb7, 0xa9, 0xf6, 0x22, 0xf6, 0x3f,
	0x34, 0x12, 0x91, 0x3f, 0x21, 0x69, 0x15, 0xd2, 0xea, 0x25, 0xf0, 0x22, 0xf6, 0x1a, 0xb6, 0x35,
	0xc6, 0x18, 0x1a, 0xa9, 0xd2, 0xc0, 0xcc, 0x32, 0xe4, 0x9b, 0x1d, 0xcb, 0x6d, 0xf8, 0xad, 0x25,
	0xbd, 0x9b, 0x65, 0xc8, 0x8e, 0x60, 0x47, 0x67, 0x18, 0x4a, 0x11, 0x07, 0x23, 0x34, 0xc1, 0x54,
	0xc4, 0x13, 0xe4, 0x55, 0x72, 0xb6, 0xe7, 0xc2, 0x09, 0x9a, 0xfb, 0x02, 0xb3, 0x97, 0x00, 0x53,
	0x25, 0xa3, 0x07, 0x11, 0x1a, 0x95, 0xf3, 0x5a, 0xc7, 0x72, 0x2d, 0x7f, 0x8d, 0x30, 0x0e, 0xb6,
	0x9a, 0x98, 0x50, 0x25, 0xc8, 0xed, 0x8e, 0xe5, 0x56, 0xfd, 0x45, 0xc9, 0xfe, 0x83, 0x5a, 0x8e,
	0x42, 0xab, 0x94, 0x6f, 0xd3, 0xd5, 0xf3, 0x8a, 0xed, 0x81, 0x2d, 0x75, 0x10, 0xcb, 0x29, 0xf2,
	0x7a, 0xc7, 0x72, 0xeb, 0x7e, 0x4d, 0xea, 0x2b, 0x39, 0xa5, 0x03, 0xda, 0x08, 0x33, 0xd1, 0xbc,
	0x51, 0x1e, 0x28, 0x2b, 0xf6, 0x02, 0x40, 0x1b, 0x91, 0x9b, 0xa0, 0x08, 0x88, 0x43, 0x19, 0x16,
	0x91, 0x3b, 0x99, 0x20, 0x85, 0x95, 0x46, 0xa5, 0xd8, 0x24, 0xd1, 0xc6, 0x34, 0x22, 0x69, 0x17,
	0xaa, 0x0f, 0xb1, 0x18, 0x6b, 0xbe, 0x45, 0x41, 0x95, 0x05, 0x7b, 0x05, 0x4d, 0xa9, 0x03, 0x35,
	0x31, 0xb9, 0x1c, 0x3f, 0x1a, 0xde, 0xa2, 0x26, 0x40, 0xea, 0x9b, 0x39, 0x29, 0x0c, 0xf8, 0x6c,
	0x30, 0x4f, 0x45, 0x5c, 0xa4, 0xdc, 0xa6, 0x6e, 0x60, 0x81, 0xbc, 0x88, 0x1d, 0xc3, 0xce, 0xd2,
	0x90, 0xe5, 0x6a, 0x2a, 0x23, 0xcc, 0xb9, 0x43, 0x36, 0x67, 0x21, 0x0c, 0xe7, 0xbc, 0xfb, 0x11,
	0xec, 0x72, 0xe8, 0x9a, 0xbd, 0x05, 0x1b, 0x53, 0x93, 0x4b, 0xd4, 0xdc, 0xea, 0x54, 0xdc, 0xe6,
	0x7b, 0xd6, 0x5b, 0xad, 0x47, 0xaf, 0x74, 0xf9, 0x0b, 0x4b, 0xf7, 0xbb, 0x05, 0xd5, 0xdb, 0x50,
	0xe5, 0xf8, 0xf7, 0xdb, 0xb2, 0x0f, 0x75, 0xfa, 0xc1, 0x6a, 0x59, 0x6c, 0xaa, 0xbd, 0x88, 0x52,
	0x2d, 0x2e, 0x5f, 0xdf, 0x93, 0x06, 0x11, 0xda, 0x11, 0x06, 0x9b, 0x8f, 0xc5, 0x50, 0xab, 0x34,
	0x54, 0xfa, 0x2e, 0x98, 0xf8, 0x26, 0x66, 0xb4, 0x05, 0x55, 0x9f, 0xbe, 0x57, 0x11, 0xdb, 0xeb,
	0x11, 0x77, 0xa1, 0x15, 0x61, 0x28, 0x23, 0x8c, 0x82, 0xd1, 0x2c, 0x78, 0x10, 0xf3, 0x49, 0x37,
	0xe7, 0xf0, 0x64, 0x76, 0x2e, 0xba, 0x1f, 0xa0, 0x46, 0xaf, 0xd3, 0xec, 0xf8, 0xf7, 0x58, 0x76,
	0xd6, 0x63, 0x21, 0xd3, 0x32, 0x95, 0xa3, 0x37, 0xe0, 0x94, 0x41, 0x9d, 0xaa, 0x24, 0xc1, 0xd4,
	0x7c, 0xc2, 0x19, 0x63, 0xb0, 0x3d, 0xf4, 0xee, 0x4e, 0x2f, 0x07, 0x7e, 0x70, 0x7a, 0xd9, 0xbf,
	0xbe, 0x18, 0x38, 0xff, 0x1c, 0x3d, 0x43, 0xfb, 0x16, 0x8d, 0x89, 0xb1, 0x30, 0x9d, 0x53, 0x57,
	0xbb, 0xe0, 0xf4, 0x87, 0x43, 0xff, 0xe6, 0xbe, 0x7f, 0x15, 0x0c, 0x07, 0xd7, 0x67, 0xde, 0xf5,
	0x85, 0x63, 0xb1, 0x2d, 0xa8, 0x97, 0x74, 0x70, 0xe6, 0x6c, 0xb0, 0x36, 0x34, 0xcf, 0xbc, 0xdb,
	0x25, 0xd8, 0x64, 0x7b, 0xf0, 0xef, 0xaf, 0x77, 0x07, 0x97, 0x37, 0x9f, 0x07, 0x4e, 0xfd, 0x0f,
	0x42, 0xff, 0x4b, 0xff, 0xab, 0xe3, 0x9c, 0x1c, 0xc2, 0x41, 0xa8, 0x92, 0xde, 0x48, 0x9a, 0xb1,
	0x48, 0x30, 0x16, 0x23, 0xbd, 0xf6, 0x9c, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x41, 0x06, 0x53,
	0x90, 0x2d, 0x04, 0x00, 0x00,
}

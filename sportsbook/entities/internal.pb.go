// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/entities/internal.proto

/*
Package entities is a generated protocol buffer package.

It is generated from these files:
	sportsbook/entities/internal.proto

It has these top-level messages:
	Event
	Market
	Submarket
	Line
	Selection
*/
package entities

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Provider int32

const (
	Provider_NONE      Provider = 0
	Provider_BETRADAR  Provider = 1
	Provider_PINNACLE  Provider = 2
	Provider_IOSPORT   Provider = 3
	Provider_IMGGAMING Provider = 4
)

var Provider_name = map[int32]string{
	0: "NONE",
	1: "BETRADAR",
	2: "PINNACLE",
	3: "IOSPORT",
	4: "IMGGAMING",
}
var Provider_value = map[string]int32{
	"NONE":      0,
	"BETRADAR":  1,
	"PINNACLE":  2,
	"IOSPORT":   3,
	"IMGGAMING": 4,
}

func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}
func (Provider) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Event struct {
	Sequence          int64              `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Timestamp         int64              `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Id                uint32             `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	StartsAt          int64              `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	Sport             *api.Generic       `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	Competition       *api.Competition   `protobuf:"bytes,6,opt,name=competition" json:"competition,omitempty"`
	Competitors       []*api.Competitor  `protobuf:"bytes,7,rep,name=competitors" json:"competitors,omitempty"`
	Status            api.EventStatus    `protobuf:"varint,8,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	Metadata          *api.EventMetadata `protobuf:"bytes,9,opt,name=metadata" json:"metadata,omitempty"`
	Media             *api.EventMedia    `protobuf:"bytes,10,opt,name=media" json:"media,omitempty"`
	Availability      uint32             `protobuf:"varint,11,opt,name=availability" json:"availability,omitempty"`
	ParlayRestriction uint32             `protobuf:"varint,12,opt,name=parlay_restriction,json=parlayRestriction" json:"parlay_restriction,omitempty"`
	Markets           map[string]*Market `protobuf:"bytes,13,rep,name=markets" json:"markets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Event) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Event) GetCompetition() *api.Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Event) GetCompetitors() []*api.Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *Event) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *Event) GetMetadata() *api.EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetMedia() *api.EventMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Event) GetAvailability() uint32 {
	if m != nil {
		return m.Availability
	}
	return 0
}

func (m *Event) GetParlayRestriction() uint32 {
	if m != nil {
		return m.ParlayRestriction
	}
	return 0
}

func (m *Event) GetMarkets() map[string]*Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

type Market struct {
	Id         uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Submarkets map[string]*Submarket `protobuf:"bytes,2,rep,name=submarkets" json:"submarkets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Market) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Market) GetSubmarkets() map[string]*Submarket {
	if m != nil {
		return m.Submarkets
	}
	return nil
}

type Submarket struct {
	Lines    []*Line  `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
	Provider Provider `protobuf:"varint,2,opt,name=provider,enum=entities.Provider" json:"provider,omitempty"`
}

func (m *Submarket) Reset()                    { *m = Submarket{} }
func (m *Submarket) String() string            { return proto.CompactTextString(m) }
func (*Submarket) ProtoMessage()               {}
func (*Submarket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Submarket) GetLines() []*Line {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *Submarket) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_NONE
}

type Line struct {
	Selections []*Selection `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty"`
}

func (m *Line) Reset()                    { *m = Line{} }
func (m *Line) String() string            { return proto.CompactTextString(m) }
func (*Line) ProtoMessage()               {}
func (*Line) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Line) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

type Selection struct {
	Outcome  string              `protobuf:"bytes,1,opt,name=outcome" json:"outcome,omitempty"`
	Sbv      string              `protobuf:"bytes,2,opt,name=sbv" json:"sbv,omitempty"`
	Odds     float64             `protobuf:"fixed64,3,opt,name=odds" json:"odds,omitempty"`
	MinStake float64             `protobuf:"fixed64,4,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake float64             `protobuf:"fixed64,5,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	Status   api.SelectionStatus `protobuf:"varint,6,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Selection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *Selection) GetSbv() string {
	if m != nil {
		return m.Sbv
	}
	return ""
}

func (m *Selection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *Selection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *Selection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *Selection) GetStatus() api.SelectionStatus {
	if m != nil {
		return m.Status
	}
	return api.SelectionStatus_DISABLED
}

func init() {
	proto.RegisterType((*Event)(nil), "entities.Event")
	proto.RegisterType((*Market)(nil), "entities.Market")
	proto.RegisterType((*Submarket)(nil), "entities.Submarket")
	proto.RegisterType((*Line)(nil), "entities.Line")
	proto.RegisterType((*Selection)(nil), "entities.Selection")
	proto.RegisterEnum("entities.Provider", Provider_name, Provider_value)
}

func init() { proto.RegisterFile("sportsbook/entities/internal.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdd, 0x6e, 0x1a, 0x3b,
	0x10, 0xc7, 0xcf, 0xf2, 0xb9, 0x3b, 0x10, 0xc2, 0x99, 0x73, 0x2e, 0x56, 0x9c, 0x48, 0x07, 0xd1,
	0xa6, 0xa2, 0x55, 0xbb, 0x51, 0x89, 0x54, 0x55, 0xed, 0x4d, 0x49, 0x8a, 0x10, 0x12, 0x90, 0xc8,
	0xe4, 0x3e, 0xf2, 0xb2, 0x56, 0x65, 0xb1, 0x5f, 0xb5, 0x0d, 0x0a, 0x2f, 0xd5, 0x9b, 0x3e, 0x4a,
	0x5f, 0xa8, 0x5a, 0xef, 0x27, 0x51, 0xef, 0xd6, 0xf3, 0xfb, 0x8f, 0xfd, 0xf7, 0x78, 0x66, 0x61,
	0x24, 0xe3, 0x48, 0x28, 0xe9, 0x46, 0xd1, 0xee, 0x8a, 0x85, 0x8a, 0x2b, 0xce, 0xe4, 0x15, 0x0f,
	0x15, 0x13, 0x21, 0xf5, 0x9d, 0x58, 0x44, 0x2a, 0x42, 0x33, 0x07, 0x83, 0xff, 0x2b, 0x6a, 0x1a,
	0xf3, 0xab, 0x72, 0x99, 0x4a, 0x47, 0xbf, 0x1a, 0xd0, 0x9c, 0x1d, 0x58, 0xa8, 0x70, 0x00, 0xa6,
	0x64, 0xdf, 0xf7, 0x2c, 0xdc, 0x32, 0xdb, 0x18, 0x1a, 0xe3, 0x3a, 0x29, 0xd6, 0x78, 0x01, 0x96,
	0xe2, 0x01, 0x93, 0x8a, 0x06, 0xb1, 0x5d, 0xd3, 0xb0, 0x0c, 0x60, 0x0f, 0x6a, 0xdc, 0xb3, 0xeb,
	0x43, 0x63, 0x7c, 0x46, 0x6a, 0xdc, 0xc3, 0xff, 0xc0, 0x92, 0x8a, 0x0a, 0x25, 0x1f, 0xa9, 0xb2,
	0x1b, 0xd9, 0x56, 0x3a, 0x30, 0x55, 0x38, 0x82, 0xa6, 0x36, 0x61, 0x37, 0x87, 0xc6, 0xb8, 0x33,
	0xe9, 0x3a, 0x34, 0xe6, 0xce, 0x9c, 0x85, 0x4c, 0xf0, 0x2d, 0x49, 0x11, 0x4e, 0xa0, 0xb3, 0x8d,
	0x82, 0x98, 0x25, 0x97, 0x88, 0x42, 0xbb, 0xa5, 0x95, 0x7d, 0xad, 0xbc, 0x2d, 0xe3, 0xa4, 0x2a,
	0xc2, 0xf7, 0x65, 0x4e, 0x24, 0xa4, 0xdd, 0x1e, 0xd6, 0xc7, 0x9d, 0xc9, 0xf9, 0x49, 0x4e, 0x24,
	0x48, 0x55, 0x83, 0x63, 0x68, 0x49, 0x45, 0xd5, 0x5e, 0xda, 0xe6, 0xd0, 0x18, 0xf7, 0xb2, 0x13,
	0x74, 0x35, 0x36, 0x3a, 0x4e, 0x32, 0x8e, 0x0e, 0x98, 0x01, 0x53, 0xd4, 0xa3, 0x8a, 0xda, 0x96,
	0x76, 0x83, 0xa5, 0x76, 0x95, 0x11, 0x52, 0x68, 0xf0, 0x12, 0x9a, 0x01, 0xf3, 0x38, 0xb5, 0x41,
	0x8b, 0xcf, 0xab, 0x62, 0x8f, 0x53, 0x92, 0x52, 0x1c, 0x41, 0x97, 0x1e, 0x28, 0xf7, 0xa9, 0xcb,
	0x7d, 0xae, 0x8e, 0x76, 0x47, 0x97, 0xf0, 0x24, 0x86, 0xef, 0x00, 0x63, 0x2a, 0x7c, 0x7a, 0x7c,
	0x14, 0x4c, 0x2a, 0xc1, 0xb7, 0xba, 0x24, 0x5d, 0xad, 0xfc, 0x3b, 0x25, 0xa4, 0x04, 0xf8, 0x01,
	0xda, 0x01, 0x15, 0x3b, 0xa6, 0xa4, 0x7d, 0xa6, 0x4b, 0x70, 0xe1, 0xe4, 0xcd, 0x90, 0x1a, 0x70,
	0x56, 0x29, 0x9e, 0x85, 0x4a, 0x1c, 0x49, 0x2e, 0x1e, 0x2c, 0xa1, 0x5b, 0x05, 0xd8, 0x87, 0xfa,
	0x8e, 0x1d, 0x75, 0x23, 0x58, 0x24, 0xf9, 0xc4, 0x57, 0xd0, 0x3c, 0x50, 0x7f, 0xcf, 0xf4, 0xfb,
	0x27, 0xcf, 0x51, 0xec, 0x9b, 0x26, 0x92, 0x14, 0x7f, 0xaa, 0x7d, 0x34, 0x46, 0x3f, 0x0c, 0x68,
	0xa5, 0xd1, 0xac, 0x39, 0x8c, 0xa2, 0x39, 0xbe, 0x00, 0xc8, 0xbd, 0x9b, 0x7b, 0xac, 0x69, 0x8f,
	0xc3, 0xe7, 0x7b, 0x39, 0x9b, 0x42, 0x92, 0xfa, 0xac, 0xe4, 0x0c, 0x08, 0x9c, 0x3f, 0xc3, 0x7f,
	0x70, 0xfb, 0xfa, 0xd4, 0xed, 0x3f, 0xe5, 0x09, 0x45, 0x6e, 0xd5, 0x30, 0x05, 0xab, 0x88, 0xe3,
	0x4b, 0x68, 0xfa, 0x3c, 0x64, 0xd2, 0x36, 0xb4, 0xbb, 0x5e, 0x99, 0xbb, 0xe4, 0x21, 0x23, 0x29,
	0x4c, 0x7a, 0x22, 0x16, 0xd1, 0x81, 0x7b, 0x4c, 0xe8, 0x43, 0x7a, 0x13, 0x2c, 0x85, 0xf7, 0x19,
	0x21, 0x85, 0x66, 0xf4, 0x19, 0x1a, 0x49, 0x3a, 0x5e, 0x03, 0x48, 0xe6, 0x33, 0xfd, 0x5c, 0xf9,
	0x11, 0x55, 0x7b, 0x39, 0x23, 0x15, 0xd9, 0xe8, 0xa7, 0x01, 0x56, 0x41, 0xd0, 0x86, 0x76, 0xb4,
	0x57, 0xdb, 0x28, 0x60, 0xd9, 0x95, 0xf3, 0x65, 0x52, 0x08, 0xe9, 0x1e, 0xb4, 0x1f, 0x8b, 0x24,
	0x9f, 0x88, 0xd0, 0x88, 0x3c, 0x4f, 0xea, 0xf1, 0x34, 0x88, 0xfe, 0x4e, 0x06, 0x34, 0xe0, 0xe1,
	0xa3, 0x54, 0x74, 0xc7, 0xf4, 0x80, 0x1a, 0xc4, 0x0c, 0x78, 0xb8, 0x49, 0xd6, 0x1a, 0xd2, 0xa7,
	0x0c, 0x36, 0x33, 0x48, 0x9f, 0x52, 0xf8, 0xb6, 0x18, 0x99, 0x96, 0xbe, 0xf2, 0xbf, 0xba, 0xb3,
	0x0b, 0x67, 0xa7, 0x63, 0xf3, 0x66, 0x09, 0x66, 0x5e, 0x08, 0x34, 0xa1, 0xb1, 0xbe, 0x5b, 0xcf,
	0xfa, 0x7f, 0x61, 0x17, 0xcc, 0x9b, 0xd9, 0x03, 0x99, 0x7e, 0x9d, 0x92, 0xbe, 0x91, 0xac, 0xee,
	0x17, 0xeb, 0xf5, 0xf4, 0x76, 0x39, 0xeb, 0xd7, 0xb0, 0x03, 0xed, 0xc5, 0xdd, 0xe6, 0xfe, 0x8e,
	0x3c, 0xf4, 0xeb, 0x78, 0x06, 0xd6, 0x62, 0x35, 0x9f, 0x4f, 0x57, 0x8b, 0xf5, 0xbc, 0xdf, 0xb8,
	0xb9, 0x84, 0x17, 0xdb, 0x28, 0x70, 0x5c, 0xae, 0xbe, 0xd1, 0x80, 0xf9, 0xd4, 0x95, 0x4e, 0xe5,
	0x77, 0x96, 0x17, 0xd0, 0x6d, 0xe9, 0x1f, 0xdb, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22,
	0xe0, 0x50, 0x39, 0x29, 0x05, 0x00, 0x00,
}

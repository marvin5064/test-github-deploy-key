// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/static.proto

package sportsbook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Provider int32

const (
	//    INTERNAL = 0; For future use?
	Provider_BETRADAR Provider = 1
	Provider_PINNACLE Provider = 2
)

var Provider_name = map[int32]string{
	1: "BETRADAR",
	2: "PINNACLE",
}
var Provider_value = map[string]int32{
	"BETRADAR": 1,
	"PINNACLE": 2,
}

func (x Provider) Enum() *Provider {
	p := new(Provider)
	*p = x
	return p
}
func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}
func (x *Provider) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Provider_value, data, "Provider")
	if err != nil {
		return err
	}
	*x = Provider(value)
	return nil
}
func (Provider) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type SbvPair struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SbvPair) Reset()                    { *m = SbvPair{} }
func (m *SbvPair) String() string            { return proto.CompactTextString(m) }
func (*SbvPair) ProtoMessage()               {}
func (*SbvPair) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SbvPair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SbvPair) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type BetradarMarket struct {
	Id               *string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Sbv              []*SbvPair `protobuf:"bytes,2,rep,name=sbv" json:"sbv,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BetradarMarket) Reset()                    { *m = BetradarMarket{} }
func (m *BetradarMarket) String() string            { return proto.CompactTextString(m) }
func (*BetradarMarket) ProtoMessage()               {}
func (*BetradarMarket) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *BetradarMarket) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *BetradarMarket) GetSbv() []*SbvPair {
	if m != nil {
		return m.Sbv
	}
	return nil
}

type PinnacleMarketMapping struct {
	// Types that are valid to be assigned to Type:
	//	*PinnacleMarketMapping_Special_
	//	*PinnacleMarketMapping_Normal_
	Type             isPinnacleMarketMapping_Type `protobuf_oneof:"type"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *PinnacleMarketMapping) Reset()                    { *m = PinnacleMarketMapping{} }
func (m *PinnacleMarketMapping) String() string            { return proto.CompactTextString(m) }
func (*PinnacleMarketMapping) ProtoMessage()               {}
func (*PinnacleMarketMapping) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type isPinnacleMarketMapping_Type interface{ isPinnacleMarketMapping_Type() }

type PinnacleMarketMapping_Special_ struct {
	Special *PinnacleMarketMapping_Special `protobuf:"bytes,1,opt,name=special,oneof"`
}
type PinnacleMarketMapping_Normal_ struct {
	Normal *PinnacleMarketMapping_Normal `protobuf:"bytes,2,opt,name=normal,oneof"`
}

func (*PinnacleMarketMapping_Special_) isPinnacleMarketMapping_Type() {}
func (*PinnacleMarketMapping_Normal_) isPinnacleMarketMapping_Type()  {}

func (m *PinnacleMarketMapping) GetType() isPinnacleMarketMapping_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PinnacleMarketMapping) GetSpecial() *PinnacleMarketMapping_Special {
	if x, ok := m.GetType().(*PinnacleMarketMapping_Special_); ok {
		return x.Special
	}
	return nil
}

func (m *PinnacleMarketMapping) GetNormal() *PinnacleMarketMapping_Normal {
	if x, ok := m.GetType().(*PinnacleMarketMapping_Normal_); ok {
		return x.Normal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PinnacleMarketMapping) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PinnacleMarketMapping_OneofMarshaler, _PinnacleMarketMapping_OneofUnmarshaler, _PinnacleMarketMapping_OneofSizer, []interface{}{
		(*PinnacleMarketMapping_Special_)(nil),
		(*PinnacleMarketMapping_Normal_)(nil),
	}
}

func _PinnacleMarketMapping_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PinnacleMarketMapping)
	// type
	switch x := m.Type.(type) {
	case *PinnacleMarketMapping_Special_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Special); err != nil {
			return err
		}
	case *PinnacleMarketMapping_Normal_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Normal); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PinnacleMarketMapping.Type has unexpected type %T", x)
	}
	return nil
}

func _PinnacleMarketMapping_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PinnacleMarketMapping)
	switch tag {
	case 1: // type.special
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PinnacleMarketMapping_Special)
		err := b.DecodeMessage(msg)
		m.Type = &PinnacleMarketMapping_Special_{msg}
		return true, err
	case 2: // type.normal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PinnacleMarketMapping_Normal)
		err := b.DecodeMessage(msg)
		m.Type = &PinnacleMarketMapping_Normal_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PinnacleMarketMapping_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PinnacleMarketMapping)
	// type
	switch x := m.Type.(type) {
	case *PinnacleMarketMapping_Special_:
		s := proto.Size(x.Special)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PinnacleMarketMapping_Normal_:
		s := proto.Size(x.Normal)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PinnacleMarketMapping_Normal struct {
	CompetitionRegex        *string                                `protobuf:"bytes,1,opt,name=competition_regex,json=competitionRegex" json:"competition_regex,omitempty"`
	CompetitionFields       []string                               `protobuf:"bytes,2,rep,name=competition_fields,json=competitionFields" json:"competition_fields,omitempty"`
	CompetitorRegex         *string                                `protobuf:"bytes,3,opt,name=competitor_regex,json=competitorRegex" json:"competitor_regex,omitempty"`
	CompetitorRegexNotMatch *string                                `protobuf:"bytes,4,opt,name=competitor_regex_not_match,json=competitorRegexNotMatch" json:"competitor_regex_not_match,omitempty"`
	CompetitorFields        []string                               `protobuf:"bytes,5,rep,name=competitor_fields,json=competitorFields" json:"competitor_fields,omitempty"`
	Markets                 []*PinnacleMarketMapping_Normal_Market `protobuf:"bytes,6,rep,name=markets" json:"markets,omitempty"`
	XXX_unrecognized        []byte                                 `json:"-"`
}

func (m *PinnacleMarketMapping_Normal) Reset()                    { *m = PinnacleMarketMapping_Normal{} }
func (m *PinnacleMarketMapping_Normal) String() string            { return proto.CompactTextString(m) }
func (*PinnacleMarketMapping_Normal) ProtoMessage()               {}
func (*PinnacleMarketMapping_Normal) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 0} }

func (m *PinnacleMarketMapping_Normal) GetCompetitionRegex() string {
	if m != nil && m.CompetitionRegex != nil {
		return *m.CompetitionRegex
	}
	return ""
}

func (m *PinnacleMarketMapping_Normal) GetCompetitionFields() []string {
	if m != nil {
		return m.CompetitionFields
	}
	return nil
}

func (m *PinnacleMarketMapping_Normal) GetCompetitorRegex() string {
	if m != nil && m.CompetitorRegex != nil {
		return *m.CompetitorRegex
	}
	return ""
}

func (m *PinnacleMarketMapping_Normal) GetCompetitorRegexNotMatch() string {
	if m != nil && m.CompetitorRegexNotMatch != nil {
		return *m.CompetitorRegexNotMatch
	}
	return ""
}

func (m *PinnacleMarketMapping_Normal) GetCompetitorFields() []string {
	if m != nil {
		return m.CompetitorFields
	}
	return nil
}

func (m *PinnacleMarketMapping_Normal) GetMarkets() []*PinnacleMarketMapping_Normal_Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

type PinnacleMarketMapping_Normal_Market struct {
	PeriodNumber     *uint32  `protobuf:"varint,1,opt,name=period_number,json=periodNumber" json:"period_number,omitempty"`
	MarketType       *string  `protobuf:"bytes,2,opt,name=market_type,json=marketType" json:"market_type,omitempty"`
	OddsFields       []string `protobuf:"bytes,3,rep,name=odds_fields,json=oddsFields" json:"odds_fields,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PinnacleMarketMapping_Normal_Market) Reset()         { *m = PinnacleMarketMapping_Normal_Market{} }
func (m *PinnacleMarketMapping_Normal_Market) String() string { return proto.CompactTextString(m) }
func (*PinnacleMarketMapping_Normal_Market) ProtoMessage()    {}
func (*PinnacleMarketMapping_Normal_Market) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2, 0, 0}
}

func (m *PinnacleMarketMapping_Normal_Market) GetPeriodNumber() uint32 {
	if m != nil && m.PeriodNumber != nil {
		return *m.PeriodNumber
	}
	return 0
}

func (m *PinnacleMarketMapping_Normal_Market) GetMarketType() string {
	if m != nil && m.MarketType != nil {
		return *m.MarketType
	}
	return ""
}

func (m *PinnacleMarketMapping_Normal_Market) GetOddsFields() []string {
	if m != nil {
		return m.OddsFields
	}
	return nil
}

type PinnacleMarketMapping_Special struct {
	FixtureFeed      *PinnacleMarketMapping_Special_FixtureFeed `protobuf:"bytes,1,opt,name=fixture_feed,json=fixtureFeed" json:"fixture_feed,omitempty"`
	OddsFeed         *PinnacleMarketMapping_Special_OddsFeed    `protobuf:"bytes,2,opt,name=odds_feed,json=oddsFeed" json:"odds_feed,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *PinnacleMarketMapping_Special) Reset()         { *m = PinnacleMarketMapping_Special{} }
func (m *PinnacleMarketMapping_Special) String() string { return proto.CompactTextString(m) }
func (*PinnacleMarketMapping_Special) ProtoMessage()    {}
func (*PinnacleMarketMapping_Special) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2, 1}
}

func (m *PinnacleMarketMapping_Special) GetFixtureFeed() *PinnacleMarketMapping_Special_FixtureFeed {
	if m != nil {
		return m.FixtureFeed
	}
	return nil
}

func (m *PinnacleMarketMapping_Special) GetOddsFeed() *PinnacleMarketMapping_Special_OddsFeed {
	if m != nil {
		return m.OddsFeed
	}
	return nil
}

type PinnacleMarketMapping_Special_FixtureFeed struct {
	BetType          *string  `protobuf:"bytes,1,opt,name=bet_type,json=betType" json:"bet_type,omitempty"`
	PeriodNumber     *uint32  `protobuf:"varint,2,opt,name=period_number,json=periodNumber" json:"period_number,omitempty"`
	NameRegex        *string  `protobuf:"bytes,3,opt,name=name_regex,json=nameRegex" json:"name_regex,omitempty"`
	NameFields       []string `protobuf:"bytes,4,rep,name=name_fields,json=nameFields" json:"name_fields,omitempty"`
	Category         *string  `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PinnacleMarketMapping_Special_FixtureFeed) Reset() {
	*m = PinnacleMarketMapping_Special_FixtureFeed{}
}
func (m *PinnacleMarketMapping_Special_FixtureFeed) String() string { return proto.CompactTextString(m) }
func (*PinnacleMarketMapping_Special_FixtureFeed) ProtoMessage()    {}
func (*PinnacleMarketMapping_Special_FixtureFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2, 1, 0}
}

func (m *PinnacleMarketMapping_Special_FixtureFeed) GetBetType() string {
	if m != nil && m.BetType != nil {
		return *m.BetType
	}
	return ""
}

func (m *PinnacleMarketMapping_Special_FixtureFeed) GetPeriodNumber() uint32 {
	if m != nil && m.PeriodNumber != nil {
		return *m.PeriodNumber
	}
	return 0
}

func (m *PinnacleMarketMapping_Special_FixtureFeed) GetNameRegex() string {
	if m != nil && m.NameRegex != nil {
		return *m.NameRegex
	}
	return ""
}

func (m *PinnacleMarketMapping_Special_FixtureFeed) GetNameFields() []string {
	if m != nil {
		return m.NameFields
	}
	return nil
}

func (m *PinnacleMarketMapping_Special_FixtureFeed) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

type PinnacleMarketMapping_Special_OddsFeed struct {
	FieldKeys        []string `protobuf:"bytes,1,rep,name=field_keys,json=fieldKeys" json:"field_keys,omitempty"`
	Fields           []string `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PinnacleMarketMapping_Special_OddsFeed) Reset() {
	*m = PinnacleMarketMapping_Special_OddsFeed{}
}
func (m *PinnacleMarketMapping_Special_OddsFeed) String() string { return proto.CompactTextString(m) }
func (*PinnacleMarketMapping_Special_OddsFeed) ProtoMessage()    {}
func (*PinnacleMarketMapping_Special_OddsFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2, 1, 1}
}

func (m *PinnacleMarketMapping_Special_OddsFeed) GetFieldKeys() []string {
	if m != nil {
		return m.FieldKeys
	}
	return nil
}

func (m *PinnacleMarketMapping_Special_OddsFeed) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type BetradarMarketMapping struct {
	Markets          []*BetradarMarket `protobuf:"bytes,1,rep,name=markets" json:"markets,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *BetradarMarketMapping) Reset()                    { *m = BetradarMarketMapping{} }
func (m *BetradarMarketMapping) String() string            { return proto.CompactTextString(m) }
func (*BetradarMarketMapping) ProtoMessage()               {}
func (*BetradarMarketMapping) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *BetradarMarketMapping) GetMarkets() []*BetradarMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

type SbvValidator struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Validator        *string `protobuf:"bytes,2,opt,name=validator" json:"validator,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SbvValidator) Reset()                    { *m = SbvValidator{} }
func (m *SbvValidator) String() string            { return proto.CompactTextString(m) }
func (*SbvValidator) ProtoMessage()               {}
func (*SbvValidator) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *SbvValidator) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SbvValidator) GetValidator() string {
	if m != nil && m.Validator != nil {
		return *m.Validator
	}
	return ""
}

type SelectionOutcome struct {
	Outcome          *string `protobuf:"bytes,1,opt,name=outcome" json:"outcome,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SelectionOutcome) Reset()                    { *m = SelectionOutcome{} }
func (m *SelectionOutcome) String() string            { return proto.CompactTextString(m) }
func (*SelectionOutcome) ProtoMessage()               {}
func (*SelectionOutcome) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *SelectionOutcome) GetOutcome() string {
	if m != nil && m.Outcome != nil {
		return *m.Outcome
	}
	return ""
}

func (m *SelectionOutcome) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type ColumnView struct {
	SelectionOutcomes []*SelectionOutcome `protobuf:"bytes,1,rep,name=selection_outcomes,json=selectionOutcomes" json:"selection_outcomes,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *ColumnView) Reset()                    { *m = ColumnView{} }
func (m *ColumnView) String() string            { return proto.CompactTextString(m) }
func (*ColumnView) ProtoMessage()               {}
func (*ColumnView) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *ColumnView) GetSelectionOutcomes() []*SelectionOutcome {
	if m != nil {
		return m.SelectionOutcomes
	}
	return nil
}

type TableView struct {
	Column           *string `protobuf:"bytes,1,opt,name=column" json:"column,omitempty"`
	Row              *string `protobuf:"bytes,2,opt,name=row" json:"row,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TableView) Reset()                    { *m = TableView{} }
func (m *TableView) String() string            { return proto.CompactTextString(m) }
func (*TableView) ProtoMessage()               {}
func (*TableView) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *TableView) GetColumn() string {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return ""
}

func (m *TableView) GetRow() string {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return ""
}

type ViewDefinition struct {
	Render     *string  `protobuf:"bytes,1,opt,name=render" json:"render,omitempty"`
	MarketName *string  `protobuf:"bytes,2,opt,name=market_name,json=marketName" json:"market_name,omitempty"`
	GroupBy    []string `protobuf:"bytes,3,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*ViewDefinition_ColumnView
	//	*ViewDefinition_TableView
	Type             isViewDefinition_Type `protobuf_oneof:"type"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ViewDefinition) Reset()                    { *m = ViewDefinition{} }
func (m *ViewDefinition) String() string            { return proto.CompactTextString(m) }
func (*ViewDefinition) ProtoMessage()               {}
func (*ViewDefinition) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

type isViewDefinition_Type interface{ isViewDefinition_Type() }

type ViewDefinition_ColumnView struct {
	ColumnView *ColumnView `protobuf:"bytes,4,opt,name=column_view,json=columnView,oneof"`
}
type ViewDefinition_TableView struct {
	TableView *TableView `protobuf:"bytes,5,opt,name=table_view,json=tableView,oneof"`
}

func (*ViewDefinition_ColumnView) isViewDefinition_Type() {}
func (*ViewDefinition_TableView) isViewDefinition_Type()  {}

func (m *ViewDefinition) GetType() isViewDefinition_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ViewDefinition) GetRender() string {
	if m != nil && m.Render != nil {
		return *m.Render
	}
	return ""
}

func (m *ViewDefinition) GetMarketName() string {
	if m != nil && m.MarketName != nil {
		return *m.MarketName
	}
	return ""
}

func (m *ViewDefinition) GetGroupBy() []string {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *ViewDefinition) GetColumnView() *ColumnView {
	if x, ok := m.GetType().(*ViewDefinition_ColumnView); ok {
		return x.ColumnView
	}
	return nil
}

func (m *ViewDefinition) GetTableView() *TableView {
	if x, ok := m.GetType().(*ViewDefinition_TableView); ok {
		return x.TableView
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ViewDefinition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ViewDefinition_OneofMarshaler, _ViewDefinition_OneofUnmarshaler, _ViewDefinition_OneofSizer, []interface{}{
		(*ViewDefinition_ColumnView)(nil),
		(*ViewDefinition_TableView)(nil),
	}
}

func _ViewDefinition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ViewDefinition)
	// type
	switch x := m.Type.(type) {
	case *ViewDefinition_ColumnView:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ColumnView); err != nil {
			return err
		}
	case *ViewDefinition_TableView:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableView); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ViewDefinition.Type has unexpected type %T", x)
	}
	return nil
}

func _ViewDefinition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ViewDefinition)
	switch tag {
	case 4: // type.column_view
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ColumnView)
		err := b.DecodeMessage(msg)
		m.Type = &ViewDefinition_ColumnView{msg}
		return true, err
	case 5: // type.table_view
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableView)
		err := b.DecodeMessage(msg)
		m.Type = &ViewDefinition_TableView{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ViewDefinition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ViewDefinition)
	// type
	switch x := m.Type.(type) {
	case *ViewDefinition_ColumnView:
		s := proto.Size(x.ColumnView)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ViewDefinition_TableView:
		s := proto.Size(x.TableView)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MarketDefinition struct {
	Id               *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Outcomes         []string               `protobuf:"bytes,3,rep,name=outcomes" json:"outcomes,omitempty"`
	SbvValidators    []*SbvValidator        `protobuf:"bytes,4,rep,name=sbv_validators,json=sbvValidators" json:"sbv_validators,omitempty"`
	Sbv              []string               `protobuf:"bytes,5,rep,name=sbv" json:"sbv,omitempty"`
	Pinnacle         *PinnacleMarketMapping `protobuf:"bytes,6,opt,name=pinnacle" json:"pinnacle,omitempty"`
	Betradar         *BetradarMarketMapping `protobuf:"bytes,7,opt,name=betradar" json:"betradar,omitempty"`
	Views            []*ViewDefinition      `protobuf:"bytes,8,rep,name=views" json:"views,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MarketDefinition) Reset()                    { *m = MarketDefinition{} }
func (m *MarketDefinition) String() string            { return proto.CompactTextString(m) }
func (*MarketDefinition) ProtoMessage()               {}
func (*MarketDefinition) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *MarketDefinition) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MarketDefinition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MarketDefinition) GetOutcomes() []string {
	if m != nil {
		return m.Outcomes
	}
	return nil
}

func (m *MarketDefinition) GetSbvValidators() []*SbvValidator {
	if m != nil {
		return m.SbvValidators
	}
	return nil
}

func (m *MarketDefinition) GetSbv() []string {
	if m != nil {
		return m.Sbv
	}
	return nil
}

func (m *MarketDefinition) GetPinnacle() *PinnacleMarketMapping {
	if m != nil {
		return m.Pinnacle
	}
	return nil
}

func (m *MarketDefinition) GetBetradar() *BetradarMarketMapping {
	if m != nil {
		return m.Betradar
	}
	return nil
}

func (m *MarketDefinition) GetViews() []*ViewDefinition {
	if m != nil {
		return m.Views
	}
	return nil
}

type ProviderMapping struct {
	Provider         *Provider `protobuf:"varint,1,opt,name=provider,enum=sportsbook.Provider" json:"provider,omitempty"`
	Ids              []string  `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ProviderMapping) Reset()                    { *m = ProviderMapping{} }
func (m *ProviderMapping) String() string            { return proto.CompactTextString(m) }
func (*ProviderMapping) ProtoMessage()               {}
func (*ProviderMapping) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *ProviderMapping) GetProvider() Provider {
	if m != nil && m.Provider != nil {
		return *m.Provider
	}
	return Provider_BETRADAR
}

func (m *ProviderMapping) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type SportV2 struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key              *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Name             *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SportV2) Reset()                    { *m = SportV2{} }
func (m *SportV2) String() string            { return proto.CompactTextString(m) }
func (*SportV2) ProtoMessage()               {}
func (*SportV2) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *SportV2) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SportV2) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *SportV2) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Sport struct {
	Id               *uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key              *string             `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Name             *string             `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Providers        []*ProviderMapping  `protobuf:"bytes,4,rep,name=providers" json:"providers,omitempty"`
	Markets          []*MarketDefinition `protobuf:"bytes,5,rep,name=markets" json:"markets,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Sport) Reset()                    { *m = Sport{} }
func (m *Sport) String() string            { return proto.CompactTextString(m) }
func (*Sport) ProtoMessage()               {}
func (*Sport) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *Sport) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Sport) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Sport) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Sport) GetProviders() []*ProviderMapping {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *Sport) GetMarkets() []*MarketDefinition {
	if m != nil {
		return m.Markets
	}
	return nil
}

type SportsList struct {
	Sports           []*Sport `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SportsList) Reset()                    { *m = SportsList{} }
func (m *SportsList) String() string            { return proto.CompactTextString(m) }
func (*SportsList) ProtoMessage()               {}
func (*SportsList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *SportsList) GetSports() []*Sport {
	if m != nil {
		return m.Sports
	}
	return nil
}

func init() {
	proto.RegisterType((*SbvPair)(nil), "sportsbook.SbvPair")
	proto.RegisterType((*BetradarMarket)(nil), "sportsbook.BetradarMarket")
	proto.RegisterType((*PinnacleMarketMapping)(nil), "sportsbook.PinnacleMarketMapping")
	proto.RegisterType((*PinnacleMarketMapping_Normal)(nil), "sportsbook.PinnacleMarketMapping.Normal")
	proto.RegisterType((*PinnacleMarketMapping_Normal_Market)(nil), "sportsbook.PinnacleMarketMapping.Normal.Market")
	proto.RegisterType((*PinnacleMarketMapping_Special)(nil), "sportsbook.PinnacleMarketMapping.Special")
	proto.RegisterType((*PinnacleMarketMapping_Special_FixtureFeed)(nil), "sportsbook.PinnacleMarketMapping.Special.FixtureFeed")
	proto.RegisterType((*PinnacleMarketMapping_Special_OddsFeed)(nil), "sportsbook.PinnacleMarketMapping.Special.OddsFeed")
	proto.RegisterType((*BetradarMarketMapping)(nil), "sportsbook.BetradarMarketMapping")
	proto.RegisterType((*SbvValidator)(nil), "sportsbook.SbvValidator")
	proto.RegisterType((*SelectionOutcome)(nil), "sportsbook.SelectionOutcome")
	proto.RegisterType((*ColumnView)(nil), "sportsbook.ColumnView")
	proto.RegisterType((*TableView)(nil), "sportsbook.TableView")
	proto.RegisterType((*ViewDefinition)(nil), "sportsbook.ViewDefinition")
	proto.RegisterType((*MarketDefinition)(nil), "sportsbook.MarketDefinition")
	proto.RegisterType((*ProviderMapping)(nil), "sportsbook.ProviderMapping")
	proto.RegisterType((*SportV2)(nil), "sportsbook.SportV2")
	proto.RegisterType((*Sport)(nil), "sportsbook.Sport")
	proto.RegisterType((*SportsList)(nil), "sportsbook.SportsList")
	proto.RegisterEnum("sportsbook.Provider", Provider_name, Provider_value)
}

func init() { proto.RegisterFile("sportsbook/static.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1059 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x8e, 0xed, 0xf8, 0xef, 0x38, 0x49, 0x9d, 0xa1, 0x49, 0x17, 0x13, 0xd4, 0xb2, 0x08, 0x94,
	0x80, 0x70, 0x8b, 0x45, 0x8b, 0x2a, 0x04, 0x25, 0x6e, 0x13, 0x52, 0xb5, 0x71, 0xa2, 0x49, 0x88,
	0xe0, 0x6a, 0xb5, 0xeb, 0x9d, 0x84, 0x51, 0x76, 0x77, 0x56, 0x33, 0x63, 0xa7, 0x7e, 0x03, 0xde,
	0x83, 0x2b, 0xee, 0xb8, 0xe1, 0x51, 0xb8, 0xe6, 0x55, 0xd0, 0xfc, 0xec, 0x8f, 0x1d, 0x4b, 0x8d,
	0xb8, 0x9b, 0x73, 0x66, 0xbe, 0x6f, 0xce, 0x39, 0xf3, 0x9d, 0xb3, 0x0b, 0x0f, 0x44, 0xca, 0xb8,
	0x14, 0x01, 0x63, 0xd7, 0x8f, 0x85, 0xf4, 0x25, 0x1d, 0xf7, 0x53, 0xce, 0x24, 0x43, 0x50, 0x6c,
	0xb8, 0x5f, 0x43, 0xf3, 0x2c, 0x98, 0x9e, 0xfa, 0x94, 0xa3, 0x2e, 0xd4, 0xae, 0xc9, 0xcc, 0xa9,
	0x3c, 0xaa, 0xec, 0xb6, 0xb1, 0x5a, 0xa2, 0xfb, 0x50, 0x9f, 0xfa, 0xd1, 0x84, 0x38, 0x55, 0xed,
	0x33, 0x86, 0xfb, 0x13, 0x6c, 0x0c, 0x89, 0xe4, 0x7e, 0xe8, 0xf3, 0x63, 0x9f, 0x5f, 0x13, 0x89,
	0x36, 0xa0, 0x4a, 0x43, 0x0b, 0xac, 0xd2, 0x10, 0x7d, 0x06, 0x35, 0x11, 0x4c, 0x9d, 0xea, 0xa3,
	0xda, 0x6e, 0x67, 0xf0, 0x41, 0xbf, 0xb8, 0xae, 0x6f, 0xef, 0xc2, 0x6a, 0xdf, 0xfd, 0xbd, 0x05,
	0x5b, 0xa7, 0x34, 0x49, 0xfc, 0x71, 0x44, 0x0c, 0xd3, 0xb1, 0x9f, 0xa6, 0x34, 0xb9, 0x42, 0x07,
	0xd0, 0x14, 0x29, 0x19, 0x53, 0x3f, 0xd2, 0xac, 0x9d, 0xc1, 0x5e, 0x99, 0x64, 0x29, 0xa6, 0x7f,
	0x66, 0x00, 0x47, 0x2b, 0x38, 0xc3, 0xa2, 0x21, 0x34, 0x12, 0xc6, 0x63, 0x3f, 0xd2, 0x09, 0x74,
	0x06, 0xbb, 0xef, 0x67, 0x19, 0xe9, 0xf3, 0x47, 0x2b, 0xd8, 0x22, 0x7b, 0x7f, 0xd7, 0xa0, 0x61,
	0x9c, 0xe8, 0x4b, 0xd8, 0x1c, 0xb3, 0x38, 0x25, 0x92, 0x4a, 0xca, 0x12, 0x8f, 0x93, 0x2b, 0xf2,
	0xce, 0x66, 0xdd, 0x2d, 0x6d, 0x60, 0xe5, 0x47, 0x5f, 0x01, 0x2a, 0x1f, 0xbe, 0xa4, 0x24, 0x0a,
	0x85, 0x2e, 0x49, 0x1b, 0x97, 0x69, 0x0e, 0xf5, 0x06, 0xda, 0x83, 0x9c, 0x82, 0x71, 0x4b, 0x5d,
	0xd3, 0xd4, 0xf7, 0x0a, 0xbf, 0x61, 0xfe, 0x0e, 0x7a, 0x8b, 0x47, 0xbd, 0x84, 0x49, 0x2f, 0xf6,
	0xe5, 0xf8, 0x37, 0x67, 0x55, 0x83, 0x1e, 0x2c, 0x80, 0x46, 0x4c, 0x1e, 0xab, 0xed, 0x72, 0x0e,
	0x8c, 0x67, 0x51, 0xd5, 0x75, 0x54, 0xa5, 0x00, 0x6c, 0x50, 0xaf, 0xa1, 0x19, 0xeb, 0xea, 0x08,
	0xa7, 0xa1, 0xdf, 0xf2, 0xf1, 0x5d, 0x0b, 0xd8, 0x37, 0x4e, 0x9c, 0xe1, 0x7b, 0x0c, 0x1a, 0x56,
	0x2c, 0x9f, 0xc2, 0x7a, 0x4a, 0x38, 0x65, 0xa1, 0x97, 0x4c, 0xe2, 0x80, 0x70, 0x5d, 0xc1, 0x75,
	0xbc, 0x66, 0x9c, 0x23, 0xed, 0x43, 0x0f, 0xa1, 0x63, 0x90, 0x9e, 0x9c, 0xa5, 0x99, 0xfe, 0xc0,
	0xb8, 0xce, 0x67, 0x29, 0x51, 0x07, 0x58, 0x18, 0x8a, 0x2c, 0x83, 0x9a, 0xce, 0x00, 0x94, 0xcb,
	0xc4, 0xde, 0xfb, 0xa3, 0x06, 0x4d, 0x2b, 0x09, 0xf4, 0x0b, 0xac, 0x5d, 0xd2, 0x77, 0x72, 0xc2,
	0x89, 0x77, 0x49, 0x48, 0x68, 0x35, 0xf5, 0xf4, 0xce, 0x9a, 0xea, 0x1f, 0x1a, 0xf4, 0x21, 0x21,
	0x21, 0xee, 0x5c, 0x16, 0x06, 0x3a, 0x81, 0xb6, 0x09, 0x43, 0xd1, 0x1a, 0x91, 0x0d, 0xee, 0x4e,
	0x7b, 0xa2, 0xc2, 0x55, 0x9c, 0x2d, 0x66, 0x57, 0xbd, 0x3f, 0x2b, 0xd0, 0x29, 0xdd, 0x86, 0x3e,
	0x84, 0x56, 0x90, 0x55, 0xc1, 0x48, 0xad, 0x19, 0xd8, 0x12, 0xdc, 0x2a, 0x64, 0x75, 0x49, 0x21,
	0x3f, 0x06, 0x48, 0xfc, 0x98, 0xcc, 0x29, 0xaa, 0xad, 0x3c, 0x46, 0x4b, 0x0f, 0xa1, 0xa3, 0xb7,
	0x6d, 0x19, 0x57, 0x4d, 0x19, 0x95, 0xcb, 0x4a, 0xa0, 0x07, 0xad, 0xb1, 0x2f, 0xc9, 0x15, 0xe3,
	0x33, 0xa7, 0xae, 0xd1, 0xb9, 0xdd, 0xdb, 0x87, 0x56, 0x96, 0x81, 0xba, 0x47, 0x73, 0x78, 0xd7,
	0x64, 0x26, 0x9c, 0x8a, 0xe6, 0x69, 0x6b, 0xcf, 0x1b, 0x32, 0x13, 0x68, 0x1b, 0x1a, 0x73, 0x1d,
	0x60, 0xad, 0x61, 0x03, 0x56, 0x55, 0x6a, 0xee, 0x31, 0x6c, 0xcd, 0xcf, 0x94, 0x6c, 0x12, 0x7c,
	0x53, 0x48, 0xb0, 0xa2, 0x25, 0xd8, 0x2b, 0x97, 0x77, 0x1e, 0x93, 0xab, 0xcd, 0xfd, 0x01, 0xd6,
	0xce, 0x82, 0xe9, 0x85, 0x1f, 0xd1, 0xd0, 0x97, 0x6c, 0xd9, 0x68, 0xdb, 0x81, 0xf6, 0x34, 0xdb,
	0xb6, 0xf2, 0x2a, 0x1c, 0xee, 0x8f, 0xd0, 0x3d, 0x23, 0x11, 0x19, 0xab, 0x06, 0x3d, 0x99, 0xc8,
	0x31, 0x8b, 0x09, 0x72, 0xa0, 0xc9, 0xcc, 0x32, 0x7b, 0x08, 0x6b, 0x22, 0x04, 0xab, 0xaa, 0x62,
	0x96, 0x46, 0xaf, 0xdd, 0x5f, 0x01, 0x5e, 0xb2, 0x68, 0x12, 0x27, 0x17, 0x94, 0xdc, 0xa0, 0x37,
	0x80, 0x44, 0xc6, 0xe7, 0x59, 0x58, 0x96, 0xd0, 0xce, 0xdc, 0x7c, 0x5c, 0xb8, 0x15, 0x6f, 0x8a,
	0x05, 0x8f, 0x70, 0x9f, 0x42, 0xfb, 0xdc, 0x0f, 0x22, 0xa2, 0x99, 0xb7, 0xa1, 0x31, 0xd6, 0xf7,
	0xd8, 0xa0, 0xac, 0xa5, 0x32, 0xe6, 0xec, 0xc6, 0x86, 0xa4, 0x96, 0xee, 0xbf, 0x15, 0xd8, 0x50,
	0x90, 0x57, 0xe4, 0x92, 0x26, 0x7a, 0xf4, 0x28, 0x30, 0x27, 0x49, 0x68, 0x7b, 0xb0, 0x8d, 0xad,
	0x55, 0xea, 0xbe, 0x52, 0x5e, 0xb6, 0xfb, 0x46, 0x7e, 0x4c, 0x94, 0x2a, 0xaf, 0x38, 0x9b, 0xa4,
	0x5e, 0x30, 0xb3, 0xad, 0xd7, 0xd4, 0xf6, 0x70, 0x86, 0x9e, 0x43, 0xc7, 0x84, 0xe0, 0x4d, 0x29,
	0xb9, 0xd1, 0xe3, 0xa8, 0x33, 0xd8, 0x2e, 0xe7, 0x58, 0xd4, 0xe5, 0x68, 0x05, 0xc3, 0xb8, 0xa8,
	0xd2, 0x33, 0x00, 0xa9, 0x12, 0x33, 0xc8, 0xba, 0x46, 0x6e, 0x95, 0x91, 0x79, 0xda, 0x47, 0x2b,
	0xb8, 0x2d, 0x33, 0x23, 0x17, 0xd1, 0x3f, 0x55, 0xe8, 0x1a, 0x25, 0x94, 0x72, 0x2c, 0xbe, 0x4d,
	0xeb, 0xfa, 0xdb, 0xb4, 0xe4, 0xb1, 0x94, 0xc8, 0xf3, 0x47, 0x31, 0xe9, 0xe4, 0x36, 0x7a, 0x01,
	0x1b, 0x22, 0x98, 0x7a, 0xb9, 0x36, 0x4c, 0x93, 0x74, 0x06, 0xce, 0xc2, 0x67, 0x2d, 0x17, 0x1b,
	0x5e, 0x17, 0x25, 0x4b, 0xa8, 0x97, 0x50, 0x1f, 0x43, 0x33, 0x63, 0xd5, 0x12, 0x7d, 0x0f, 0xad,
	0xd4, 0xce, 0x05, 0xa7, 0xa1, 0xb3, 0xfc, 0xe4, 0xbd, 0x33, 0x03, 0xe7, 0x10, 0x05, 0x0f, 0xac,
	0xee, 0x9d, 0xe6, 0x6d, 0xf8, 0xd2, 0x3e, 0xc2, 0x39, 0x04, 0x3d, 0x81, 0xba, 0xaa, 0xaf, 0x70,
	0x5a, 0xb7, 0xfb, 0x69, 0x5e, 0x1f, 0xd8, 0x1c, 0x74, 0x7f, 0x86, 0x7b, 0xa7, 0x9c, 0x4d, 0x69,
	0x48, 0x78, 0xd6, 0x96, 0x4f, 0xa0, 0x95, 0x5a, 0x97, 0xae, 0xed, 0xc6, 0xe0, 0xfe, 0x5c, 0x0a,
	0x76, 0x0f, 0xe7, 0xa7, 0x54, 0x19, 0x68, 0xde, 0xfe, 0x6a, 0xe9, 0xbe, 0x50, 0x03, 0x9a, 0x71,
	0x79, 0x31, 0xb8, 0xf5, 0x48, 0xb6, 0x5f, 0xab, 0x45, 0xbf, 0x66, 0xcf, 0x56, 0x2b, 0xf5, 0xd8,
	0x5f, 0x15, 0xa8, 0x6b, 0x86, 0xff, 0x87, 0x47, 0xcf, 0xa1, 0x9d, 0x85, 0x97, 0xbd, 0xea, 0x47,
	0xcb, 0xb2, 0xc8, 0x6a, 0x58, 0x9c, 0x46, 0xcf, 0x8a, 0xb1, 0x54, 0xbf, 0xdd, 0xc5, 0x8b, 0x22,
	0x2c, 0x06, 0xd3, 0xb7, 0x00, 0x3a, 0x62, 0xf1, 0x96, 0x0a, 0x89, 0xf6, 0xa0, 0x61, 0x50, 0x76,
	0x14, 0x6c, 0xce, 0x69, 0x4a, 0x2d, 0xb1, 0x3d, 0xf0, 0xc5, 0xe7, 0xd0, 0xca, 0xc2, 0x41, 0x6b,
	0xd0, 0x1a, 0x1e, 0x9c, 0xe3, 0xfd, 0x57, 0xfb, 0xb8, 0x5b, 0x51, 0xd6, 0xe9, 0xeb, 0xd1, 0x68,
	0xff, 0xe5, 0xdb, 0x83, 0x6e, 0x75, 0xb8, 0xa3, 0x7f, 0x0e, 0xfa, 0x01, 0x95, 0x57, 0x7e, 0x4c,
	0x22, 0x3f, 0x10, 0x25, 0xce, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89, 0xa7, 0x70, 0x9f, 0x13,
	0x0a, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/bet/bet.proto

/*
Package bet is a generated protocol buffer package.

It is generated from these files:
	sportsbook/bet/bet.proto

It has these top-level messages:
	BetSelection
	SystemBet
	PlayerInfo
	BetRequest
	BetResponse
*/
package bet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_INTERNAL_SERVER_ERROR      StatusCode = 0
	StatusCode_ACCEPTED                   StatusCode = 1
	StatusCode_BETTER_ODDS_ACCEPTED       StatusCode = 2
	StatusCode_INVALID_ODDS               StatusCode = 3
	StatusCode_INVALID_STAKE              StatusCode = 4
	StatusCode_MAX_STAKE_EXCEEDED         StatusCode = 5
	StatusCode_SPORTSBOOK_LOCKED          StatusCode = 6
	StatusCode_PREMATCH_BETS_LOCKED       StatusCode = 7
	StatusCode_LIVE_BETS_LOCKED           StatusCode = 8
	StatusCode_CORRELATED_SELECTION       StatusCode = 9
	StatusCode_PREMATCH_BET_ON_LIVE_EVENT StatusCode = 10
	StatusCode_PENDING_ACCEPTANCE         StatusCode = 11
	StatusCode_PARLAY_RESTRICTION         StatusCode = 12
	StatusCode_RESTRICTED                 StatusCode = 13
	StatusCode_CUMULATIVE_STAKE_EXCEEDED  StatusCode = 14
	// sports bonus related rejections
	StatusCode_CORRELATED_SELECTION_WITH_ACTIVE_BONUS StatusCode = 15
	StatusCode_MIN_PRICE_REQUIRED_WITH_ACTIVE_BONUS   StatusCode = 16
)

var StatusCode_name = map[int32]string{
	0:  "INTERNAL_SERVER_ERROR",
	1:  "ACCEPTED",
	2:  "BETTER_ODDS_ACCEPTED",
	3:  "INVALID_ODDS",
	4:  "INVALID_STAKE",
	5:  "MAX_STAKE_EXCEEDED",
	6:  "SPORTSBOOK_LOCKED",
	7:  "PREMATCH_BETS_LOCKED",
	8:  "LIVE_BETS_LOCKED",
	9:  "CORRELATED_SELECTION",
	10: "PREMATCH_BET_ON_LIVE_EVENT",
	11: "PENDING_ACCEPTANCE",
	12: "PARLAY_RESTRICTION",
	13: "RESTRICTED",
	14: "CUMULATIVE_STAKE_EXCEEDED",
	15: "CORRELATED_SELECTION_WITH_ACTIVE_BONUS",
	16: "MIN_PRICE_REQUIRED_WITH_ACTIVE_BONUS",
}
var StatusCode_value = map[string]int32{
	"INTERNAL_SERVER_ERROR":                  0,
	"ACCEPTED":                               1,
	"BETTER_ODDS_ACCEPTED":                   2,
	"INVALID_ODDS":                           3,
	"INVALID_STAKE":                          4,
	"MAX_STAKE_EXCEEDED":                     5,
	"SPORTSBOOK_LOCKED":                      6,
	"PREMATCH_BETS_LOCKED":                   7,
	"LIVE_BETS_LOCKED":                       8,
	"CORRELATED_SELECTION":                   9,
	"PREMATCH_BET_ON_LIVE_EVENT":             10,
	"PENDING_ACCEPTANCE":                     11,
	"PARLAY_RESTRICTION":                     12,
	"RESTRICTED":                             13,
	"CUMULATIVE_STAKE_EXCEEDED":              14,
	"CORRELATED_SELECTION_WITH_ACTIVE_BONUS": 15,
	"MIN_PRICE_REQUIRED_WITH_ACTIVE_BONUS":   16,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BetResultCode int32

const (
	BetResultCode_OK                  BetResultCode = 0
	BetResultCode_NOT_SIGNED_IN       BetResultCode = 1
	BetResultCode_INSUFFICIENT_FUNDS  BetResultCode = 2
	BetResultCode_TOO_MANY_SELECTIONS BetResultCode = 3
)

var BetResultCode_name = map[int32]string{
	0: "OK",
	1: "NOT_SIGNED_IN",
	2: "INSUFFICIENT_FUNDS",
	3: "TOO_MANY_SELECTIONS",
}
var BetResultCode_value = map[string]int32{
	"OK":                  0,
	"NOT_SIGNED_IN":       1,
	"INSUFFICIENT_FUNDS":  2,
	"TOO_MANY_SELECTIONS": 3,
}

func (x BetResultCode) String() string {
	return proto.EnumName(BetResultCode_name, int32(x))
}
func (BetResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BetSelection struct {
	EventType       string     `protobuf:"bytes,1,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	EventId         uint32     `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32     `protobuf:"varint,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome         string     `protobuf:"bytes,4,opt,name=outcome" json:"outcome,omitempty"`
	SpecialBetValue string     `protobuf:"bytes,5,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Timestamp       int64      `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Odds            float64    `protobuf:"fixed64,7,opt,name=odds" json:"odds,omitempty"`
	Stake           float64    `protobuf:"fixed64,8,opt,name=stake" json:"stake,omitempty"`
	StatusCode      StatusCode `protobuf:"varint,9,opt,name=status_code,json=statusCode,enum=bet.StatusCode" json:"status_code,omitempty"`
	IsLay           bool       `protobuf:"varint,10,opt,name=is_lay,json=isLay" json:"is_lay,omitempty"`
	BackersOdds     float64    `protobuf:"fixed64,11,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
	BackersStake    float64    `protobuf:"fixed64,12,opt,name=backers_stake,json=backersStake" json:"backers_stake,omitempty"`
}

func (m *BetSelection) Reset()                    { *m = BetSelection{} }
func (m *BetSelection) String() string            { return proto.CompactTextString(m) }
func (*BetSelection) ProtoMessage()               {}
func (*BetSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BetSelection) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *BetSelection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *BetSelection) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *BetSelection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *BetSelection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *BetSelection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BetSelection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *BetSelection) GetStake() float64 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (m *BetSelection) GetStatusCode() StatusCode {
	if m != nil {
		return m.StatusCode
	}
	return StatusCode_INTERNAL_SERVER_ERROR
}

func (m *BetSelection) GetIsLay() bool {
	if m != nil {
		return m.IsLay
	}
	return false
}

func (m *BetSelection) GetBackersOdds() float64 {
	if m != nil {
		return m.BackersOdds
	}
	return 0
}

func (m *BetSelection) GetBackersStake() float64 {
	if m != nil {
		return m.BackersStake
	}
	return 0
}

type SystemBet struct {
	// system
	// 0: parlay
	// 1: singles
	// 2: doubles
	// 3: trebles and so on
	System     uint32     `protobuf:"varint,1,opt,name=system" json:"system,omitempty"`
	Stake      float64    `protobuf:"fixed64,2,opt,name=stake" json:"stake,omitempty"`
	StatusCode StatusCode `protobuf:"varint,3,opt,name=status_code,json=statusCode,enum=bet.StatusCode" json:"status_code,omitempty"`
}

func (m *SystemBet) Reset()                    { *m = SystemBet{} }
func (m *SystemBet) String() string            { return proto.CompactTextString(m) }
func (*SystemBet) ProtoMessage()               {}
func (*SystemBet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SystemBet) GetSystem() uint32 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *SystemBet) GetStake() float64 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (m *SystemBet) GetStatusCode() StatusCode {
	if m != nil {
		return m.StatusCode
	}
	return StatusCode_INTERNAL_SERVER_ERROR
}

type PlayerInfo struct {
	Reference   string  `protobuf:"bytes,1,opt,name=reference" json:"reference,omitempty"`
	StakeFactor float64 `protobuf:"fixed64,2,opt,name=stake_factor,json=stakeFactor" json:"stake_factor,omitempty"`
	Locale      string  `protobuf:"bytes,3,opt,name=locale" json:"locale,omitempty"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PlayerInfo) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *PlayerInfo) GetStakeFactor() float64 {
	if m != nil {
		return m.StakeFactor
	}
	return 0
}

func (m *PlayerInfo) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

type BetRequest struct {
	Version          string          `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Selections       []*BetSelection `protobuf:"bytes,2,rep,name=selections" json:"selections,omitempty"`
	Systems          []*SystemBet    `protobuf:"bytes,3,rep,name=systems" json:"systems,omitempty"`
	AcceptBetterOdds bool            `protobuf:"varint,4,opt,name=accept_better_odds,json=acceptBetterOdds" json:"accept_better_odds,omitempty"`
	BetSlipId        string          `protobuf:"bytes,5,opt,name=bet_slip_id,json=betSlipId" json:"bet_slip_id,omitempty"`
	Currency         string          `protobuf:"bytes,6,opt,name=currency" json:"currency,omitempty"`
	Player           *PlayerInfo     `protobuf:"bytes,7,opt,name=player" json:"player,omitempty"`
	PlacedAt         int64           `protobuf:"varint,8,opt,name=placed_at,json=placedAt" json:"placed_at,omitempty"`
}

func (m *BetRequest) Reset()                    { *m = BetRequest{} }
func (m *BetRequest) String() string            { return proto.CompactTextString(m) }
func (*BetRequest) ProtoMessage()               {}
func (*BetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BetRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BetRequest) GetSelections() []*BetSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *BetRequest) GetSystems() []*SystemBet {
	if m != nil {
		return m.Systems
	}
	return nil
}

func (m *BetRequest) GetAcceptBetterOdds() bool {
	if m != nil {
		return m.AcceptBetterOdds
	}
	return false
}

func (m *BetRequest) GetBetSlipId() string {
	if m != nil {
		return m.BetSlipId
	}
	return ""
}

func (m *BetRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *BetRequest) GetPlayer() *PlayerInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *BetRequest) GetPlacedAt() int64 {
	if m != nil {
		return m.PlacedAt
	}
	return 0
}

type BetResponse struct {
	Result     BetResultCode   `protobuf:"varint,1,opt,name=result,enum=bet.BetResultCode" json:"result,omitempty"`
	Selections []*BetSelection `protobuf:"bytes,2,rep,name=selections" json:"selections,omitempty"`
	Systems    []*SystemBet    `protobuf:"bytes,3,rep,name=systems" json:"systems,omitempty"`
	// only used by frontend
	BetSlipId string `protobuf:"bytes,4,opt,name=bet_slip_id,json=betSlipId" json:"bet_slip_id,omitempty"`
}

func (m *BetResponse) Reset()                    { *m = BetResponse{} }
func (m *BetResponse) String() string            { return proto.CompactTextString(m) }
func (*BetResponse) ProtoMessage()               {}
func (*BetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BetResponse) GetResult() BetResultCode {
	if m != nil {
		return m.Result
	}
	return BetResultCode_OK
}

func (m *BetResponse) GetSelections() []*BetSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *BetResponse) GetSystems() []*SystemBet {
	if m != nil {
		return m.Systems
	}
	return nil
}

func (m *BetResponse) GetBetSlipId() string {
	if m != nil {
		return m.BetSlipId
	}
	return ""
}

func init() {
	proto.RegisterType((*BetSelection)(nil), "bet.BetSelection")
	proto.RegisterType((*SystemBet)(nil), "bet.SystemBet")
	proto.RegisterType((*PlayerInfo)(nil), "bet.PlayerInfo")
	proto.RegisterType((*BetRequest)(nil), "bet.BetRequest")
	proto.RegisterType((*BetResponse)(nil), "bet.BetResponse")
	proto.RegisterEnum("bet.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("bet.BetResultCode", BetResultCode_name, BetResultCode_value)
}

func init() { proto.RegisterFile("sportsbook/bet/bet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xd1, 0x6e, 0xe3, 0x44,
	0x14, 0x5d, 0xc7, 0x6d, 0x9a, 0xdc, 0x24, 0xad, 0x3b, 0xb4, 0x8b, 0xbb, 0xb0, 0x55, 0x28, 0x08,
	0xa2, 0x0a, 0x15, 0x28, 0x5f, 0xe0, 0xd8, 0xd3, 0xdd, 0x51, 0x53, 0x3b, 0x8c, 0x9d, 0xb2, 0x2b,
	0x1e, 0x46, 0x8e, 0x33, 0x45, 0x56, 0x9d, 0xd8, 0x78, 0x26, 0x95, 0xf2, 0xce, 0x1f, 0x21, 0xf1,
	0x01, 0x7c, 0x19, 0x9a, 0xb1, 0xdd, 0x74, 0xab, 0x15, 0x3c, 0xed, 0x83, 0x25, 0xdf, 0x73, 0xee,
	0xcc, 0xbd, 0xf7, 0xdc, 0x63, 0x19, 0x6c, 0x51, 0xe4, 0xa5, 0x14, 0xf3, 0x3c, 0xbf, 0xff, 0x61,
	0xce, 0xa5, 0x7a, 0x2e, 0x8a, 0x32, 0x97, 0x39, 0x32, 0xe7, 0x5c, 0x9e, 0xfd, 0x69, 0x42, 0x7f,
	0xcc, 0x65, 0xc8, 0x33, 0x9e, 0xc8, 0x34, 0x5f, 0xa1, 0xd7, 0x00, 0xfc, 0x81, 0xaf, 0x24, 0x93,
	0x9b, 0x82, 0xdb, 0xc6, 0xd0, 0x18, 0x75, 0x69, 0x57, 0x23, 0xd1, 0xa6, 0xe0, 0xe8, 0x04, 0x3a,
	0x15, 0x9d, 0x2e, 0xec, 0xd6, 0xd0, 0x18, 0x0d, 0xe8, 0x9e, 0x8e, 0xc9, 0x02, 0x7d, 0x01, 0xdd,
	0x65, 0x5c, 0xde, 0x73, 0xcd, 0x99, 0x9a, 0xeb, 0x54, 0x00, 0x59, 0x20, 0x1b, 0xf6, 0xf2, 0xb5,
	0x4c, 0xf2, 0x25, 0xb7, 0x77, 0xf4, 0x9d, 0x4d, 0x88, 0xce, 0xe1, 0x50, 0x14, 0x3c, 0x49, 0xe3,
	0x8c, 0xcd, 0xb9, 0x64, 0x0f, 0x71, 0xb6, 0xe6, 0xf6, 0xae, 0xce, 0x39, 0xa8, 0x89, 0x31, 0x97,
	0xb7, 0x0a, 0x46, 0x5f, 0x42, 0x57, 0xa6, 0x4b, 0x2e, 0x64, 0xbc, 0x2c, 0xec, 0xf6, 0xd0, 0x18,
	0x99, 0x74, 0x0b, 0x20, 0x04, 0x3b, 0xf9, 0x62, 0x21, 0xec, 0xbd, 0xa1, 0x31, 0x32, 0xa8, 0x7e,
	0x47, 0x47, 0xb0, 0x2b, 0x64, 0x7c, 0xcf, 0xed, 0x8e, 0x06, 0xab, 0x00, 0xfd, 0x08, 0x3d, 0x21,
	0x63, 0xb9, 0x16, 0x2c, 0xc9, 0x17, 0xdc, 0xee, 0x0e, 0x8d, 0xd1, 0xfe, 0xe5, 0xc1, 0x85, 0xd2,
	0x26, 0xd4, 0xb8, 0x9b, 0x2f, 0x38, 0x05, 0xf1, 0xf8, 0x8e, 0x8e, 0xa1, 0x9d, 0x0a, 0x96, 0xc5,
	0x1b, 0x1b, 0x86, 0xc6, 0xa8, 0x43, 0x77, 0x53, 0x31, 0x89, 0x37, 0xe8, 0x2b, 0xe8, 0xcf, 0xe3,
	0xe4, 0x9e, 0x97, 0x82, 0xe9, 0xd2, 0x3d, 0x5d, 0xa5, 0x57, 0x63, 0x81, 0xea, 0xe0, 0x6b, 0x18,
	0x34, 0x29, 0x55, 0x27, 0x7d, 0x9d, 0xd3, 0x9c, 0x0b, 0x15, 0x76, 0x76, 0x0f, 0xdd, 0x70, 0x23,
	0x24, 0x5f, 0x8e, 0xb9, 0x44, 0x2f, 0xa1, 0x2d, 0x74, 0xa0, 0xe5, 0x1f, 0xd0, 0x3a, 0xda, 0xce,
	0xd2, 0xfa, 0x8f, 0x59, 0xcc, 0xff, 0x9d, 0xe5, 0x8c, 0x03, 0x4c, 0xb3, 0x78, 0xc3, 0x4b, 0xb2,
	0xba, 0xcb, 0x95, 0xa6, 0x25, 0xbf, 0xe3, 0x25, 0x5f, 0x25, 0x8f, 0xfb, 0x7e, 0x04, 0xd4, 0x80,
	0xba, 0x0c, 0xbb, 0x8b, 0x13, 0x99, 0x97, 0x75, 0xe9, 0x9e, 0xc6, 0xae, 0x34, 0xa4, 0xda, 0xcd,
	0xf2, 0x24, 0xce, 0xaa, 0xda, 0x5d, 0x5a, 0x47, 0x67, 0x7f, 0xb5, 0x00, 0xc6, 0x5c, 0x52, 0xfe,
	0xc7, 0x9a, 0x0b, 0xa9, 0x1c, 0xf0, 0xc0, 0x4b, 0x91, 0xe6, 0xab, 0xba, 0x4a, 0x13, 0xa2, 0x9f,
	0x00, 0x44, 0xe3, 0x3f, 0x61, 0xb7, 0x86, 0xe6, 0xa8, 0x77, 0x79, 0xa8, 0x07, 0x78, 0xea, 0x4c,
	0xfa, 0x24, 0x09, 0x8d, 0x60, 0xaf, 0x12, 0x45, 0xd8, 0xa6, 0xce, 0xdf, 0xaf, 0x06, 0x6e, 0x34,
	0xa4, 0x0d, 0x8d, 0xbe, 0x07, 0x14, 0x27, 0x09, 0x2f, 0xa4, 0x72, 0x97, 0xe4, 0x65, 0xb5, 0xa7,
	0x1d, 0xbd, 0x44, 0xab, 0x62, 0xc6, 0x9a, 0xd0, 0xcb, 0x3a, 0x85, 0x9e, 0x32, 0xa1, 0xc8, 0xd2,
	0x42, 0xb9, 0xb8, 0xb2, 0x61, 0x77, 0xce, 0x65, 0x98, 0xa5, 0x05, 0x59, 0xa0, 0x57, 0xd0, 0x49,
	0xd6, 0xa5, 0x92, 0x66, 0xa3, 0xfd, 0xd7, 0xa5, 0x8f, 0x31, 0xfa, 0x0e, 0xda, 0x85, 0x96, 0x55,
	0x1b, 0xb0, 0x57, 0xef, 0x60, 0xab, 0x34, 0xad, 0x69, 0xf5, 0xa1, 0x14, 0x59, 0x9c, 0xf0, 0x05,
	0x8b, 0xa5, 0xf6, 0xa5, 0x49, 0x3b, 0x15, 0xe0, 0xc8, 0xb3, 0xbf, 0x0d, 0xe8, 0x69, 0xd5, 0x44,
	0x91, 0xaf, 0x84, 0xfa, 0x3c, 0xda, 0x25, 0x17, 0xeb, 0x4c, 0x6a, 0xd5, 0xf6, 0x2f, 0x51, 0x23,
	0x0c, 0xd5, 0xa8, 0x5e, 0x6e, 0x9d, 0xf1, 0x69, 0x85, 0x7c, 0x26, 0xcd, 0xce, 0x33, 0x69, 0xce,
	0xff, 0x31, 0x01, 0xb6, 0x86, 0x43, 0x27, 0x70, 0x4c, 0xfc, 0x08, 0x53, 0xdf, 0x99, 0xb0, 0x10,
	0xd3, 0x5b, 0x4c, 0x19, 0xa6, 0x34, 0xa0, 0xd6, 0x0b, 0xd4, 0x87, 0x8e, 0xe3, 0xba, 0x78, 0x1a,
	0x61, 0xcf, 0x32, 0x90, 0x0d, 0x47, 0x63, 0x1c, 0x45, 0x98, 0xb2, 0xc0, 0xf3, 0x42, 0xf6, 0xc8,
	0xb4, 0x90, 0x05, 0x7d, 0xe2, 0xdf, 0x3a, 0x13, 0xe2, 0x69, 0xca, 0x32, 0xd1, 0x21, 0x0c, 0x1a,
	0x24, 0x8c, 0x9c, 0x6b, 0x6c, 0xed, 0xa0, 0x97, 0x80, 0x6e, 0x9c, 0x77, 0x55, 0xc8, 0xf0, 0x3b,
	0x17, 0x63, 0x0f, 0x7b, 0xd6, 0x2e, 0x3a, 0x86, 0xc3, 0x70, 0x1a, 0xd0, 0x28, 0x1c, 0x07, 0xc1,
	0x35, 0x9b, 0x04, 0xee, 0x35, 0xf6, 0xac, 0xb6, 0xaa, 0x36, 0xa5, 0xf8, 0xc6, 0x89, 0xdc, 0xb7,
	0x6c, 0x8c, 0xa3, 0xb0, 0x61, 0xf6, 0xd0, 0x11, 0x58, 0x13, 0x72, 0x8b, 0x3f, 0x40, 0x3b, 0x2a,
	0xdf, 0x0d, 0x28, 0xc5, 0x13, 0x27, 0xc2, 0x1e, 0x0b, 0xf1, 0x04, 0xbb, 0x11, 0x09, 0x7c, 0xab,
	0x8b, 0x4e, 0xe1, 0xd5, 0xd3, 0x9b, 0x58, 0xe0, 0x33, 0x7d, 0x1e, 0xdf, 0x62, 0x3f, 0xb2, 0x40,
	0x35, 0x36, 0xc5, 0xbe, 0x47, 0xfc, 0x37, 0xf5, 0x4c, 0x8e, 0xef, 0x62, 0xab, 0xa7, 0x71, 0x87,
	0x4e, 0x9c, 0xf7, 0x8c, 0xe2, 0x30, 0xa2, 0xa4, 0xba, 0xaf, 0x8f, 0xf6, 0x01, 0x1a, 0x00, 0x7b,
	0xd6, 0x00, 0xbd, 0x86, 0x13, 0x77, 0x76, 0x33, 0x9b, 0x38, 0x91, 0xba, 0xf5, 0xd9, 0x7c, 0xfb,
	0xe8, 0x1c, 0xbe, 0xfd, 0x58, 0x63, 0xec, 0x57, 0x12, 0xbd, 0x65, 0x8e, 0xab, 0x0f, 0x8d, 0x03,
	0x7f, 0x16, 0x5a, 0x07, 0x68, 0x04, 0xdf, 0xdc, 0x10, 0x9f, 0x4d, 0x29, 0x71, 0x31, 0xa3, 0xf8,
	0x97, 0x19, 0xa1, 0xd8, 0xfb, 0x48, 0xa6, 0x75, 0xfe, 0x1b, 0x0c, 0x3e, 0xb0, 0x16, 0x6a, 0x43,
	0x2b, 0xb8, 0xb6, 0x5e, 0x28, 0xe5, 0xfd, 0x20, 0x62, 0x21, 0x79, 0xe3, 0x63, 0x8f, 0x11, 0xdf,
	0x32, 0xd4, 0x20, 0xc4, 0x0f, 0x67, 0x57, 0x57, 0xc4, 0x25, 0xd8, 0x8f, 0xd8, 0xd5, 0xcc, 0xf7,
	0x42, 0xab, 0x85, 0x3e, 0x87, 0xcf, 0xa2, 0x20, 0x60, 0x37, 0x8e, 0xff, 0x7e, 0xdb, 0x57, 0x68,
	0x99, 0xe3, 0x21, 0x9c, 0x26, 0xf9, 0xf2, 0x62, 0x9e, 0xca, 0xdf, 0xe3, 0x25, 0xcf, 0xe2, 0xb9,
	0xb8, 0xd8, 0xfe, 0x9c, 0x94, 0xed, 0xe6, 0x6d, 0xfd, 0x67, 0xfa, 0xf9, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0xcb, 0x96, 0x10, 0xb5, 0x06, 0x00, 0x00,
}

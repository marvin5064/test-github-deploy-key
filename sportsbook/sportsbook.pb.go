// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/sportsbook.proto

package sportsbook

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CricketCompetitionType int32

const (
	CricketCompetitionType_NONE CricketCompetitionType = 0
	CricketCompetitionType_T20  CricketCompetitionType = 1
	CricketCompetitionType_ODI  CricketCompetitionType = 2
)

var CricketCompetitionType_name = map[int32]string{
	0: "NONE",
	1: "T20",
	2: "ODI",
}
var CricketCompetitionType_value = map[string]int32{
	"NONE": 0,
	"T20":  1,
	"ODI":  2,
}

func (x CricketCompetitionType) Enum() *CricketCompetitionType {
	p := new(CricketCompetitionType)
	*p = x
	return p
}
func (x CricketCompetitionType) String() string {
	return proto.EnumName(CricketCompetitionType_name, int32(x))
}
func (x *CricketCompetitionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CricketCompetitionType_value, data, "CricketCompetitionType")
	if err != nil {
		return err
	}
	*x = CricketCompetitionType(value)
	return nil
}
func (CricketCompetitionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type Provider_Name int32

const (
	Provider_Name_BETRADAR_NAME Provider_Name = 0
	Provider_Name_PINNACLE_NAME Provider_Name = 1
	Provider_Name_IOSPORT_NAME  Provider_Name = 2
)

var Provider_Name_name = map[int32]string{
	0: "BETRADAR_NAME",
	1: "PINNACLE_NAME",
	2: "IOSPORT_NAME",
}
var Provider_Name_value = map[string]int32{
	"BETRADAR_NAME": 0,
	"PINNACLE_NAME": 1,
	"IOSPORT_NAME":  2,
}

func (x Provider_Name) Enum() *Provider_Name {
	p := new(Provider_Name)
	*p = x
	return p
}
func (x Provider_Name) String() string {
	return proto.EnumName(Provider_Name_name, int32(x))
}
func (x *Provider_Name) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Provider_Name_value, data, "Provider_Name")
	if err != nil {
		return err
	}
	*x = Provider_Name(value)
	return nil
}
func (Provider_Name) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type Source int32

const (
	Source_LIVE     Source = 0
	Source_PREMATCH Source = 1
)

var Source_name = map[int32]string{
	0: "LIVE",
	1: "PREMATCH",
}
var Source_value = map[string]int32{
	"LIVE":     0,
	"PREMATCH": 1,
}

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}
func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}
func (x *Source) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Source_value, data, "Source")
	if err != nil {
		return err
	}
	*x = Source(value)
	return nil
}
func (Source) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type EventStatus int32

const (
	EventStatus_PRE_TRADING      EventStatus = 0
	EventStatus_TRADING          EventStatus = 1
	EventStatus_TRADING_LIVE     EventStatus = 2
	EventStatus_RESULTED         EventStatus = 3
	EventStatus_INTERRUPTED      EventStatus = 4
	EventStatus_AWAITING_RESULTS EventStatus = 5
	EventStatus_POST_TRADING     EventStatus = 6
	EventStatus_EVENT_CANCELLED  EventStatus = 7
)

var EventStatus_name = map[int32]string{
	0: "PRE_TRADING",
	1: "TRADING",
	2: "TRADING_LIVE",
	3: "RESULTED",
	4: "INTERRUPTED",
	5: "AWAITING_RESULTS",
	6: "POST_TRADING",
	7: "EVENT_CANCELLED",
}
var EventStatus_value = map[string]int32{
	"PRE_TRADING":      0,
	"TRADING":          1,
	"TRADING_LIVE":     2,
	"RESULTED":         3,
	"INTERRUPTED":      4,
	"AWAITING_RESULTS": 5,
	"POST_TRADING":     6,
	"EVENT_CANCELLED":  7,
}

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}
func (x EventStatus) String() string {
	return proto.EnumName(EventStatus_name, int32(x))
}
func (x *EventStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventStatus_value, data, "EventStatus")
	if err != nil {
		return err
	}
	*x = EventStatus(value)
	return nil
}
func (EventStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

type SelectionStatus int32

const (
	SelectionStatus_DISABLED SelectionStatus = 0
	SelectionStatus_ENABLED  SelectionStatus = 1
	// provider unreachable or selection unavailable for a short period only
	SelectionStatus_TEMPORARY_DISABLED SelectionStatus = 2
	// internal state to indicate if a betradar selection was replaced with pinnacle
	SelectionStatus_REPLACED SelectionStatus = 3
	SelectionStatus_RUNNING  SelectionStatus = 4
)

var SelectionStatus_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
	2: "TEMPORARY_DISABLED",
	3: "REPLACED",
	4: "RUNNING",
}
var SelectionStatus_value = map[string]int32{
	"DISABLED":           0,
	"ENABLED":            1,
	"TEMPORARY_DISABLED": 2,
	"REPLACED":           3,
	"RUNNING":            4,
}

func (x SelectionStatus) Enum() *SelectionStatus {
	p := new(SelectionStatus)
	*p = x
	return p
}
func (x SelectionStatus) String() string {
	return proto.EnumName(SelectionStatus_name, int32(x))
}
func (x *SelectionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SelectionStatus_value, data, "SelectionStatus")
	if err != nil {
		return err
	}
	*x = SelectionStatus(value)
	return nil
}
func (SelectionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

// NOTE:
// groups example for tennis: "Set 1|Set 2|..."
type MarketTag int32

const (
	MarketTag_NO_TAGS                       MarketTag = 0
	MarketTag_WITHOUT_ALTERNATIVE_LINES     MarketTag = 1
	MarketTag_UNCOLLAPSED                   MarketTag = 2
	MarketTag_ON_ASIAN_PAGE                 MarketTag = 4
	MarketTag_ON_COMPETITION_PAGE           MarketTag = 8
	MarketTag_ON_LIVE_WIDGET                MarketTag = 16
	MarketTag_ON_POPULAR_EVENT_WIDGET       MarketTag = 32
	MarketTag_ON_POPULAR_COMPETITION_WIDGET MarketTag = 64
	MarketTag_LINE_FIXED_AT_1_5             MarketTag = 128
	MarketTag_GAME_LINES                    MarketTag = 256
)

var MarketTag_name = map[int32]string{
	0:   "NO_TAGS",
	1:   "WITHOUT_ALTERNATIVE_LINES",
	2:   "UNCOLLAPSED",
	4:   "ON_ASIAN_PAGE",
	8:   "ON_COMPETITION_PAGE",
	16:  "ON_LIVE_WIDGET",
	32:  "ON_POPULAR_EVENT_WIDGET",
	64:  "ON_POPULAR_COMPETITION_WIDGET",
	128: "LINE_FIXED_AT_1_5",
	256: "GAME_LINES",
}
var MarketTag_value = map[string]int32{
	"NO_TAGS":                       0,
	"WITHOUT_ALTERNATIVE_LINES":     1,
	"UNCOLLAPSED":                   2,
	"ON_ASIAN_PAGE":                 4,
	"ON_COMPETITION_PAGE":           8,
	"ON_LIVE_WIDGET":                16,
	"ON_POPULAR_EVENT_WIDGET":       32,
	"ON_POPULAR_COMPETITION_WIDGET": 64,
	"LINE_FIXED_AT_1_5":             128,
	"GAME_LINES":                    256,
}

func (x MarketTag) Enum() *MarketTag {
	p := new(MarketTag)
	*p = x
	return p
}
func (x MarketTag) String() string {
	return proto.EnumName(MarketTag_name, int32(x))
}
func (x *MarketTag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MarketTag_value, data, "MarketTag")
	if err != nil {
		return err
	}
	*x = MarketTag(value)
	return nil
}
func (MarketTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

type AvailabilityFlags int32

const (
	AvailabilityFlags_UNAVAILABLE         AvailabilityFlags = 0
	AvailabilityFlags_LIVE_AVAILABLE      AvailabilityFlags = 1
	AvailabilityFlags_STREAMING_AVAILABLE AvailabilityFlags = 2
	AvailabilityFlags_SPECIALS_AVAILABLE  AvailabilityFlags = 4
)

var AvailabilityFlags_name = map[int32]string{
	0: "UNAVAILABLE",
	1: "LIVE_AVAILABLE",
	2: "STREAMING_AVAILABLE",
	4: "SPECIALS_AVAILABLE",
}
var AvailabilityFlags_value = map[string]int32{
	"UNAVAILABLE":         0,
	"LIVE_AVAILABLE":      1,
	"STREAMING_AVAILABLE": 2,
	"SPECIALS_AVAILABLE":  4,
}

func (x AvailabilityFlags) Enum() *AvailabilityFlags {
	p := new(AvailabilityFlags)
	*p = x
	return p
}
func (x AvailabilityFlags) String() string {
	return proto.EnumName(AvailabilityFlags_name, int32(x))
}
func (x *AvailabilityFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AvailabilityFlags_value, data, "AvailabilityFlags")
	if err != nil {
		return err
	}
	*x = AvailabilityFlags(value)
	return nil
}
func (AvailabilityFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

type EntityTag int32

const (
	EntityTag_NO_TAG EntityTag = 0
	EntityTag_WOMEN  EntityTag = 3
	// specific for cricket
	EntityTag_CRICKET_T20 EntityTag = 1
	EntityTag_CRICKET_ODI EntityTag = 2
	// specific for Tennis
	EntityTag_DOUBLE EntityTag = 4
	EntityTag_MIXED  EntityTag = 5
	// still can keep it. in case we want all junior info
	EntityTag_JUNIOR EntityTag = 14
	// replace Junior
	EntityTag_U16 EntityTag = 6
	EntityTag_U17 EntityTag = 7
	EntityTag_U18 EntityTag = 8
	EntityTag_U19 EntityTag = 9
	EntityTag_U20 EntityTag = 10
	EntityTag_U21 EntityTag = 11
	EntityTag_U22 EntityTag = 12
	EntityTag_U23 EntityTag = 13
)

var EntityTag_name = map[int32]string{
	0:  "NO_TAG",
	3:  "WOMEN",
	1:  "CRICKET_T20",
	2:  "CRICKET_ODI",
	4:  "DOUBLE",
	5:  "MIXED",
	14: "JUNIOR",
	6:  "U16",
	7:  "U17",
	8:  "U18",
	9:  "U19",
	10: "U20",
	11: "U21",
	12: "U22",
	13: "U23",
}
var EntityTag_value = map[string]int32{
	"NO_TAG":      0,
	"WOMEN":       3,
	"CRICKET_T20": 1,
	"CRICKET_ODI": 2,
	"DOUBLE":      4,
	"MIXED":       5,
	"JUNIOR":      14,
	"U16":         6,
	"U17":         7,
	"U18":         8,
	"U19":         9,
	"U20":         10,
	"U21":         11,
	"U22":         12,
	"U23":         13,
}

func (x EntityTag) Enum() *EntityTag {
	p := new(EntityTag)
	*p = x
	return p
}
func (x EntityTag) String() string {
	return proto.EnumName(EntityTag_name, int32(x))
}
func (x *EntityTag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntityTag_value, data, "EntityTag")
	if err != nil {
		return err
	}
	*x = EntityTag(value)
	return nil
}
func (EntityTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

// used for groups, and more?
type Generic struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type             *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Key              *string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Generic) Reset()                    { *m = Generic{} }
func (m *Generic) String() string            { return proto.CompactTextString(m) }
func (*Generic) ProtoMessage()               {}
func (*Generic) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Generic) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Generic) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Generic) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Generic) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type Competition struct {
	Id     *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   *string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    *string    `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	Groups []*Generic `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	// only used in api lists
	Sport *Generic `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	// replace score
	// will be strip off under pusher update and api
	Priority *uint32     `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
	Grade    *uint32     `protobuf:"varint,6,opt,name=grade" json:"grade,omitempty"`
	Tags     []EntityTag `protobuf:"varint,11,rep,name=tags,enum=sportsbook.EntityTag" json:"tags,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Competition_CricketCompetitionType
	Type isCompetition_Type `protobuf_oneof:"type"`
	// deprecated below
	Score            *uint32 `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Competition) Reset()                    { *m = Competition{} }
func (m *Competition) String() string            { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()               {}
func (*Competition) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

type isCompetition_Type interface{ isCompetition_Type() }

type Competition_CricketCompetitionType struct {
	CricketCompetitionType CricketCompetitionType `protobuf:"varint,10,opt,name=cricket_competition_type,json=cricketCompetitionType,enum=sportsbook.CricketCompetitionType,oneof"`
}

func (*Competition_CricketCompetitionType) isCompetition_Type() {}

func (m *Competition) GetType() isCompetition_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Competition) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Competition) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Competition) GetGroups() []*Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Competition) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Competition) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *Competition) GetGrade() uint32 {
	if m != nil && m.Grade != nil {
		return *m.Grade
	}
	return 0
}

func (m *Competition) GetTags() []EntityTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Competition) GetCricketCompetitionType() CricketCompetitionType {
	if x, ok := m.GetType().(*Competition_CricketCompetitionType); ok {
		return x.CricketCompetitionType
	}
	return CricketCompetitionType_NONE
}

func (m *Competition) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Competition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Competition_OneofMarshaler, _Competition_OneofUnmarshaler, _Competition_OneofSizer, []interface{}{
		(*Competition_CricketCompetitionType)(nil),
	}
}

func _Competition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Competition)
	// type
	switch x := m.Type.(type) {
	case *Competition_CricketCompetitionType:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.CricketCompetitionType))
	case nil:
	default:
		return fmt.Errorf("Competition.Type has unexpected type %T", x)
	}
	return nil
}

func _Competition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Competition)
	switch tag {
	case 10: // type.cricket_competition_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &Competition_CricketCompetitionType{CricketCompetitionType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Competition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Competition)
	// type
	switch x := m.Type.(type) {
	case *Competition_CricketCompetitionType:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CricketCompetitionType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Competitor struct {
	Id               *uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key              *string       `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Type             *uint32       `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Players          []*Competitor `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Competitor) Reset()                    { *m = Competitor{} }
func (m *Competitor) String() string            { return proto.CompactTextString(m) }
func (*Competitor) ProtoMessage()               {}
func (*Competitor) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Competitor) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Competitor) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Competitor) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Competitor) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Competitor) GetPlayers() []*Competitor {
	if m != nil {
		return m.Players
	}
	return nil
}

type Event struct {
	Timestamp     *int64          `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id            *uint32         `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name          *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StartsAt      *int64          `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	Sport         *Generic        `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	Competition   *Competition    `protobuf:"bytes,6,opt,name=competition" json:"competition,omitempty"`
	Competitors   []*Competitor   `protobuf:"bytes,7,rep,name=competitors" json:"competitors,omitempty"`
	OpenMarkets   *uint32         `protobuf:"varint,8,opt,name=open_markets,json=openMarkets" json:"open_markets,omitempty"`
	Markets       []*Market       `protobuf:"bytes,9,rep,name=markets" json:"markets,omitempty"`
	Status        *EventStatus    `protobuf:"varint,10,opt,name=status,enum=sportsbook.EventStatus" json:"status,omitempty"`
	Metadata      *EventMetadata  `protobuf:"bytes,11,opt,name=metadata" json:"metadata,omitempty"`
	ProvidersData []*ProviderData `protobuf:"bytes,21,rep,name=providers_data,json=providersData" json:"providers_data,omitempty"`
	// measure internal delay, don't expose
	InternalTimestamp *int64  `protobuf:"varint,13,opt,name=internal_timestamp,json=internalTimestamp" json:"internal_timestamp,omitempty"`
	Score             *uint32 `protobuf:"varint,14,opt,name=score" json:"score,omitempty"`
	// just strings of the surnames for now
	// we don't have any more info in the feed
	HomePitcher       *string     `protobuf:"bytes,15,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
	AwayPitcher       *string     `protobuf:"bytes,16,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	ParlayRestriction *uint32     `protobuf:"varint,18,opt,name=parlay_restriction,json=parlayRestriction" json:"parlay_restriction,omitempty"`
	Media             *EventMedia `protobuf:"bytes,23,opt,name=media" json:"media,omitempty"`
	Availability      *uint32     `protobuf:"varint,24,opt,name=availability" json:"availability,omitempty"`
	Blank             *bool       `protobuf:"varint,26,opt,name=blank" json:"blank,omitempty"`
	// deprecate provider_id
	ProviderId *string `protobuf:"bytes,12,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// deprecate live_available, please refer availability
	LiveAvailable *bool `protobuf:"varint,17,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
	// deprecate image, please refer media
	Image            *string `protobuf:"bytes,19,opt,name=image" json:"image,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Event) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Event) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Event) GetStartsAt() int64 {
	if m != nil && m.StartsAt != nil {
		return *m.StartsAt
	}
	return 0
}

func (m *Event) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Event) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Event) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *Event) GetOpenMarkets() uint32 {
	if m != nil && m.OpenMarkets != nil {
		return *m.OpenMarkets
	}
	return 0
}

func (m *Event) GetMarkets() []*Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *Event) GetStatus() EventStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EventStatus_PRE_TRADING
}

func (m *Event) GetMetadata() *EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetProvidersData() []*ProviderData {
	if m != nil {
		return m.ProvidersData
	}
	return nil
}

func (m *Event) GetInternalTimestamp() int64 {
	if m != nil && m.InternalTimestamp != nil {
		return *m.InternalTimestamp
	}
	return 0
}

func (m *Event) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *Event) GetHomePitcher() string {
	if m != nil && m.HomePitcher != nil {
		return *m.HomePitcher
	}
	return ""
}

func (m *Event) GetAwayPitcher() string {
	if m != nil && m.AwayPitcher != nil {
		return *m.AwayPitcher
	}
	return ""
}

func (m *Event) GetParlayRestriction() uint32 {
	if m != nil && m.ParlayRestriction != nil {
		return *m.ParlayRestriction
	}
	return 0
}

func (m *Event) GetMedia() *EventMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Event) GetAvailability() uint32 {
	if m != nil && m.Availability != nil {
		return *m.Availability
	}
	return 0
}

func (m *Event) GetBlank() bool {
	if m != nil && m.Blank != nil {
		return *m.Blank
	}
	return false
}

func (m *Event) GetProviderId() string {
	if m != nil && m.ProviderId != nil {
		return *m.ProviderId
	}
	return ""
}

func (m *Event) GetLiveAvailable() bool {
	if m != nil && m.LiveAvailable != nil {
		return *m.LiveAvailable
	}
	return false
}

func (m *Event) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

type ProviderData struct {
	Keys     []string       `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Provider *Provider_Name `protobuf:"varint,6,opt,name=provider,enum=sportsbook.Provider_Name" json:"provider,omitempty"`
	Source   *Source        `protobuf:"varint,7,opt,name=source,enum=sportsbook.Source" json:"source,omitempty"`
	// Deprecate below
	Id               *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	UniqId           *string `protobuf:"bytes,5,opt,name=uniq_id,json=uniqId" json:"uniq_id,omitempty"`
	SportId          *uint32 `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProviderData) Reset()                    { *m = ProviderData{} }
func (m *ProviderData) String() string            { return proto.CompactTextString(m) }
func (*ProviderData) ProtoMessage()               {}
func (*ProviderData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *ProviderData) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *ProviderData) GetProvider() Provider_Name {
	if m != nil && m.Provider != nil {
		return *m.Provider
	}
	return Provider_Name_BETRADAR_NAME
}

func (m *ProviderData) GetSource() Source {
	if m != nil && m.Source != nil {
		return *m.Source
	}
	return Source_LIVE
}

func (m *ProviderData) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ProviderData) GetUniqId() string {
	if m != nil && m.UniqId != nil {
		return *m.UniqId
	}
	return ""
}

func (m *ProviderData) GetSportId() uint32 {
	if m != nil && m.SportId != nil {
		return *m.SportId
	}
	return 0
}

func (m *ProviderData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type EventStatusChange struct {
	Timestamp        *int64                     `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id               *uint32                    `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	SelectionStatus  *SelectionStatus           `protobuf:"varint,3,opt,name=selection_status,json=selectionStatus,enum=sportsbook.SelectionStatus" json:"selection_status,omitempty"`
	ProviderKey      *string                    `protobuf:"bytes,4,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	Reason           *string                    `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	ReasonId         *uint32                    `protobuf:"varint,6,opt,name=reason_id,json=reasonId" json:"reason_id,omitempty"`
	MarketStatus     map[uint32]SelectionStatus `protobuf:"bytes,7,rep,name=market_status,json=marketStatus" json:"market_status,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=sportsbook.SelectionStatus"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *EventStatusChange) Reset()                    { *m = EventStatusChange{} }
func (m *EventStatusChange) String() string            { return proto.CompactTextString(m) }
func (*EventStatusChange) ProtoMessage()               {}
func (*EventStatusChange) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *EventStatusChange) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *EventStatusChange) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *EventStatusChange) GetSelectionStatus() SelectionStatus {
	if m != nil && m.SelectionStatus != nil {
		return *m.SelectionStatus
	}
	return SelectionStatus_DISABLED
}

func (m *EventStatusChange) GetProviderKey() string {
	if m != nil && m.ProviderKey != nil {
		return *m.ProviderKey
	}
	return ""
}

func (m *EventStatusChange) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *EventStatusChange) GetReasonId() uint32 {
	if m != nil && m.ReasonId != nil {
		return *m.ReasonId
	}
	return 0
}

func (m *EventStatusChange) GetMarketStatus() map[uint32]SelectionStatus {
	if m != nil {
		return m.MarketStatus
	}
	return nil
}

// generic API lists
type EventList struct {
	Timestamp *int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Events    []*Event `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	// DEPRECATED: dont use the two below
	Outrights        []*Outright `protobuf:"bytes,3,rep,name=outrights" json:"outrights,omitempty"`
	CompetitorImages []*IdMap    `protobuf:"bytes,4,rep,name=competitor_images,json=competitorImages" json:"competitor_images,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *EventList) Reset()                    { *m = EventList{} }
func (m *EventList) String() string            { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()               {}
func (*EventList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *EventList) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *EventList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventList) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

func (m *EventList) GetCompetitorImages() []*IdMap {
	if m != nil {
		return m.CompetitorImages
	}
	return nil
}

type CompetitionList struct {
	Timestamp        *int64         `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Competitions     []*Competition `protobuf:"bytes,2,rep,name=competitions" json:"competitions,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CompetitionList) Reset()                    { *m = CompetitionList{} }
func (m *CompetitionList) String() string            { return proto.CompactTextString(m) }
func (*CompetitionList) ProtoMessage()               {}
func (*CompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *CompetitionList) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CompetitionList) GetCompetitions() []*Competition {
	if m != nil {
		return m.Competitions
	}
	return nil
}

type OutrightList struct {
	Timestamp        *int64      `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Outrights        []*Outright `protobuf:"bytes,2,rep,name=outrights" json:"outrights,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *OutrightList) Reset()                    { *m = OutrightList{} }
func (m *OutrightList) String() string            { return proto.CompactTextString(m) }
func (*OutrightList) ProtoMessage()               {}
func (*OutrightList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *OutrightList) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *OutrightList) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

// generic ID list
type Uint32List struct {
	Ids              []uint32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Uint32List) Reset()                    { *m = Uint32List{} }
func (m *Uint32List) String() string            { return proto.CompactTextString(m) }
func (*Uint32List) ProtoMessage()               {}
func (*Uint32List) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *Uint32List) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type EventMedia struct {
	Image            *string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	VideoThumbnail   *string `protobuf:"bytes,2,opt,name=video_thumbnail,json=videoThumbnail" json:"video_thumbnail,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventMedia) Reset()                    { *m = EventMedia{} }
func (m *EventMedia) String() string            { return proto.CompactTextString(m) }
func (*EventMedia) ProtoMessage()               {}
func (*EventMedia) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *EventMedia) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *EventMedia) GetVideoThumbnail() string {
	if m != nil && m.VideoThumbnail != nil {
		return *m.VideoThumbnail
	}
	return ""
}

type Market struct {
	Id               *uint32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Primary          *bool        `protobuf:"varint,3,opt,name=primary" json:"primary,omitempty"`
	Groups           []string     `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	Type             *string      `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Selections       []*Selection `protobuf:"bytes,6,rep,name=selections" json:"selections,omitempty"`
	SmvRegex         *string      `protobuf:"bytes,7,opt,name=smv_regex,json=smvRegex" json:"smv_regex,omitempty"`
	SmvFields        *string      `protobuf:"bytes,8,opt,name=smv_fields,json=smvFields" json:"smv_fields,omitempty"`
	ActiveSelections *uint32      `protobuf:"varint,9,opt,name=active_selections,json=activeSelections" json:"active_selections,omitempty"`
	Tags             *uint64      `protobuf:"varint,13,opt,name=tags" json:"tags,omitempty"`
	// will be striped in market-manager
	Priority *uint32 `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	// deprecated below
	Grade            *uint32 `protobuf:"varint,11,opt,name=grade" json:"grade,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *Market) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Market) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Market) GetPrimary() bool {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return false
}

func (m *Market) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Market) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Market) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Market) GetSmvRegex() string {
	if m != nil && m.SmvRegex != nil {
		return *m.SmvRegex
	}
	return ""
}

func (m *Market) GetSmvFields() string {
	if m != nil && m.SmvFields != nil {
		return *m.SmvFields
	}
	return ""
}

func (m *Market) GetActiveSelections() uint32 {
	if m != nil && m.ActiveSelections != nil {
		return *m.ActiveSelections
	}
	return 0
}

func (m *Market) GetTags() uint64 {
	if m != nil && m.Tags != nil {
		return *m.Tags
	}
	return 0
}

func (m *Market) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *Market) GetGrade() uint32 {
	if m != nil && m.Grade != nil {
		return *m.Grade
	}
	return 0
}

// NOTE:
// group_id is the index for the Market grouping names
type Selection struct {
	Timestamp       *int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	GroupId         *uint32  `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EventId         *uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        *uint32  `protobuf:"varint,5,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Type            *string  `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	SpecialBetValue *string  `protobuf:"bytes,7,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	PlayerId        *uint32  `protobuf:"varint,8,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamId          *uint32  `protobuf:"varint,9,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Odds            *float64 `protobuf:"fixed64,10,opt,name=odds" json:"odds,omitempty"`
	Probability     *float64 `protobuf:"fixed64,11,opt,name=probability" json:"probability,omitempty"`
	MinStake        *float64 `protobuf:"fixed64,12,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        *float64 `protobuf:"fixed64,13,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	BackersOdds     *float64 `protobuf:"fixed64,16,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
	// 0: locked
	// 1: trading
	// 2: temporary lock by provider
	// 3: replaced selection, hide in api
	// more states TBD
	Status *SelectionStatus `protobuf:"varint,14,opt,name=status,enum=sportsbook.SelectionStatus" json:"status,omitempty"`
	// internal use only (pricing engine state)
	ProviderKey      *string `protobuf:"bytes,15,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *Selection) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Selection) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Selection) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *Selection) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *Selection) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

func (m *Selection) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *Selection) GetSpecialBetValue() string {
	if m != nil && m.SpecialBetValue != nil {
		return *m.SpecialBetValue
	}
	return ""
}

func (m *Selection) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Selection) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *Selection) GetOdds() float64 {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return 0
}

func (m *Selection) GetProbability() float64 {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return 0
}

func (m *Selection) GetMinStake() float64 {
	if m != nil && m.MinStake != nil {
		return *m.MinStake
	}
	return 0
}

func (m *Selection) GetMaxStake() float64 {
	if m != nil && m.MaxStake != nil {
		return *m.MaxStake
	}
	return 0
}

func (m *Selection) GetBackersOdds() float64 {
	if m != nil && m.BackersOdds != nil {
		return *m.BackersOdds
	}
	return 0
}

func (m *Selection) GetStatus() SelectionStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return SelectionStatus_DISABLED
}

func (m *Selection) GetProviderKey() string {
	if m != nil && m.ProviderKey != nil {
		return *m.ProviderKey
	}
	return ""
}

type Outright struct {
	Timestamp     *int64               `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id            *uint32              `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name          *string              `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Key           *string              `protobuf:"bytes,14,opt,name=key" json:"key,omitempty"`
	StartsAt      *int64               `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt        *int64               `protobuf:"varint,5,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	Sport         *Generic             `protobuf:"bytes,6,opt,name=sport" json:"sport,omitempty"`
	Competition   *Competition         `protobuf:"bytes,7,opt,name=competition" json:"competition,omitempty"`
	Selections    []*OutrightSelection `protobuf:"bytes,9,rep,name=selections" json:"selections,omitempty"`
	Status        *EventStatus         `protobuf:"varint,10,opt,name=status,enum=sportsbook.EventStatus" json:"status,omitempty"`
	FinishesAt    *int64               `protobuf:"varint,11,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
	MarketId      *uint32              `protobuf:"varint,12,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	ProvidersData []*ProviderData      `protobuf:"bytes,15,rep,name=providers_data,json=providersData" json:"providers_data,omitempty"`
	// DEPRECATED
	MarketGrade      *uint32       `protobuf:"varint,13,opt,name=market_grade,json=marketGrade" json:"market_grade,omitempty"`
	Competitors      []*Competitor `protobuf:"bytes,8,rep,name=competitors" json:"competitors,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Outright) Reset()                    { *m = Outright{} }
func (m *Outright) String() string            { return proto.CompactTextString(m) }
func (*Outright) ProtoMessage()               {}
func (*Outright) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *Outright) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Outright) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Outright) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Outright) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Outright) GetStartsAt() int64 {
	if m != nil && m.StartsAt != nil {
		return *m.StartsAt
	}
	return 0
}

func (m *Outright) GetEndsAt() int64 {
	if m != nil && m.EndsAt != nil {
		return *m.EndsAt
	}
	return 0
}

func (m *Outright) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Outright) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Outright) GetSelections() []*OutrightSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Outright) GetStatus() EventStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return EventStatus_PRE_TRADING
}

func (m *Outright) GetFinishesAt() int64 {
	if m != nil && m.FinishesAt != nil {
		return *m.FinishesAt
	}
	return 0
}

func (m *Outright) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

func (m *Outright) GetProvidersData() []*ProviderData {
	if m != nil {
		return m.ProvidersData
	}
	return nil
}

func (m *Outright) GetMarketGrade() uint32 {
	if m != nil && m.MarketGrade != nil {
		return *m.MarketGrade
	}
	return 0
}

func (m *Outright) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

type OutrightSelection struct {
	Timestamp       *int64           `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            *string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	EventId         *uint32          `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CompetitorId    *uint32          `protobuf:"varint,5,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	Odds            *float64         `protobuf:"fixed64,6,opt,name=odds" json:"odds,omitempty"`
	Probability     *float64         `protobuf:"fixed64,7,opt,name=probability" json:"probability,omitempty"`
	MinStake        *float64         `protobuf:"fixed64,8,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        *float64         `protobuf:"fixed64,9,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	Status          *SelectionStatus `protobuf:"varint,10,opt,name=status,enum=sportsbook.SelectionStatus" json:"status,omitempty"`
	SpecialBetValue *string          `protobuf:"bytes,12,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	// internal use only (pricing engine state)
	ProviderKey *string `protobuf:"bytes,11,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	Outcome     *string `protobuf:"bytes,13,opt,name=outcome" json:"outcome,omitempty"`
	// DEPRECATED
	MarketId         *uint32 `protobuf:"varint,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OutrightSelection) Reset()                    { *m = OutrightSelection{} }
func (m *OutrightSelection) String() string            { return proto.CompactTextString(m) }
func (*OutrightSelection) ProtoMessage()               {}
func (*OutrightSelection) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *OutrightSelection) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *OutrightSelection) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *OutrightSelection) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *OutrightSelection) GetCompetitorId() uint32 {
	if m != nil && m.CompetitorId != nil {
		return *m.CompetitorId
	}
	return 0
}

func (m *OutrightSelection) GetOdds() float64 {
	if m != nil && m.Odds != nil {
		return *m.Odds
	}
	return 0
}

func (m *OutrightSelection) GetProbability() float64 {
	if m != nil && m.Probability != nil {
		return *m.Probability
	}
	return 0
}

func (m *OutrightSelection) GetMinStake() float64 {
	if m != nil && m.MinStake != nil {
		return *m.MinStake
	}
	return 0
}

func (m *OutrightSelection) GetMaxStake() float64 {
	if m != nil && m.MaxStake != nil {
		return *m.MaxStake
	}
	return 0
}

func (m *OutrightSelection) GetStatus() SelectionStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return SelectionStatus_DISABLED
}

func (m *OutrightSelection) GetSpecialBetValue() string {
	if m != nil && m.SpecialBetValue != nil {
		return *m.SpecialBetValue
	}
	return ""
}

func (m *OutrightSelection) GetProviderKey() string {
	if m != nil && m.ProviderKey != nil {
		return *m.ProviderKey
	}
	return ""
}

func (m *OutrightSelection) GetOutcome() string {
	if m != nil && m.Outcome != nil {
		return *m.Outcome
	}
	return ""
}

func (m *OutrightSelection) GetMarketId() uint32 {
	if m != nil && m.MarketId != nil {
		return *m.MarketId
	}
	return 0
}

type EventMetadata struct {
	Timestamp         *int64               `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventTime         *string              `protobuf:"bytes,2,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	EventTimeExtended *string              `protobuf:"bytes,3,opt,name=event_time_extended,json=eventTimeExtended" json:"event_time_extended,omitempty"`
	EventStatus       *string              `protobuf:"bytes,4,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
	BetStatus         *string              `protobuf:"bytes,5,opt,name=bet_status,json=betStatus" json:"bet_status,omitempty"`
	Score             []int32              `protobuf:"varint,6,rep,name=score" json:"score,omitempty"`
	GameScore         []int32              `protobuf:"varint,7,rep,name=game_score,json=gameScore" json:"game_score,omitempty"`
	ClearedScore      []int32              `protobuf:"varint,8,rep,name=cleared_score,json=clearedScore" json:"cleared_score,omitempty"`
	SetScores         []*EventMetadata_Set `protobuf:"bytes,9,rep,name=set_scores,json=setScores" json:"set_scores,omitempty"`
	// soccer
	CornersAway        *int32 `protobuf:"varint,10,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        *int32 `protobuf:"varint,11,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       *int32 `protobuf:"varint,12,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       *int32 `protobuf:"varint,13,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    *int32 `protobuf:"varint,14,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    *int32 `protobuf:"varint,15,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway *int32 `protobuf:"varint,16,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome *int32 `protobuf:"varint,17,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
	// tennis
	Server   *int32 `protobuf:"varint,18,opt,name=server" json:"server,omitempty"`
	Tiebreak *bool  `protobuf:"varint,19,opt,name=tiebreak" json:"tiebreak,omitempty"`
	// basketball
	ClockStopped          *int32  `protobuf:"varint,20,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         *string `protobuf:"bytes,21,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod *string `protobuf:"bytes,22,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
	// ice hockey / handball
	SuspendHome *int32 `protobuf:"varint,23,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway *int32 `protobuf:"varint,24,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// table tennis
	Expedite *int32 `protobuf:"varint,25,opt,name=expedite" json:"expedite,omitempty"`
	// baseball
	AwayBatter *int32  `protobuf:"varint,26,opt,name=away_batter,json=awayBatter" json:"away_batter,omitempty"`
	HomeBatter *int32  `protobuf:"varint,27,opt,name=home_batter,json=homeBatter" json:"home_batter,omitempty"`
	Balls      *int32  `protobuf:"varint,28,opt,name=balls" json:"balls,omitempty"`
	Bases      *string `protobuf:"bytes,29,opt,name=bases" json:"bases,omitempty"`
	Strikes    *int32  `protobuf:"varint,30,opt,name=strikes" json:"strikes,omitempty"`
	Outs       *int32  `protobuf:"varint,31,opt,name=outs" json:"outs,omitempty"`
	// football
	Possession *int32 `protobuf:"varint,32,opt,name=possession" json:"possession,omitempty"`
	Position   *int32 `protobuf:"varint,33,opt,name=position" json:"position,omitempty"`
	Try        *int32 `protobuf:"varint,34,opt,name=try" json:"try,omitempty"`
	Yards      *int32 `protobuf:"varint,35,opt,name=yards" json:"yards,omitempty"`
	// snooker
	RemainingReds *int32 `protobuf:"varint,36,opt,name=remaining_reds,json=remainingReds" json:"remaining_reds,omitempty"`
	Visit         *int32 `protobuf:"varint,37,opt,name=visit" json:"visit,omitempty"`
	// darts
	LegScore *int32 `protobuf:"varint,38,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
	Throw    *int32 `protobuf:"varint,39,opt,name=throw" json:"throw,omitempty"`
	// lawn bowls
	RemainingBowlsAway *int32 `protobuf:"varint,40,opt,name=remaining_bowls_away,json=remainingBowlsAway" json:"remaining_bowls_away,omitempty"`
	RemainingBowlsHome *int32 `protobuf:"varint,41,opt,name=remaining_bowls_home,json=remainingBowlsHome" json:"remaining_bowls_home,omitempty"`
	CurrentEnd         *int32 `protobuf:"varint,42,opt,name=current_end,json=currentEnd" json:"current_end,omitempty"`
	Delivery           *int32 `protobuf:"varint,43,opt,name=delivery" json:"delivery,omitempty"`
	// cricket
	DismissalsAway     *int32                          `protobuf:"varint,44,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     *int32                          `protobuf:"varint,45,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               *int32                          `protobuf:"varint,46,opt,name=over" json:"over,omitempty"`
	Innings            *int32                          `protobuf:"varint,47,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    *int32                          `protobuf:"varint,48,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    *int32                          `protobuf:"varint,49,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           *int32                          `protobuf:"varint,56,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           *int32                          `protobuf:"varint,57,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        *int32                          `protobuf:"varint,58,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        *int32                          `protobuf:"varint,59,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           *int64                          `protobuf:"varint,60,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   *uint32                         `protobuf:"varint,61,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam *uint32                         `protobuf:"varint,62,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         *uint32                         `protobuf:"varint,63,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	ScoreList          []*EventMetadata_SummaryListing `protobuf:"bytes,50,rep,name=score_list,json=scoreList" json:"score_list,omitempty"`
	CardList           []*EventMetadata_SummaryListing `protobuf:"bytes,51,rep,name=card_list,json=cardList" json:"card_list,omitempty"`
	// betstop
	BetstopReason    *string `protobuf:"bytes,52,opt,name=betstop_reason,json=betstopReason" json:"betstop_reason,omitempty"`
	BetstopId        *uint32 `protobuf:"varint,53,opt,name=betstop_id,json=betstopId" json:"betstop_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventMetadata) Reset()                    { *m = EventMetadata{} }
func (m *EventMetadata) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata) ProtoMessage()               {}
func (*EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *EventMetadata) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *EventMetadata) GetEventTime() string {
	if m != nil && m.EventTime != nil {
		return *m.EventTime
	}
	return ""
}

func (m *EventMetadata) GetEventTimeExtended() string {
	if m != nil && m.EventTimeExtended != nil {
		return *m.EventTimeExtended
	}
	return ""
}

func (m *EventMetadata) GetEventStatus() string {
	if m != nil && m.EventStatus != nil {
		return *m.EventStatus
	}
	return ""
}

func (m *EventMetadata) GetBetStatus() string {
	if m != nil && m.BetStatus != nil {
		return *m.BetStatus
	}
	return ""
}

func (m *EventMetadata) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *EventMetadata) GetGameScore() []int32 {
	if m != nil {
		return m.GameScore
	}
	return nil
}

func (m *EventMetadata) GetClearedScore() []int32 {
	if m != nil {
		return m.ClearedScore
	}
	return nil
}

func (m *EventMetadata) GetSetScores() []*EventMetadata_Set {
	if m != nil {
		return m.SetScores
	}
	return nil
}

func (m *EventMetadata) GetCornersAway() int32 {
	if m != nil && m.CornersAway != nil {
		return *m.CornersAway
	}
	return 0
}

func (m *EventMetadata) GetCornersHome() int32 {
	if m != nil && m.CornersHome != nil {
		return *m.CornersHome
	}
	return 0
}

func (m *EventMetadata) GetRedCardsAway() int32 {
	if m != nil && m.RedCardsAway != nil {
		return *m.RedCardsAway
	}
	return 0
}

func (m *EventMetadata) GetRedCardsHome() int32 {
	if m != nil && m.RedCardsHome != nil {
		return *m.RedCardsHome
	}
	return 0
}

func (m *EventMetadata) GetYellowCardsAway() int32 {
	if m != nil && m.YellowCardsAway != nil {
		return *m.YellowCardsAway
	}
	return 0
}

func (m *EventMetadata) GetYellowCardsHome() int32 {
	if m != nil && m.YellowCardsHome != nil {
		return *m.YellowCardsHome
	}
	return 0
}

func (m *EventMetadata) GetYellowRedCardsAway() int32 {
	if m != nil && m.YellowRedCardsAway != nil {
		return *m.YellowRedCardsAway
	}
	return 0
}

func (m *EventMetadata) GetYellowRedCardsHome() int32 {
	if m != nil && m.YellowRedCardsHome != nil {
		return *m.YellowRedCardsHome
	}
	return 0
}

func (m *EventMetadata) GetServer() int32 {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return 0
}

func (m *EventMetadata) GetTiebreak() bool {
	if m != nil && m.Tiebreak != nil {
		return *m.Tiebreak
	}
	return false
}

func (m *EventMetadata) GetClockStopped() int32 {
	if m != nil && m.ClockStopped != nil {
		return *m.ClockStopped
	}
	return 0
}

func (m *EventMetadata) GetRemainingTime() string {
	if m != nil && m.RemainingTime != nil {
		return *m.RemainingTime
	}
	return ""
}

func (m *EventMetadata) GetRemainingTimeInPeriod() string {
	if m != nil && m.RemainingTimeInPeriod != nil {
		return *m.RemainingTimeInPeriod
	}
	return ""
}

func (m *EventMetadata) GetSuspendHome() int32 {
	if m != nil && m.SuspendHome != nil {
		return *m.SuspendHome
	}
	return 0
}

func (m *EventMetadata) GetSuspendAway() int32 {
	if m != nil && m.SuspendAway != nil {
		return *m.SuspendAway
	}
	return 0
}

func (m *EventMetadata) GetExpedite() int32 {
	if m != nil && m.Expedite != nil {
		return *m.Expedite
	}
	return 0
}

func (m *EventMetadata) GetAwayBatter() int32 {
	if m != nil && m.AwayBatter != nil {
		return *m.AwayBatter
	}
	return 0
}

func (m *EventMetadata) GetHomeBatter() int32 {
	if m != nil && m.HomeBatter != nil {
		return *m.HomeBatter
	}
	return 0
}

func (m *EventMetadata) GetBalls() int32 {
	if m != nil && m.Balls != nil {
		return *m.Balls
	}
	return 0
}

func (m *EventMetadata) GetBases() string {
	if m != nil && m.Bases != nil {
		return *m.Bases
	}
	return ""
}

func (m *EventMetadata) GetStrikes() int32 {
	if m != nil && m.Strikes != nil {
		return *m.Strikes
	}
	return 0
}

func (m *EventMetadata) GetOuts() int32 {
	if m != nil && m.Outs != nil {
		return *m.Outs
	}
	return 0
}

func (m *EventMetadata) GetPossession() int32 {
	if m != nil && m.Possession != nil {
		return *m.Possession
	}
	return 0
}

func (m *EventMetadata) GetPosition() int32 {
	if m != nil && m.Position != nil {
		return *m.Position
	}
	return 0
}

func (m *EventMetadata) GetTry() int32 {
	if m != nil && m.Try != nil {
		return *m.Try
	}
	return 0
}

func (m *EventMetadata) GetYards() int32 {
	if m != nil && m.Yards != nil {
		return *m.Yards
	}
	return 0
}

func (m *EventMetadata) GetRemainingReds() int32 {
	if m != nil && m.RemainingReds != nil {
		return *m.RemainingReds
	}
	return 0
}

func (m *EventMetadata) GetVisit() int32 {
	if m != nil && m.Visit != nil {
		return *m.Visit
	}
	return 0
}

func (m *EventMetadata) GetLegScore() int32 {
	if m != nil && m.LegScore != nil {
		return *m.LegScore
	}
	return 0
}

func (m *EventMetadata) GetThrow() int32 {
	if m != nil && m.Throw != nil {
		return *m.Throw
	}
	return 0
}

func (m *EventMetadata) GetRemainingBowlsAway() int32 {
	if m != nil && m.RemainingBowlsAway != nil {
		return *m.RemainingBowlsAway
	}
	return 0
}

func (m *EventMetadata) GetRemainingBowlsHome() int32 {
	if m != nil && m.RemainingBowlsHome != nil {
		return *m.RemainingBowlsHome
	}
	return 0
}

func (m *EventMetadata) GetCurrentEnd() int32 {
	if m != nil && m.CurrentEnd != nil {
		return *m.CurrentEnd
	}
	return 0
}

func (m *EventMetadata) GetDelivery() int32 {
	if m != nil && m.Delivery != nil {
		return *m.Delivery
	}
	return 0
}

func (m *EventMetadata) GetDismissalsAway() int32 {
	if m != nil && m.DismissalsAway != nil {
		return *m.DismissalsAway
	}
	return 0
}

func (m *EventMetadata) GetDismissalsHome() int32 {
	if m != nil && m.DismissalsHome != nil {
		return *m.DismissalsHome
	}
	return 0
}

func (m *EventMetadata) GetOver() int32 {
	if m != nil && m.Over != nil {
		return *m.Over
	}
	return 0
}

func (m *EventMetadata) GetInnings() int32 {
	if m != nil && m.Innings != nil {
		return *m.Innings
	}
	return 0
}

func (m *EventMetadata) GetPenaltyRunsHome() int32 {
	if m != nil && m.PenaltyRunsHome != nil {
		return *m.PenaltyRunsHome
	}
	return 0
}

func (m *EventMetadata) GetPenaltyRunsAway() int32 {
	if m != nil && m.PenaltyRunsAway != nil {
		return *m.PenaltyRunsAway
	}
	return 0
}

func (m *EventMetadata) GetHomeRuns() int32 {
	if m != nil && m.HomeRuns != nil {
		return *m.HomeRuns
	}
	return 0
}

func (m *EventMetadata) GetAwayRuns() int32 {
	if m != nil && m.AwayRuns != nil {
		return *m.AwayRuns
	}
	return 0
}

func (m *EventMetadata) GetHomeWickets() int32 {
	if m != nil && m.HomeWickets != nil {
		return *m.HomeWickets
	}
	return 0
}

func (m *EventMetadata) GetAwayWickets() int32 {
	if m != nil && m.AwayWickets != nil {
		return *m.AwayWickets
	}
	return 0
}

func (m *EventMetadata) GetTossTime() int64 {
	if m != nil && m.TossTime != nil {
		return *m.TossTime
	}
	return 0
}

func (m *EventMetadata) GetStartBattingTeam() uint32 {
	if m != nil && m.StartBattingTeam != nil {
		return *m.StartBattingTeam
	}
	return 0
}

func (m *EventMetadata) GetCurrentBattingTeam() uint32 {
	if m != nil && m.CurrentBattingTeam != nil {
		return *m.CurrentBattingTeam
	}
	return 0
}

func (m *EventMetadata) GetTossWinner() uint32 {
	if m != nil && m.TossWinner != nil {
		return *m.TossWinner
	}
	return 0
}

func (m *EventMetadata) GetScoreList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *EventMetadata) GetCardList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *EventMetadata) GetBetstopReason() string {
	if m != nil && m.BetstopReason != nil {
		return *m.BetstopReason
	}
	return ""
}

func (m *EventMetadata) GetBetstopId() uint32 {
	if m != nil && m.BetstopId != nil {
		return *m.BetstopId
	}
	return 0
}

type EventMetadata_Set struct {
	Score            []int32 `protobuf:"varint,1,rep,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventMetadata_Set) Reset()                    { *m = EventMetadata_Set{} }
func (m *EventMetadata_Set) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata_Set) ProtoMessage()               {}
func (*EventMetadata_Set) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15, 0} }

func (m *EventMetadata_Set) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

type EventMetadata_SummaryListing struct {
	Cancelled        *string `protobuf:"bytes,1,opt,name=cancelled" json:"cancelled,omitempty"`
	PlayerName       *string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerId         *uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamName         *string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamId           *uint32 `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Time             *string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	HomeScore        *int32  `protobuf:"varint,7,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore        *int32  `protobuf:"varint,8,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	Type             *string `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EventMetadata_SummaryListing) Reset()         { *m = EventMetadata_SummaryListing{} }
func (m *EventMetadata_SummaryListing) String() string { return proto.CompactTextString(m) }
func (*EventMetadata_SummaryListing) ProtoMessage()    {}
func (*EventMetadata_SummaryListing) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{15, 1}
}

func (m *EventMetadata_SummaryListing) GetCancelled() string {
	if m != nil && m.Cancelled != nil {
		return *m.Cancelled
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTime() string {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetHomeScore() int32 {
	if m != nil && m.HomeScore != nil {
		return *m.HomeScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetAwayScore() int32 {
	if m != nil && m.AwayScore != nil {
		return *m.AwayScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

type EventTree struct {
	Sports           []*SportsTree `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *EventTree) Reset()                    { *m = EventTree{} }
func (m *EventTree) String() string            { return proto.CompactTextString(m) }
func (*EventTree) ProtoMessage()               {}
func (*EventTree) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *EventTree) GetSports() []*SportsTree {
	if m != nil {
		return m.Sports
	}
	return nil
}

type SportsTree struct {
	Id               *uint32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Competitions     []*CompetitionTree `protobuf:"bytes,3,rep,name=competitions" json:"competitions,omitempty"`
	Key              *string            `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SportsTree) Reset()                    { *m = SportsTree{} }
func (m *SportsTree) String() string            { return proto.CompactTextString(m) }
func (*SportsTree) ProtoMessage()               {}
func (*SportsTree) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *SportsTree) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SportsTree) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SportsTree) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

func (m *SportsTree) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

type CompetitionTree struct {
	Id     *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   *string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    *string    `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	Image  *string    `protobuf:"bytes,11,opt,name=image" json:"image,omitempty"`
	Sport  *Generic   `protobuf:"bytes,3,opt,name=sport" json:"sport,omitempty"`
	Groups []*Generic `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// empty in top level event tree
	Events    []*Event    `protobuf:"bytes,5,rep,name=events" json:"events,omitempty"`
	Outrights []*Outright `protobuf:"bytes,6,rep,name=outrights" json:"outrights,omitempty"`
	// indicator of how many to expect
	EventCount    *uint32 `protobuf:"varint,8,opt,name=event_count,json=eventCount" json:"event_count,omitempty"`
	OutrightCount *uint32 `protobuf:"varint,9,opt,name=outright_count,json=outrightCount" json:"outright_count,omitempty"`
	// used for sorting
	Priority *uint32 `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	Grade    *uint32 `protobuf:"varint,12,opt,name=grade" json:"grade,omitempty"`
	Blank    *bool   `protobuf:"varint,14,opt,name=blank" json:"blank,omitempty"`
	// deprecated in favor of priority
	Score            *uint32 `protobuf:"varint,7,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CompetitionTree) Reset()                    { *m = CompetitionTree{} }
func (m *CompetitionTree) String() string            { return proto.CompactTextString(m) }
func (*CompetitionTree) ProtoMessage()               {}
func (*CompetitionTree) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *CompetitionTree) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CompetitionTree) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CompetitionTree) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CompetitionTree) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *CompetitionTree) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *CompetitionTree) GetGroups() []*Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *CompetitionTree) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *CompetitionTree) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

func (m *CompetitionTree) GetEventCount() uint32 {
	if m != nil && m.EventCount != nil {
		return *m.EventCount
	}
	return 0
}

func (m *CompetitionTree) GetOutrightCount() uint32 {
	if m != nil && m.OutrightCount != nil {
		return *m.OutrightCount
	}
	return 0
}

func (m *CompetitionTree) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *CompetitionTree) GetGrade() uint32 {
	if m != nil && m.Grade != nil {
		return *m.Grade
	}
	return 0
}

func (m *CompetitionTree) GetBlank() bool {
	if m != nil && m.Blank != nil {
		return *m.Blank
	}
	return false
}

func (m *CompetitionTree) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

// DEPRECATED: do not use this
type LiveEvents struct {
	Timestamp        *int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Events           []*Event `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *LiveEvents) Reset()                    { *m = LiveEvents{} }
func (m *LiveEvents) String() string            { return proto.CompactTextString(m) }
func (*LiveEvents) ProtoMessage()               {}
func (*LiveEvents) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *LiveEvents) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *LiveEvents) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// DEPRECATED: do not use this
type Upcoming struct {
	Events           []*Event    `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Outrights        []*Outright `protobuf:"bytes,2,rep,name=outrights" json:"outrights,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Upcoming) Reset()                    { *m = Upcoming{} }
func (m *Upcoming) String() string            { return proto.CompactTextString(m) }
func (*Upcoming) ProtoMessage()               {}
func (*Upcoming) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *Upcoming) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Upcoming) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

// DEPRECATED: do not use this
type Bet struct {
	Timestamp          *int64               `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	PlayerId           *uint32              `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	PlayerEmail        *string              `protobuf:"bytes,13,opt,name=player_email,json=playerEmail" json:"player_email,omitempty"`
	ClientId           *uint32              `protobuf:"varint,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Stake              *float64             `protobuf:"fixed64,4,opt,name=stake" json:"stake,omitempty"`
	Selections         []*Selection         `protobuf:"bytes,5,rep,name=selections" json:"selections,omitempty"`
	OutrightSelections []*OutrightSelection `protobuf:"bytes,6,rep,name=outright_selections,json=outrightSelections" json:"outright_selections,omitempty"`
	Provider           *string              `protobuf:"bytes,7,opt,name=provider" json:"provider,omitempty"`
	Action             *string              `protobuf:"bytes,10,opt,name=action" json:"action,omitempty"`
	// include the following system bets
	// 0: accumulator
	// 1: singles
	// 2: doubles
	// 3: trebles and so on ...
	System []uint32 `protobuf:"varint,11,rep,name=system" json:"system,omitempty"`
	// deprecated
	ProviderPayload  []byte  `protobuf:"bytes,8,opt,name=provider_payload,json=providerPayload" json:"provider_payload,omitempty"`
	ProviderBetId    *string `protobuf:"bytes,9,opt,name=provider_bet_id,json=providerBetId" json:"provider_bet_id,omitempty"`
	Uuid             *string `protobuf:"bytes,12,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Bet) Reset()                    { *m = Bet{} }
func (m *Bet) String() string            { return proto.CompactTextString(m) }
func (*Bet) ProtoMessage()               {}
func (*Bet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

func (m *Bet) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Bet) GetPlayerId() uint32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *Bet) GetPlayerEmail() string {
	if m != nil && m.PlayerEmail != nil {
		return *m.PlayerEmail
	}
	return ""
}

func (m *Bet) GetClientId() uint32 {
	if m != nil && m.ClientId != nil {
		return *m.ClientId
	}
	return 0
}

func (m *Bet) GetStake() float64 {
	if m != nil && m.Stake != nil {
		return *m.Stake
	}
	return 0
}

func (m *Bet) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Bet) GetOutrightSelections() []*OutrightSelection {
	if m != nil {
		return m.OutrightSelections
	}
	return nil
}

func (m *Bet) GetProvider() string {
	if m != nil && m.Provider != nil {
		return *m.Provider
	}
	return ""
}

func (m *Bet) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

func (m *Bet) GetSystem() []uint32 {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Bet) GetProviderPayload() []byte {
	if m != nil {
		return m.ProviderPayload
	}
	return nil
}

func (m *Bet) GetProviderBetId() string {
	if m != nil && m.ProviderBetId != nil {
		return *m.ProviderBetId
	}
	return ""
}

func (m *Bet) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

// DEPRECATED: do not use this
type IdMap struct {
	Id               *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key              []string `protobuf:"bytes,2,rep,name=key" json:"key,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IdMap) Reset()                    { *m = IdMap{} }
func (m *IdMap) String() string            { return proto.CompactTextString(m) }
func (*IdMap) ProtoMessage()               {}
func (*IdMap) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *IdMap) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IdMap) GetKey() []string {
	if m != nil {
		return m.Key
	}
	return nil
}

type MultipleCompetitionListMetadata struct {
	Id               *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key              *string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Name             *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Sport            *Generic `protobuf:"bytes,4,opt,name=sport" json:"sport,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MultipleCompetitionListMetadata) Reset()         { *m = MultipleCompetitionListMetadata{} }
func (m *MultipleCompetitionListMetadata) String() string { return proto.CompactTextString(m) }
func (*MultipleCompetitionListMetadata) ProtoMessage()    {}
func (*MultipleCompetitionListMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{23}
}

func (m *MultipleCompetitionListMetadata) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MultipleCompetitionListMetadata) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *MultipleCompetitionListMetadata) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *MultipleCompetitionListMetadata) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

type MultipleCompetitionLists struct {
	Lists            []*MultipleCompetitionListMetadata `protobuf:"bytes,1,rep,name=lists" json:"lists,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *MultipleCompetitionLists) Reset()                    { *m = MultipleCompetitionLists{} }
func (m *MultipleCompetitionLists) String() string            { return proto.CompactTextString(m) }
func (*MultipleCompetitionLists) ProtoMessage()               {}
func (*MultipleCompetitionLists) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *MultipleCompetitionLists) GetLists() []*MultipleCompetitionListMetadata {
	if m != nil {
		return m.Lists
	}
	return nil
}

type MultipleCompetitionList struct {
	Metadata         *MultipleCompetitionListMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Competitions     []*CompetitionTree               `protobuf:"bytes,2,rep,name=competitions" json:"competitions,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *MultipleCompetitionList) Reset()                    { *m = MultipleCompetitionList{} }
func (m *MultipleCompetitionList) String() string            { return proto.CompactTextString(m) }
func (*MultipleCompetitionList) ProtoMessage()               {}
func (*MultipleCompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{25} }

func (m *MultipleCompetitionList) GetMetadata() *MultipleCompetitionListMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MultipleCompetitionList) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

func init() {
	proto.RegisterType((*Generic)(nil), "sportsbook.Generic")
	proto.RegisterType((*Competition)(nil), "sportsbook.Competition")
	proto.RegisterType((*Competitor)(nil), "sportsbook.Competitor")
	proto.RegisterType((*Event)(nil), "sportsbook.Event")
	proto.RegisterType((*ProviderData)(nil), "sportsbook.ProviderData")
	proto.RegisterType((*EventStatusChange)(nil), "sportsbook.EventStatusChange")
	proto.RegisterType((*EventList)(nil), "sportsbook.EventList")
	proto.RegisterType((*CompetitionList)(nil), "sportsbook.CompetitionList")
	proto.RegisterType((*OutrightList)(nil), "sportsbook.OutrightList")
	proto.RegisterType((*Uint32List)(nil), "sportsbook.Uint32List")
	proto.RegisterType((*EventMedia)(nil), "sportsbook.EventMedia")
	proto.RegisterType((*Market)(nil), "sportsbook.Market")
	proto.RegisterType((*Selection)(nil), "sportsbook.Selection")
	proto.RegisterType((*Outright)(nil), "sportsbook.Outright")
	proto.RegisterType((*OutrightSelection)(nil), "sportsbook.OutrightSelection")
	proto.RegisterType((*EventMetadata)(nil), "sportsbook.EventMetadata")
	proto.RegisterType((*EventMetadata_Set)(nil), "sportsbook.EventMetadata.Set")
	proto.RegisterType((*EventMetadata_SummaryListing)(nil), "sportsbook.EventMetadata.SummaryListing")
	proto.RegisterType((*EventTree)(nil), "sportsbook.EventTree")
	proto.RegisterType((*SportsTree)(nil), "sportsbook.SportsTree")
	proto.RegisterType((*CompetitionTree)(nil), "sportsbook.CompetitionTree")
	proto.RegisterType((*LiveEvents)(nil), "sportsbook.LiveEvents")
	proto.RegisterType((*Upcoming)(nil), "sportsbook.Upcoming")
	proto.RegisterType((*Bet)(nil), "sportsbook.Bet")
	proto.RegisterType((*IdMap)(nil), "sportsbook.IdMap")
	proto.RegisterType((*MultipleCompetitionListMetadata)(nil), "sportsbook.MultipleCompetitionListMetadata")
	proto.RegisterType((*MultipleCompetitionLists)(nil), "sportsbook.MultipleCompetitionLists")
	proto.RegisterType((*MultipleCompetitionList)(nil), "sportsbook.MultipleCompetitionList")
	proto.RegisterEnum("sportsbook.CricketCompetitionType", CricketCompetitionType_name, CricketCompetitionType_value)
	proto.RegisterEnum("sportsbook.Provider_Name", Provider_Name_name, Provider_Name_value)
	proto.RegisterEnum("sportsbook.Source", Source_name, Source_value)
	proto.RegisterEnum("sportsbook.EventStatus", EventStatus_name, EventStatus_value)
	proto.RegisterEnum("sportsbook.SelectionStatus", SelectionStatus_name, SelectionStatus_value)
	proto.RegisterEnum("sportsbook.MarketTag", MarketTag_name, MarketTag_value)
	proto.RegisterEnum("sportsbook.AvailabilityFlags", AvailabilityFlags_name, AvailabilityFlags_value)
	proto.RegisterEnum("sportsbook.EntityTag", EntityTag_name, EntityTag_value)
}

func init() { proto.RegisterFile("sportsbook/sportsbook.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 3543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcd, 0x76, 0xdb, 0x48,
	0x76, 0x36, 0x49, 0xf1, 0xef, 0xf2, 0x47, 0x60, 0xd9, 0x96, 0x60, 0xab, 0xdd, 0x96, 0x39, 0xd3,
	0x33, 0xb6, 0xdc, 0xed, 0xb6, 0xe5, 0xe9, 0x4c, 0xf7, 0xf4, 0xcc, 0x74, 0x28, 0x09, 0x2d, 0x33,
	0x2d, 0x91, 0x3c, 0x20, 0x65, 0x27, 0xe7, 0x24, 0x41, 0x40, 0xa2, 0x46, 0xc2, 0x11, 0x08, 0x30,
	0x00, 0x28, 0x9b, 0xbb, 0x3e, 0xc9, 0x66, 0x5e, 0x20, 0x8b, 0xac, 0xf3, 0x00, 0xc9, 0x3a, 0x0f,
	0x30, 0x27, 0xcb, 0x2c, 0xb3, 0xc9, 0x43, 0xcc, 0x26, 0xeb, 0x9c, 0x7b, 0xab, 0xf0, 0x47, 0x51,
	0x96, 0x34, 0x67, 0x76, 0xa8, 0xef, 0x7e, 0xf5, 0x7f, 0xef, 0xad, 0x5b, 0xb7, 0x00, 0x5b, 0xc1,
	0xcc, 0xf3, 0xc3, 0x60, 0xec, 0x79, 0xe7, 0x5f, 0x26, 0x9f, 0x2f, 0x66, 0xbe, 0x17, 0x7a, 0x0c,
	0x12, 0xe4, 0xe1, 0x66, 0x9a, 0x18, 0x9a, 0xa1, 0x3d, 0x11, 0xa4, 0xf6, 0x10, 0xca, 0x87, 0xdc,
	0xe5, 0xbe, 0x3d, 0x61, 0x4d, 0xc8, 0xdb, 0x96, 0x9a, 0xdb, 0xce, 0x3d, 0x6d, 0xe8, 0x79, 0xdb,
	0x62, 0x0c, 0xd6, 0x5c, 0x73, 0xca, 0xd5, 0xfc, 0x76, 0xee, 0x69, 0x55, 0xa7, 0x6f, 0xc4, 0xc2,
	0xc5, 0x8c, 0xab, 0x05, 0x81, 0xe1, 0x37, 0x53, 0xa0, 0x70, 0xce, 0x17, 0xea, 0x1a, 0x41, 0xf8,
	0xd9, 0xfe, 0xbf, 0x3c, 0xd4, 0xf6, 0xbd, 0xe9, 0x8c, 0x87, 0x76, 0x68, 0x7b, 0xee, 0x8d, 0x5a,
	0x96, 0xad, 0x54, 0xe2, 0x56, 0xd8, 0x73, 0x28, 0x9d, 0xfa, 0xde, 0x7c, 0x16, 0xa8, 0x85, 0xed,
	0xc2, 0xd3, 0xda, 0xee, 0xdd, 0x17, 0xa9, 0x29, 0xca, 0x41, 0xeb, 0x92, 0xc2, 0x9e, 0x41, 0x91,
	0xa4, 0x6a, 0x71, 0x3b, 0x77, 0x15, 0x57, 0x30, 0xd8, 0x43, 0xa8, 0xcc, 0x7c, 0xdb, 0xf3, 0xed,
	0x70, 0xa1, 0x96, 0x69, 0x4c, 0x71, 0x99, 0xdd, 0x83, 0xe2, 0xa9, 0x6f, 0x5a, 0x5c, 0x2d, 0x91,
	0x40, 0x14, 0xd8, 0x33, 0x58, 0x0b, 0xcd, 0xd3, 0x40, 0xad, 0x6d, 0x17, 0x9e, 0x36, 0x77, 0xef,
	0xa7, 0xdb, 0xd6, 0xdc, 0xd0, 0x0e, 0x17, 0x23, 0xf3, 0x54, 0x27, 0x0a, 0xfb, 0x7b, 0x50, 0x27,
	0xbe, 0x3d, 0x39, 0xe7, 0xa1, 0x31, 0x49, 0x56, 0xc0, 0xa0, 0x45, 0x83, 0xed, 0xdc, 0xd3, 0xe6,
	0x6e, 0x3b, 0x5d, 0x7d, 0x5f, 0x70, 0x53, 0x8b, 0x35, 0x5a, 0xcc, 0xf8, 0x9b, 0x3b, 0xfa, 0xc6,
	0x64, 0xa5, 0x04, 0x07, 0x18, 0x4c, 0x3c, 0x9f, 0xd3, 0x72, 0x37, 0x74, 0x51, 0xd8, 0x2b, 0x89,
	0x6d, 0x69, 0xff, 0x3e, 0x07, 0x10, 0xd5, 0xf0, 0xfc, 0xdb, 0xac, 0x7b, 0x31, 0x59, 0xf7, 0xf4,
	0x1e, 0x37, 0xe4, 0x1e, 0xbf, 0x84, 0xf2, 0xcc, 0x31, 0x17, 0xdc, 0x0f, 0xd4, 0x35, 0xda, 0x8c,
	0x8d, 0xcc, 0x2c, 0xe2, 0x2e, 0xf5, 0x88, 0xd6, 0xfe, 0xb1, 0x0c, 0x45, 0xed, 0x82, 0xbb, 0x21,
	0xfb, 0x04, 0xaa, 0xa1, 0x3d, 0xe5, 0x41, 0x68, 0x4e, 0x67, 0x34, 0x98, 0x82, 0x9e, 0x00, 0x72,
	0x8c, 0xf9, 0x4b, 0x63, 0x2c, 0xa4, 0xc6, 0xb8, 0x05, 0xd5, 0x20, 0x34, 0xfd, 0x30, 0x30, 0xcc,
	0x90, 0x26, 0x5e, 0xd0, 0x2b, 0x02, 0xe8, 0x84, 0xb7, 0xd9, 0xf9, 0x6f, 0xa0, 0x96, 0xda, 0x14,
	0xda, 0xe3, 0xda, 0xee, 0xe6, 0xaa, 0x99, 0xd8, 0x9e, 0xab, 0xa7, 0xb9, 0xec, 0xeb, 0xa4, 0xaa,
	0xe7, 0x07, 0x6a, 0xf9, 0xa3, 0x8b, 0x90, 0xa6, 0xb2, 0x27, 0x50, 0xf7, 0x66, 0xdc, 0x35, 0xa6,
	0xa6, 0x7f, 0xce, 0xc3, 0x80, 0x34, 0xbc, 0xa1, 0xd7, 0x10, 0x3b, 0x16, 0x10, 0xfb, 0x1c, 0xca,
	0x91, 0xb4, 0x4a, 0x0d, 0xb3, 0x74, 0xc3, 0x82, 0xa5, 0x47, 0x14, 0xf6, 0x25, 0x94, 0xd0, 0x84,
	0xe7, 0x81, 0x54, 0xa8, 0xcc, 0x04, 0x68, 0xc9, 0x87, 0x24, 0xd6, 0x25, 0x8d, 0x7d, 0x05, 0x95,
	0x29, 0x0f, 0x4d, 0xcb, 0x0c, 0x4d, 0xb5, 0x46, 0x73, 0x7e, 0x70, 0xa9, 0xca, 0xb1, 0x24, 0xe8,
	0x31, 0x95, 0x7d, 0x07, 0xcd, 0x99, 0xef, 0x5d, 0xd8, 0x16, 0xf7, 0x03, 0x83, 0x2a, 0xdf, 0xa7,
	0xc1, 0xa9, 0xe9, 0xca, 0x03, 0xc9, 0x38, 0xc0, 0xba, 0x8d, 0x98, 0x8f, 0x45, 0xf6, 0x05, 0x30,
	0xdb, 0x0d, 0xb9, 0xef, 0x9a, 0x8e, 0x91, 0x68, 0x40, 0x83, 0xf6, 0xaf, 0x15, 0x49, 0x46, 0xb1,
	0x26, 0xc4, 0xaa, 0xdd, 0x4c, 0xa9, 0x36, 0x2e, 0xdf, 0x99, 0x37, 0xe5, 0xc6, 0xcc, 0x0e, 0x27,
	0x67, 0xdc, 0x57, 0xd7, 0x49, 0x2f, 0x6a, 0x88, 0x0d, 0x04, 0x84, 0x14, 0xf3, 0xbd, 0xb9, 0x88,
	0x29, 0x8a, 0xa0, 0x20, 0x16, 0x51, 0xbe, 0x00, 0x36, 0x33, 0x7d, 0xc7, 0x5c, 0x18, 0x3e, 0x0f,
	0x42, 0xdf, 0x9e, 0x90, 0x02, 0x30, 0xea, 0xa8, 0x25, 0x24, 0x7a, 0x22, 0x60, 0x9f, 0x43, 0x71,
	0xca, 0x2d, 0xdb, 0x54, 0x37, 0x69, 0xb9, 0x36, 0x56, 0x2c, 0x97, 0x65, 0x9b, 0xba, 0x20, 0xb1,
	0x36, 0xd4, 0xcd, 0x0b, 0xd3, 0x76, 0xcc, 0xb1, 0xed, 0xa0, 0x53, 0x51, 0xa9, 0xd9, 0x0c, 0x86,
	0x93, 0x1b, 0x3b, 0xa6, 0x7b, 0xae, 0x3e, 0xdc, 0xce, 0x3d, 0xad, 0xe8, 0xa2, 0xc0, 0x1e, 0x43,
	0x2d, 0x5a, 0x32, 0xc3, 0xb6, 0xd4, 0x3a, 0x0d, 0x1c, 0x22, 0xa8, 0x6b, 0xb1, 0xcf, 0xa0, 0xe9,
	0xd8, 0x17, 0xdc, 0x90, 0x6d, 0x39, 0x5c, 0x6d, 0x51, 0xfd, 0x06, 0xa2, 0x9d, 0x08, 0xc4, 0xd6,
	0xed, 0xa9, 0x79, 0xca, 0xd5, 0xbb, 0xd4, 0x82, 0x28, 0xb4, 0xff, 0x37, 0x07, 0xf5, 0xf4, 0xfe,
	0xa0, 0x6d, 0x9d, 0xf3, 0x45, 0xa0, 0xe6, 0xb6, 0x0b, 0x68, 0x5b, 0xf8, 0x8d, 0xca, 0x11, 0xf5,
	0x47, 0x06, 0xd1, 0xcc, 0x2a, 0x47, 0x54, 0xdf, 0xe8, 0x99, 0x53, 0xae, 0xc7, 0x54, 0xb6, 0x03,
	0xa5, 0xc0, 0x9b, 0xfb, 0x13, 0x4e, 0x2e, 0xb4, 0x99, 0xd5, 0xd8, 0x21, 0x49, 0x74, 0xc9, 0x90,
	0x26, 0x2e, 0xce, 0x07, 0x34, 0xf1, 0x4d, 0x28, 0xcf, 0x5d, 0xfb, 0x1f, 0x71, 0xc6, 0xc2, 0xed,
	0x94, 0xb0, 0xd8, 0xb5, 0xd8, 0x03, 0xa8, 0x50, 0x2b, 0x28, 0x11, 0xde, 0xa7, 0x4c, 0xe5, 0xee,
	0x4a, 0xd7, 0xd5, 0xfe, 0x97, 0x02, 0xb4, 0x52, 0xfa, 0xbe, 0x7f, 0x66, 0xba, 0xa7, 0xfc, 0x96,
	0xee, 0xe6, 0x7b, 0x50, 0x02, 0xee, 0x70, 0xda, 0x76, 0x43, 0x9a, 0x55, 0x81, 0x66, 0xb4, 0x95,
	0x99, 0x51, 0xc4, 0x91, 0xa6, 0xb5, 0x1e, 0x64, 0x01, 0xd4, 0xc1, 0x78, 0x27, 0x93, 0xd3, 0x30,
	0xde, 0xdd, 0x1f, 0xf8, 0x82, 0x6d, 0x40, 0xc9, 0xe7, 0x66, 0xe0, 0xb9, 0xd1, 0xac, 0x45, 0x09,
	0xbd, 0x9b, 0xf8, 0xc2, 0x69, 0x8b, 0x73, 0xa7, 0x22, 0x80, 0xae, 0xc5, 0x46, 0xd0, 0x10, 0x76,
	0x1f, 0x0d, 0x4e, 0x78, 0x9e, 0x2f, 0xaf, 0xb0, 0x79, 0xb1, 0x06, 0xd2, 0x65, 0x08, 0x48, 0x73,
	0x43, 0x7f, 0xa1, 0xd7, 0xa7, 0x29, 0xe8, 0xe1, 0xdf, 0x42, 0xeb, 0x12, 0x25, 0x3a, 0x09, 0xc4,
	0x71, 0x41, 0x27, 0xc1, 0x2b, 0x28, 0x5e, 0x98, 0xce, 0x5c, 0xac, 0xfa, 0x35, 0x2b, 0x22, 0x98,
	0xbf, 0xca, 0x7f, 0x9d, 0x6b, 0xff, 0x57, 0x0e, 0xaa, 0x34, 0xa6, 0x23, 0x3b, 0xb8, 0xce, 0xfd,
	0x3f, 0x83, 0x12, 0x47, 0x6a, 0xa0, 0xe6, 0x69, 0x62, 0xad, 0x4b, 0x13, 0xd3, 0x25, 0x81, 0xed,
	0x42, 0xd5, 0x9b, 0x87, 0xbe, 0x7d, 0x7a, 0x16, 0x46, 0x21, 0xc1, 0xbd, 0x34, 0xbb, 0x2f, 0x85,
	0x7a, 0x42, 0x63, 0xbf, 0x85, 0x56, 0xe2, 0x8b, 0x0d, 0x32, 0x8b, 0xe8, 0x04, 0xcb, 0xf4, 0xd4,
	0xb5, 0x8e, 0xcd, 0x99, 0xae, 0x24, 0xdc, 0x2e, 0x51, 0xdb, 0x0e, 0xac, 0xa7, 0x8e, 0x84, 0x1b,
	0xcc, 0xe7, 0x5b, 0xa8, 0xa7, 0x8e, 0x8d, 0x68, 0x56, 0x57, 0x9e, 0x31, 0x19, 0x72, 0xfb, 0x1f,
	0xa0, 0x1e, 0x4d, 0xe2, 0x06, 0x5d, 0x65, 0xd6, 0x23, 0x7f, 0xa3, 0xf5, 0x68, 0x7f, 0x0a, 0x70,
	0x62, 0xbb, 0xe1, 0xeb, 0x5d, 0x6a, 0x5f, 0x81, 0x82, 0x6d, 0x09, 0x77, 0xd0, 0xd0, 0xf1, 0xb3,
	0xfd, 0x03, 0x40, 0xe2, 0xdf, 0x12, 0xb7, 0x92, 0x4b, 0xb9, 0x15, 0xf6, 0x73, 0x58, 0x47, 0x9d,
	0xf6, 0x8c, 0xf0, 0x6c, 0x3e, 0x1d, 0xbb, 0xa6, 0xed, 0x48, 0xab, 0x6c, 0x12, 0x3c, 0x8a, 0xd0,
	0xf6, 0xff, 0xe4, 0xa1, 0x24, 0xd4, 0xec, 0x46, 0x91, 0x88, 0x0a, 0xe5, 0x99, 0x6f, 0x4f, 0x4d,
	0x7f, 0x41, 0x16, 0x58, 0xd1, 0xa3, 0x22, 0x5a, 0x8e, 0x8c, 0x04, 0xd7, 0xc8, 0x73, 0x45, 0x41,
	0x5f, 0x14, 0xa9, 0x14, 0x53, 0xd1, 0xe8, 0x57, 0x00, 0xb1, 0x6d, 0x06, 0x6a, 0x89, 0x96, 0xe5,
	0xfe, 0x4a, 0xc5, 0xd5, 0x53, 0x44, 0x0a, 0x31, 0xa6, 0x17, 0x86, 0xcf, 0x4f, 0xf9, 0x07, 0x72,
	0x69, 0x55, 0xbd, 0x12, 0x4c, 0x2f, 0x74, 0x2c, 0xb3, 0x47, 0x00, 0x28, 0xfc, 0x9d, 0xcd, 0x1d,
	0x2b, 0x90, 0x21, 0x2a, 0xd2, 0xbf, 0x27, 0x80, 0x3d, 0x87, 0x96, 0x39, 0x09, 0xd1, 0x4d, 0xa7,
	0x7a, 0xae, 0xd2, 0x5c, 0x15, 0x21, 0x18, 0x26, 0x1d, 0x31, 0x19, 0x4b, 0xe2, 0x31, 0xb8, 0x26,
	0x83, 0xc6, 0x74, 0x44, 0x0a, 0x57, 0x45, 0xa4, 0xb5, 0x54, 0x44, 0xda, 0xfe, 0x63, 0x01, 0xaa,
	0x71, 0xa3, 0xd7, 0xe8, 0xc9, 0xaa, 0xb5, 0x7e, 0x00, 0x15, 0x5a, 0xc3, 0x94, 0xa7, 0xa5, 0xb2,
	0x70, 0xc2, 0x64, 0x70, 0x86, 0xf4, 0xd9, 0x0d, 0xbd, 0x4c, 0xe5, 0xae, 0x85, 0x8b, 0x24, 0x9d,
	0x91, 0x74, 0xdd, 0x0d, 0xbd, 0x22, 0x00, 0xe1, 0xa1, 0x69, 0x33, 0x4a, 0xa9, 0xcd, 0xd8, 0x81,
	0x56, 0x30, 0xe3, 0x13, 0xdb, 0x74, 0x8c, 0x31, 0x0f, 0x0d, 0xe1, 0x4c, 0xc4, 0xea, 0xae, 0x4b,
	0xc1, 0x1e, 0x0f, 0xdf, 0x22, 0x8c, 0x8d, 0x8b, 0xd8, 0x11, 0x1b, 0xaf, 0xc8, 0x55, 0x20, 0xa0,
	0x4b, 0x47, 0x46, 0xc8, 0xcd, 0x29, 0x8a, 0xc4, 0xc2, 0x96, 0xb0, 0x28, 0x7a, 0xf5, 0x2c, 0x4b,
	0x84, 0x42, 0x39, 0x9d, 0xbe, 0xd9, 0x36, 0x9d, 0xaa, 0xe3, 0xe8, 0x38, 0xae, 0x91, 0x28, 0x0d,
	0xd1, 0x44, 0x6c, 0xf2, 0xf7, 0xe7, 0x9c, 0x4e, 0xdd, 0x9c, 0x5e, 0x99, 0xda, 0xe8, 0xca, 0xce,
	0xb9, 0x98, 0xe5, 0x07, 0x29, 0x6c, 0x48, 0xa1, 0xf9, 0x41, 0x08, 0x9f, 0x40, 0x7d, 0x6c, 0x4e,
	0xce, 0x31, 0x24, 0xa2, 0x7e, 0x15, 0xd1, 0xb8, 0xc4, 0xfa, 0xd8, 0xfd, 0xeb, 0x38, 0x3e, 0x6b,
	0x5e, 0xef, 0x36, 0xa3, 0x18, 0x6d, 0xf9, 0xfc, 0x58, 0xbf, 0x74, 0x7e, 0xb4, 0xff, 0xb0, 0x06,
	0x95, 0xc8, 0xa6, 0xff, 0x0c, 0x41, 0xb5, 0x74, 0xf7, 0xcd, 0x24, 0xf0, 0xff, 0x68, 0x98, 0xbd,
	0x09, 0x65, 0xee, 0x5a, 0x24, 0x2a, 0x92, 0xa8, 0x84, 0xc5, 0x74, 0xfc, 0x5d, 0xba, 0x6d, 0xfc,
	0x5d, 0xbe, 0x45, 0xfc, 0xfd, 0x9b, 0x8c, 0x59, 0x8b, 0x28, 0xf9, 0xd1, 0x2a, 0x6f, 0xb7, 0xda,
	0xbc, 0x6f, 0x1d, 0x33, 0x3f, 0x86, 0xda, 0xef, 0x6c, 0xd7, 0x0e, 0xce, 0x38, 0x4d, 0xb9, 0x46,
	0x53, 0x86, 0x08, 0xea, 0x84, 0x59, 0x5b, 0xa8, 0x2f, 0xd9, 0xc2, 0xe5, 0xd0, 0x79, 0xfd, 0x76,
	0xa1, 0xf3, 0x13, 0x90, 0x07, 0xb6, 0x21, 0x8c, 0xbf, 0x21, 0x2e, 0x0d, 0x02, 0x3b, 0xa4, 0x4b,
	0xe9, 0xd2, 0x8d, 0xa4, 0x72, 0xe3, 0x1b, 0x49, 0xfb, 0x3f, 0x0a, 0xd0, 0xba, 0xb4, 0x5c, 0x7f,
	0x9a, 0x13, 0x89, 0x3d, 0x45, 0x21, 0xeb, 0x29, 0x7e, 0x02, 0x8d, 0xf4, 0xb9, 0x1b, 0x79, 0x8b,
	0x7a, 0xea, 0x80, 0x4d, 0x6c, 0xb7, 0x74, 0xb5, 0xed, 0x96, 0xaf, 0xb1, 0xdd, 0xca, 0xc7, 0x6c,
	0xb7, 0xba, 0x64, 0xbb, 0xaf, 0x97, 0x94, 0xe0, 0x46, 0x86, 0xb9, 0xd2, 0x85, 0xd5, 0x57, 0xbb,
	0xb0, 0x65, 0x23, 0xae, 0x5d, 0x0e, 0x02, 0x55, 0x28, 0x7b, 0xf3, 0x70, 0xe2, 0x4d, 0xc5, 0x9e,
	0x56, 0xf5, 0xa8, 0x98, 0x55, 0xa8, 0xb5, 0xac, 0x42, 0xb5, 0xff, 0x70, 0x17, 0x1a, 0x99, 0x7b,
	0xda, 0x35, 0xdb, 0xf5, 0x08, 0x40, 0x6c, 0x0d, 0x42, 0x72, 0xd3, 0xaa, 0x84, 0xe0, 0x7d, 0x8b,
	0xbd, 0x80, 0xbb, 0x89, 0xd8, 0xe0, 0x1f, 0x42, 0xee, 0x5a, 0xdc, 0x92, 0xee, 0xa1, 0x15, 0xf3,
	0x34, 0x29, 0xc0, 0x89, 0x09, 0xbe, 0x5c, 0x3f, 0x19, 0xdd, 0xf2, 0xc4, 0x70, 0xb0, 0xc7, 0x71,
	0x12, 0xa5, 0x8a, 0x13, 0xb9, 0x3a, 0x8e, 0x22, 0xcc, 0xe4, 0x72, 0x87, 0x27, 0x72, 0x31, 0xba,
	0xdc, 0x3d, 0x02, 0x38, 0x35, 0xa7, 0xdc, 0x10, 0xa2, 0x32, 0x89, 0xaa, 0x88, 0x0c, 0x49, 0x8c,
	0x5a, 0xe4, 0x70, 0xd3, 0xe7, 0x96, 0x64, 0x54, 0x88, 0x51, 0x97, 0xa0, 0x20, 0xfd, 0x1a, 0x3d,
	0x43, 0x28, 0x08, 0x2b, 0x3d, 0x43, 0x66, 0xdd, 0x5e, 0x0c, 0x79, 0xa8, 0x57, 0x03, 0x1e, 0x52,
	0x65, 0xf2, 0xbb, 0x13, 0xcf, 0x77, 0xd1, 0x4e, 0xf1, 0xbe, 0x48, 0x9a, 0x51, 0x44, 0x73, 0x21,
	0xac, 0xf3, 0xde, 0x5c, 0xa4, 0x29, 0x78, 0xeb, 0xa4, 0x5d, 0x4d, 0x28, 0x6f, 0x70, 0xef, 0x7e,
	0x0a, 0x4d, 0x1c, 0xe4, 0xc4, 0xf4, 0x2d, 0xd9, 0x4e, 0x9d, 0x48, 0x75, 0x9f, 0x5b, 0xfb, 0x08,
	0x52, 0x43, 0x19, 0xd6, 0x59, 0xa4, 0x02, 0x29, 0x16, 0xb5, 0xb5, 0x03, 0xad, 0x05, 0x77, 0x1c,
	0xef, 0x7d, 0xba, 0xb9, 0x26, 0x11, 0xd7, 0x85, 0x20, 0x69, 0x71, 0x99, 0x4b, 0x8d, 0xae, 0x5f,
	0xe2, 0x52, 0xbb, 0xaf, 0xe0, 0xbe, 0xe4, 0x2e, 0x0d, 0x55, 0x21, 0x3e, 0x13, 0x42, 0x3d, 0x3d,
	0xe0, 0x55, 0x55, 0xa8, 0x8b, 0xd6, 0xaa, 0x2a, 0xd4, 0xcb, 0x06, 0x94, 0x02, 0xee, 0x5f, 0x70,
	0x9f, 0x2e, 0xd7, 0x45, 0x5d, 0x96, 0x30, 0xc4, 0x09, 0x6d, 0x3e, 0xf6, 0xb9, 0x79, 0x4e, 0x97,
	0xd4, 0x8a, 0x1e, 0x97, 0xc5, 0x36, 0x7b, 0x93, 0x73, 0x23, 0x08, 0xbd, 0xd9, 0x8c, 0x5b, 0xea,
	0x3d, 0xb1, 0x2c, 0x04, 0x0e, 0x05, 0x86, 0x37, 0x61, 0x9f, 0x4f, 0x4d, 0xdb, 0xb5, 0xdd, 0x53,
	0xa1, 0xd5, 0xf7, 0x49, 0xc7, 0x1a, 0x31, 0x4a, 0x9a, 0xfd, 0x4b, 0x50, 0xb3, 0x34, 0xc3, 0x76,
	0x8d, 0x19, 0xf7, 0x6d, 0xcf, 0x52, 0x37, 0xa8, 0xc2, 0xfd, 0x4c, 0x85, 0xae, 0x3b, 0x20, 0x21,
	0xee, 0x72, 0x30, 0x0f, 0x66, 0xdc, 0xb5, 0xc4, 0x14, 0x37, 0xc5, 0x2e, 0x4b, 0x8c, 0xe6, 0x96,
	0xa2, 0xd0, 0xc2, 0xa9, 0x19, 0x0a, 0xad, 0xd8, 0x43, 0xa8, 0xf0, 0x0f, 0x33, 0x6e, 0xd9, 0x21,
	0x57, 0x1f, 0x90, 0x38, 0x2e, 0xe3, 0x91, 0x42, 0x69, 0x8a, 0xb1, 0x19, 0x86, 0xdc, 0xa7, 0x44,
	0x40, 0x51, 0x07, 0x84, 0xf6, 0x08, 0x41, 0x02, 0xa5, 0x3a, 0x24, 0x61, 0x4b, 0x10, 0x10, 0x92,
	0x84, 0x7b, 0x50, 0x1c, 0x9b, 0x8e, 0x13, 0xa8, 0x9f, 0x90, 0x48, 0x14, 0x04, 0x1a, 0xf0, 0x40,
	0x7d, 0x24, 0xa2, 0x74, 0x2a, 0xa0, 0xa3, 0x09, 0x42, 0xdf, 0x3e, 0xe7, 0x81, 0xfa, 0x29, 0xb1,
	0xa3, 0x22, 0xb9, 0xdd, 0x79, 0x18, 0xa8, 0x8f, 0x09, 0xa6, 0x6f, 0xf6, 0x29, 0xc0, 0xcc, 0x0b,
	0x02, 0x1e, 0x04, 0x78, 0x30, 0x6f, 0x8b, 0x9e, 0x13, 0x84, 0x22, 0x54, 0x2f, 0x10, 0xc7, 0xf6,
	0x13, 0x31, 0xaf, 0xa8, 0x8c, 0x81, 0x44, 0xe8, 0x2f, 0xd4, 0x36, 0xc1, 0xf8, 0x89, 0x23, 0x5a,
	0xa0, 0x46, 0xa8, 0x3f, 0x11, 0xe3, 0xa4, 0x42, 0x76, 0x07, 0x7d, 0x6e, 0x05, 0xea, 0x4f, 0x49,
	0x9c, 0xec, 0xa0, 0xce, 0x2d, 0x9a, 0xce, 0x85, 0x1d, 0xd8, 0xa1, 0xfa, 0x99, 0xa8, 0x4c, 0x05,
	0xf4, 0x8e, 0x0e, 0x3f, 0x95, 0x6e, 0xe0, 0x67, 0x62, 0x04, 0x0e, 0x3f, 0x15, 0x2e, 0xe0, 0x1e,
	0x14, 0xc3, 0x33, 0xdf, 0x7b, 0xaf, 0xfe, 0x5c, 0x54, 0xa1, 0x02, 0x7b, 0x09, 0xf7, 0x92, 0xfe,
	0xc6, 0xde, 0x7b, 0x47, 0xea, 0xfb, 0x53, 0xa1, 0xbc, 0xb1, 0x6c, 0x0f, 0x45, 0xb4, 0x7b, 0x2b,
	0x6a, 0x90, 0x2e, 0x3c, 0x5b, 0x55, 0x83, 0x54, 0xe2, 0x31, 0xd4, 0x26, 0x73, 0xdf, 0x47, 0xd7,
	0xc8, 0x5d, 0x4b, 0xdd, 0x11, 0x0b, 0x27, 0x21, 0xcd, 0xb5, 0x70, 0xe1, 0x2c, 0xee, 0xd8, 0x17,
	0xdc, 0x5f, 0xa8, 0xcf, 0xc5, 0xb0, 0xa3, 0x32, 0x5e, 0xa4, 0x2c, 0x3b, 0x98, 0xda, 0x41, 0x60,
	0x46, 0x63, 0xfb, 0x9c, 0x28, 0xcd, 0x04, 0xa6, 0x71, 0x65, 0x89, 0x34, 0xa4, 0x2f, 0x96, 0x89,
	0x34, 0x1c, 0xdc, 0x5a, 0xb4, 0xbd, 0x17, 0x72, 0x6b, 0xd1, 0xf2, 0x54, 0x28, 0xdb, 0x2e, 0x8e,
	0x3a, 0x50, 0xbf, 0x14, 0x8a, 0x20, 0x8b, 0xe8, 0x3d, 0x66, 0xdc, 0x35, 0x9d, 0x70, 0x61, 0xf8,
	0x73, 0x57, 0x36, 0xfc, 0x52, 0x78, 0x0f, 0x29, 0xd0, 0xe7, 0x6e, 0xec, 0x95, 0x32, 0x5c, 0x1a,
	0xed, 0xab, 0x4b, 0x5c, 0x1a, 0xee, 0x16, 0x54, 0x49, 0x8f, 0x91, 0xa8, 0x7e, 0x2d, 0x26, 0x8d,
	0x00, 0x12, 0x50, 0x48, 0x56, 0x40, 0xc2, 0x6f, 0x84, 0x10, 0x01, 0x12, 0x46, 0xc9, 0xbe, 0xf7,
	0x94, 0xfb, 0x0e, 0xd4, 0x5f, 0x09, 0x0b, 0x43, 0xec, 0x9d, 0x80, 0xe2, 0x64, 0x5f, 0x44, 0xf9,
	0x56, 0x50, 0x10, 0x8b, 0x28, 0x5b, 0x50, 0x0d, 0xbd, 0x20, 0x10, 0x5e, 0xe2, 0xd7, 0x22, 0x8e,
	0x45, 0x80, 0x1c, 0xc4, 0xe7, 0xc0, 0x28, 0xa6, 0x25, 0x2b, 0x23, 0x27, 0xc1, 0xcd, 0xa9, 0xfa,
	0x1b, 0x71, 0x5b, 0x23, 0xc9, 0x9e, 0x10, 0x8c, 0xb8, 0x39, 0x45, 0x8d, 0x88, 0xf6, 0x37, 0xc3,
	0xff, 0x2d, 0xf1, 0x99, 0x94, 0xa5, 0x6b, 0x3c, 0x86, 0x1a, 0x75, 0xfe, 0xde, 0x76, 0x5d, 0xee,
	0xab, 0xdf, 0x11, 0x11, 0x10, 0x7a, 0x47, 0x08, 0x3b, 0x04, 0x20, 0x2d, 0x36, 0x1c, 0x3b, 0x08,
	0xd5, 0x5d, 0x3a, 0xaf, 0x9e, 0x7e, 0xe4, 0xbc, 0x9a, 0x4f, 0xf1, 0x0e, 0x8c, 0xf7, 0x75, 0xb4,
	0x90, 0x2a, 0xd5, 0xa5, 0xdb, 0xbb, 0x06, 0x55, 0x74, 0xc9, 0xa2, 0x9d, 0xd7, 0xb7, 0x6c, 0xa7,
	0x82, 0x55, 0xa9, 0x99, 0xcf, 0xa0, 0x39, 0xe6, 0x21, 0xba, 0x5e, 0x43, 0xa6, 0xa7, 0x7e, 0x21,
	0x1c, 0xab, 0x44, 0x75, 0x91, 0xa5, 0x12, 0xe7, 0x3b, 0xd1, 0x6c, 0x4b, 0xfd, 0x8a, 0xa6, 0x55,
	0x95, 0x48, 0xd7, 0x7a, 0xb8, 0x05, 0x85, 0x21, 0x0f, 0x93, 0x63, 0x3e, 0x97, 0x3a, 0xe6, 0x1f,
	0xfe, 0x3e, 0x0f, 0xcd, 0x6c, 0xff, 0x18, 0xbe, 0x4c, 0x4c, 0x77, 0xc2, 0x1d, 0x87, 0x5b, 0x32,
	0xbd, 0x90, 0x00, 0x94, 0x17, 0x15, 0x77, 0xc1, 0x54, 0xd0, 0x09, 0x02, 0xea, 0xc9, 0x17, 0x81,
	0xe4, 0xb2, 0x58, 0x58, 0xba, 0x2c, 0xe2, 0xfe, 0xe3, 0x65, 0x91, 0xea, 0x8a, 0x50, 0xa5, 0x82,
	0x00, 0xd5, 0x4c, 0xdd, 0x24, 0x8b, 0xcb, 0x37, 0x49, 0x52, 0x98, 0xe8, 0xfe, 0x8a, 0xca, 0xf2,
	0x08, 0xc8, 0xfd, 0xc6, 0xf1, 0x09, 0xaa, 0x1a, 0xe9, 0xf6, 0x30, 0x0a, 0x5f, 0x48, 0x17, 0xa3,
	0xe0, 0x84, 0xc4, 0x88, 0x08, 0x71, 0x74, 0x23, 0xae, 0x26, 0x37, 0xe2, 0xf6, 0xb7, 0x32, 0x35,
	0x36, 0xf2, 0x39, 0x86, 0x61, 0x25, 0xb1, 0x5f, 0xb4, 0x5c, 0x4b, 0xd1, 0xfb, 0x90, 0x3e, 0x91,
	0xa7, 0x4b, 0x56, 0xfb, 0x9f, 0x73, 0x00, 0x09, 0x7c, 0xa3, 0xa4, 0xca, 0x77, 0x4b, 0xf9, 0x28,
	0x91, 0x37, 0xdb, 0xba, 0xe2, 0xce, 0x45, 0xbd, 0x65, 0x2a, 0xac, 0x78, 0xdd, 0xfb, 0xcf, 0x42,
	0x26, 0x29, 0x76, 0xe3, 0xa1, 0xc8, 0x96, 0x1a, 0xc9, 0x85, 0x33, 0xce, 0x2f, 0xd5, 0xd2, 0xf9,
	0xa5, 0xf8, 0x42, 0x59, 0xb8, 0xf6, 0x42, 0xf9, 0x3c, 0x93, 0x18, 0xba, 0xf6, 0x89, 0x30, 0x4a,
	0x35, 0x16, 0x6f, 0x95, 0x6a, 0x2c, 0xdd, 0x2c, 0xd5, 0xf8, 0x18, 0x44, 0x3c, 0x6c, 0x4c, 0xbc,
	0xb9, 0x1b, 0xca, 0x0c, 0x86, 0x88, 0xc2, 0xf7, 0x11, 0x41, 0x43, 0x8b, 0xd8, 0x92, 0x23, 0x52,
	0x19, 0x8d, 0x08, 0x15, 0xb4, 0x1b, 0x25, 0x83, 0xea, 0xe9, 0xe7, 0xc9, 0xf8, 0x6d, 0xa1, 0x99,
	0x7e, 0x5b, 0x88, 0x4d, 0xb1, 0x9c, 0x7a, 0x4e, 0x69, 0x9f, 0x00, 0x1c, 0xd9, 0x17, 0x5c, 0x13,
	0xf3, 0xfc, 0x73, 0xe5, 0x66, 0xdb, 0x36, 0x54, 0x4e, 0x66, 0x13, 0x6f, 0x8a, 0xa6, 0x9d, 0x54,
	0xcb, 0xdd, 0x6a, 0x9d, 0x6f, 0x98, 0xc2, 0xfc, 0xef, 0x02, 0x14, 0xf6, 0xf8, 0x75, 0x19, 0x90,
	0x8c, 0x83, 0xc8, 0x2f, 0x39, 0x08, 0xbc, 0xa7, 0x09, 0x21, 0x9e, 0xe8, 0x8e, 0x54, 0x49, 0xe9,
	0x72, 0x34, 0x84, 0xb0, 0xfe, 0xc4, 0xb1, 0x33, 0x97, 0xdb, 0x8a, 0x00, 0xba, 0x16, 0x2d, 0x2d,
	0xdd, 0x30, 0xd7, 0xe8, 0x86, 0x29, 0x0a, 0x4b, 0x99, 0xc7, 0xe2, 0x4d, 0x33, 0x8f, 0x3d, 0xb8,
	0x1b, 0xab, 0xc5, 0xa5, 0xcc, 0xe5, 0x35, 0x29, 0x0e, 0xe6, 0x2d, 0x43, 0x32, 0x99, 0x28, 0x1f,
	0x74, 0x64, 0x22, 0x33, 0x7e, 0xb5, 0xd9, 0x80, 0x92, 0x29, 0x9e, 0xbe, 0x40, 0x3c, 0x41, 0x88,
	0x12, 0x45, 0xed, 0x8b, 0x20, 0xe4, 0x53, 0x7a, 0xe2, 0x6e, 0xe8, 0xb2, 0xc4, 0x9e, 0x81, 0x12,
	0x5f, 0x68, 0x67, 0xe6, 0xc2, 0xf1, 0x4c, 0x91, 0x9a, 0xab, 0xeb, 0xeb, 0x11, 0x3e, 0x10, 0x30,
	0xfb, 0x19, 0xc4, 0x10, 0x5d, 0x94, 0x65, 0xa6, 0xae, 0x9a, 0x64, 0x36, 0xf6, 0xa2, 0x34, 0xe1,
	0x7c, 0x1e, 0xbf, 0x75, 0xd1, 0x77, 0xfb, 0x19, 0x14, 0x29, 0x01, 0x7f, 0xc9, 0x8d, 0x48, 0x97,
	0x91, 0xa7, 0xac, 0x2f, 0x39, 0x9f, 0x7f, 0xca, 0xc1, 0xe3, 0xe3, 0xb9, 0x13, 0xda, 0x33, 0x87,
	0x2f, 0x65, 0xe6, 0xe3, 0xab, 0xf1, 0x95, 0xad, 0xa4, 0x9f, 0xb8, 0x2f, 0xe5, 0xc3, 0x62, 0xb7,
	0xb3, 0x76, 0x9d, 0xdb, 0x69, 0xff, 0x1d, 0xa8, 0x57, 0x8c, 0x21, 0x60, 0x1d, 0x28, 0xe2, 0x81,
	0x1c, 0x29, 0xff, 0xf3, 0xcc, 0x4b, 0xee, 0xc7, 0x07, 0xae, 0x8b, 0x9a, 0xed, 0x7f, 0xcb, 0xc1,
	0xe6, 0x15, 0x54, 0x76, 0x98, 0x7a, 0xcb, 0xcd, 0xd1, 0x40, 0x6f, 0xd5, 0x43, 0xfa, 0x75, 0x77,
	0xd5, 0x43, 0xc5, 0xcd, 0x0f, 0x86, 0x9d, 0x5f, 0xc0, 0xc6, 0xea, 0xbf, 0x17, 0x58, 0x05, 0xd6,
	0x7a, 0xfd, 0x9e, 0xa6, 0xdc, 0x61, 0x65, 0x28, 0x8c, 0x76, 0x5f, 0x2a, 0x39, 0xfc, 0xe8, 0x1f,
	0x74, 0x95, 0xfc, 0xce, 0x21, 0x34, 0x32, 0x4f, 0x8a, 0xac, 0x05, 0x8d, 0x3d, 0x6d, 0xa4, 0x77,
	0x0e, 0x3a, 0xba, 0xd1, 0xeb, 0x1c, 0x63, 0xad, 0x16, 0x34, 0x06, 0xdd, 0x5e, 0xaf, 0xb3, 0x7f,
	0xa4, 0x09, 0x28, 0xc7, 0x14, 0xa8, 0x77, 0xfb, 0xc3, 0x41, 0x5f, 0x1f, 0x09, 0x24, 0xbf, 0xb3,
	0x0d, 0x25, 0xf1, 0xcc, 0x88, 0xdd, 0x1d, 0x75, 0xdf, 0x62, 0xc5, 0x3a, 0x54, 0x06, 0xba, 0x76,
	0xdc, 0x19, 0xed, 0xbf, 0x51, 0x72, 0x3b, 0xff, 0x9a, 0x83, 0x5a, 0x2a, 0xb5, 0xc7, 0xd6, 0xa1,
	0x36, 0xd0, 0x35, 0x03, 0xfb, 0xea, 0xf6, 0x0e, 0x95, 0x3b, 0xac, 0x06, 0xe5, 0xa8, 0x40, 0x3d,
	0xc8, 0x82, 0x41, 0xad, 0xe5, 0xb1, 0x35, 0x5d, 0x1b, 0x9e, 0x1c, 0x8d, 0xb4, 0x03, 0xa5, 0x80,
	0xb5, 0xbb, 0xbd, 0x91, 0xa6, 0xeb, 0x27, 0x03, 0x04, 0xd6, 0xd8, 0x3d, 0x50, 0x3a, 0xef, 0x3a,
	0xdd, 0x11, 0xd6, 0x10, 0xbc, 0xa1, 0x52, 0xc4, 0x66, 0x06, 0xfd, 0xe1, 0x28, 0xee, 0xa5, 0xc4,
	0xee, 0xc2, 0xba, 0xf6, 0x56, 0xeb, 0x8d, 0x8c, 0xfd, 0x4e, 0x6f, 0x5f, 0x3b, 0x3a, 0xd2, 0x0e,
	0x94, 0xf2, 0x8e, 0x01, 0xeb, 0x4b, 0x09, 0x27, 0xec, 0xee, 0xa0, 0x3b, 0xec, 0xec, 0x21, 0x81,
	0xc6, 0xa6, 0xf5, 0x44, 0x21, 0xc7, 0x36, 0x80, 0x8d, 0xb4, 0xe3, 0x41, 0x5f, 0xef, 0xe8, 0x7f,
	0x63, 0xc4, 0x24, 0x39, 0xc2, 0xc1, 0x51, 0x67, 0x9f, 0x46, 0x58, 0x83, 0xb2, 0x7e, 0xd2, 0xeb,
	0x61, 0xaf, 0x6b, 0x3b, 0x7f, 0xcc, 0x41, 0x55, 0xbc, 0xbd, 0x8c, 0xcc, 0x53, 0x14, 0xf5, 0xfa,
	0xc6, 0xa8, 0x73, 0x38, 0x54, 0xee, 0xb0, 0x47, 0xf0, 0xe0, 0x5d, 0x77, 0xf4, 0xa6, 0x7f, 0x32,
	0x32, 0x3a, 0x47, 0x23, 0x4d, 0xef, 0x75, 0x46, 0xdd, 0xb7, 0x9a, 0x71, 0xd4, 0xed, 0x69, 0x43,
	0x25, 0x87, 0x13, 0x3d, 0xe9, 0xed, 0xf7, 0x8f, 0x8e, 0x3a, 0x83, 0x21, 0xf5, 0xd2, 0x82, 0x46,
	0xbf, 0x67, 0x74, 0x86, 0xdd, 0x4e, 0xcf, 0x18, 0x74, 0x0e, 0x35, 0x65, 0x8d, 0x6d, 0xc2, 0xdd,
	0x7e, 0xcf, 0xd8, 0xef, 0x1f, 0x0f, 0xb4, 0x51, 0x77, 0xd4, 0xed, 0x4b, 0x41, 0x85, 0x31, 0x68,
	0xf6, 0x7b, 0xb4, 0x80, 0xc6, 0xbb, 0xee, 0xc1, 0xa1, 0x36, 0x52, 0x14, 0xb6, 0x05, 0x9b, 0x48,
	0xe8, 0x0f, 0x4e, 0x8e, 0x3a, 0xba, 0x21, 0xd6, 0x42, 0x0a, 0xb7, 0xd9, 0x13, 0x78, 0x94, 0x12,
	0xa6, 0x5b, 0x94, 0x94, 0xbf, 0x64, 0x1b, 0xd0, 0xc2, 0xb1, 0x19, 0xdf, 0x77, 0xff, 0x5a, 0x3b,
	0x30, 0x3a, 0x23, 0xe3, 0x95, 0xf1, 0x95, 0xf2, 0x23, 0x0e, 0x14, 0x0e, 0x3b, 0xc7, 0xd1, 0xc0,
	0x7f, 0xcc, 0xef, 0xd8, 0xd0, 0xea, 0xa4, 0xde, 0xdc, 0xbf, 0x77, 0xcc, 0xd3, 0x40, 0x4c, 0xa7,
	0xf3, 0xb6, 0xd3, 0x3d, 0xc2, 0x55, 0x53, 0xee, 0xe0, 0x10, 0x69, 0x7c, 0x09, 0x96, 0xc3, 0xf9,
	0x0c, 0x47, 0xba, 0xd6, 0x39, 0xc6, 0xcd, 0x4c, 0x04, 0x79, 0x5c, 0xf9, 0xe1, 0x40, 0xdb, 0xef,
	0x76, 0x8e, 0x86, 0x29, 0x7c, 0x6d, 0xe7, 0xdf, 0x73, 0x50, 0x8d, 0x7f, 0xfd, 0x61, 0x00, 0x25,
	0xb1, 0xbc, 0xca, 0x1d, 0x56, 0x85, 0xe2, 0xbb, 0xfe, 0xb1, 0xd6, 0x13, 0x2a, 0xb3, 0xaf, 0x77,
	0xf7, 0x7f, 0xd0, 0x46, 0x86, 0xb0, 0x82, 0x14, 0x40, 0xd6, 0x80, 0x15, 0x0f, 0xfa, 0x27, 0xd4,
	0x24, 0x56, 0x3c, 0xc6, 0x19, 0x2a, 0x45, 0x84, 0xff, 0xea, 0xa4, 0xd7, 0xed, 0xeb, 0x4a, 0x13,
	0x2d, 0xe7, 0xe4, 0xd5, 0x5f, 0x28, 0x25, 0xf1, 0xf1, 0x4b, 0xa5, 0x2c, 0x3e, 0xbe, 0x56, 0x2a,
	0xe2, 0xe3, 0x1b, 0xa5, 0x4a, 0x1f, 0xbb, 0x2f, 0x15, 0x10, 0x1f, 0xaf, 0x94, 0x9a, 0xf8, 0xd8,
	0x55, 0xea, 0xe2, 0xe3, 0xb5, 0xd2, 0xd8, 0xfb, 0x04, 0x1e, 0x4e, 0xbc, 0xe9, 0x8b, 0xb1, 0x1d,
	0x9e, 0x9a, 0x53, 0xee, 0x98, 0xe3, 0x20, 0x65, 0xea, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x30,
	0xfb, 0xdc, 0xb2, 0x49, 0x26, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/resulting/resulting.proto

/*
Package resulting is a generated protocol buffer package.

It is generated from these files:
	sportsbook/resulting/resulting.proto

It has these top-level messages:
	Result
	Results
	Score
	Scores
*/
package resulting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultCommentKey int32

const (
	ResultCommentKey_PITCHER_CHANGE ResultCommentKey = 0
)

var ResultCommentKey_name = map[int32]string{
	0: "PITCHER_CHANGE",
}
var ResultCommentKey_value = map[string]int32{
	"PITCHER_CHANGE": 0,
}

func (x ResultCommentKey) String() string {
	return proto.EnumName(ResultCommentKey_name, int32(x))
}
func (ResultCommentKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SettlementFlags int32

const (
	SettlementFlags_NONE                SettlementFlags = 0
	SettlementFlags_APPROVAL_PENDING    SettlementFlags = 1
	SettlementFlags_APPROVED            SettlementFlags = 2
	SettlementFlags_DISAPPROVED         SettlementFlags = 4
	SettlementFlags_PITCHER_CHANGE_HOME SettlementFlags = 8
	SettlementFlags_PITCHER_CHANGE_AWAY SettlementFlags = 16
)

var SettlementFlags_name = map[int32]string{
	0:  "NONE",
	1:  "APPROVAL_PENDING",
	2:  "APPROVED",
	4:  "DISAPPROVED",
	8:  "PITCHER_CHANGE_HOME",
	16: "PITCHER_CHANGE_AWAY",
}
var SettlementFlags_value = map[string]int32{
	"NONE":                0,
	"APPROVAL_PENDING":    1,
	"APPROVED":            2,
	"DISAPPROVED":         4,
	"PITCHER_CHANGE_HOME": 8,
	"PITCHER_CHANGE_AWAY": 16,
}

func (x SettlementFlags) String() string {
	return proto.EnumName(SettlementFlags_name, int32(x))
}
func (SettlementFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Result struct {
	Timestamp       int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventId         uint32  `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32  `protobuf:"varint,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	SelectionType   string  `protobuf:"bytes,4,opt,name=selection_type,json=selectionType" json:"selection_type,omitempty"`
	SpecialBetValue string  `protobuf:"bytes,5,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Voidfactor      float64 `protobuf:"fixed64,6,opt,name=voidfactor" json:"voidfactor,omitempty"`
	Outcome         int32   `protobuf:"varint,7,opt,name=outcome" json:"outcome,omitempty"`
	Reason          string  `protobuf:"bytes,14,opt,name=reason" json:"reason,omitempty"`
	// live additions
	IsLive    bool   `protobuf:"varint,8,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	Status    string `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	StartTime int64  `protobuf:"varint,10,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   int64  `protobuf:"varint,11,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Flags     uint32 `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	// outrights
	IsOutright       bool   `protobuf:"varint,13,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
	ExternalId       string `protobuf:"bytes,15,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	ExternalProvider string `protobuf:"bytes,16,opt,name=external_provider,json=externalProvider" json:"external_provider,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Result) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Result) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Result) GetSelectionType() string {
	if m != nil {
		return m.SelectionType
	}
	return ""
}

func (m *Result) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *Result) GetVoidfactor() float64 {
	if m != nil {
		return m.Voidfactor
	}
	return 0
}

func (m *Result) GetOutcome() int32 {
	if m != nil {
		return m.Outcome
	}
	return 0
}

func (m *Result) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Result) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *Result) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Result) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Result) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Result) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Result) GetIsOutright() bool {
	if m != nil {
		return m.IsOutright
	}
	return false
}

func (m *Result) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Result) GetExternalProvider() string {
	if m != nil {
		return m.ExternalProvider
	}
	return ""
}

type Results struct {
	Entries []*Result `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Results) GetEntries() []*Result {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Score struct {
	Timestamp   int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventId     uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SportId     uint32 `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	ScoreType   string `protobuf:"bytes,4,opt,name=score_type,json=scoreType" json:"score_type,omitempty"`
	Home        int32  `protobuf:"varint,5,opt,name=home" json:"home,omitempty"`
	Away        int32  `protobuf:"varint,6,opt,name=away" json:"away,omitempty"`
	Flags       uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	DecidedByFa bool   `protobuf:"varint,8,opt,name=decided_by_fa,json=decidedByFa" json:"decided_by_fa,omitempty"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Score) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Score) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Score) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *Score) GetScoreType() string {
	if m != nil {
		return m.ScoreType
	}
	return ""
}

func (m *Score) GetHome() int32 {
	if m != nil {
		return m.Home
	}
	return 0
}

func (m *Score) GetAway() int32 {
	if m != nil {
		return m.Away
	}
	return 0
}

func (m *Score) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Score) GetDecidedByFa() bool {
	if m != nil {
		return m.DecidedByFa
	}
	return false
}

type Scores struct {
	Entries  []*Score     `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Provider api.Provider `protobuf:"varint,2,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Source   api.Source   `protobuf:"varint,3,opt,name=source,enum=api.Source" json:"source,omitempty"`
}

func (m *Scores) Reset()                    { *m = Scores{} }
func (m *Scores) String() string            { return proto.CompactTextString(m) }
func (*Scores) ProtoMessage()               {}
func (*Scores) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Scores) GetEntries() []*Score {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Scores) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *Scores) GetSource() api.Source {
	if m != nil {
		return m.Source
	}
	return api.Source_LIVE
}

func init() {
	proto.RegisterType((*Result)(nil), "resulting.Result")
	proto.RegisterType((*Results)(nil), "resulting.Results")
	proto.RegisterType((*Score)(nil), "resulting.Score")
	proto.RegisterType((*Scores)(nil), "resulting.Scores")
	proto.RegisterEnum("resulting.ResultCommentKey", ResultCommentKey_name, ResultCommentKey_value)
	proto.RegisterEnum("resulting.SettlementFlags", SettlementFlags_name, SettlementFlags_value)
}

func init() { proto.RegisterFile("sportsbook/resulting/resulting.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdd, 0x6e, 0xfa, 0x46,
	0x10, 0xc5, 0xe3, 0xf0, 0x61, 0x33, 0x04, 0x70, 0xb6, 0x51, 0xe3, 0xf4, 0x2b, 0x88, 0xa6, 0x11,
	0x25, 0x12, 0x91, 0x52, 0xa9, 0xf7, 0x24, 0x21, 0x09, 0x6a, 0x0a, 0xc8, 0x44, 0xa9, 0x7a, 0x65,
	0x2d, 0xf6, 0x84, 0xac, 0x62, 0x7b, 0x2d, 0xef, 0x42, 0xcb, 0x6d, 0xd5, 0xc7, 0xec, 0x5b, 0xf4,
	0x05, 0x2a, 0x8f, 0xc1, 0xd0, 0xaa, 0x57, 0xff, 0xbb, 0x9d, 0xdf, 0x39, 0x6b, 0x7b, 0xce, 0x8c,
	0x0c, 0x17, 0x2a, 0x91, 0xa9, 0x56, 0x73, 0x29, 0x3f, 0xae, 0x53, 0x54, 0xcb, 0x50, 0x8b, 0x78,
	0xb1, 0x3b, 0xf5, 0x93, 0x54, 0x6a, 0xc9, 0x6a, 0x05, 0xf8, 0xe2, 0x7c, 0xef, 0x02, 0x4f, 0xc4,
	0xf5, 0xae, 0xcc, 0xbd, 0x9d, 0xbf, 0x4b, 0x50, 0x75, 0xc9, 0xce, 0xbe, 0x82, 0x9a, 0x16, 0x11,
	0x2a, 0xcd, 0xa3, 0xc4, 0x31, 0xda, 0x46, 0xb7, 0xe4, 0xee, 0x00, 0x3b, 0x03, 0x0b, 0x57, 0x18,
	0x6b, 0x4f, 0x04, 0xce, 0x61, 0xdb, 0xe8, 0x36, 0x5c, 0x93, 0xea, 0x51, 0xc0, 0xbe, 0x84, 0x5a,
	0xc4, 0xd3, 0x0f, 0x24, 0xad, 0x44, 0x9a, 0x95, 0x83, 0x51, 0xc0, 0xbe, 0x83, 0xa6, 0xc2, 0x10,
	0x7d, 0x2d, 0x64, 0xec, 0xe9, 0x75, 0x82, 0x4e, 0xb9, 0x6d, 0x74, 0x6b, 0x6e, 0xa3, 0xa0, 0x2f,
	0xeb, 0x04, 0x59, 0x0f, 0x8e, 0x55, 0x82, 0xbe, 0xe0, 0xa1, 0x37, 0x47, 0xed, 0xad, 0x78, 0xb8,
	0x44, 0xa7, 0x42, 0xce, 0xd6, 0x46, 0xb8, 0x45, 0xfd, 0x9a, 0x61, 0xf6, 0x0d, 0xc0, 0x4a, 0x8a,
	0xe0, 0x8d, 0xfb, 0x5a, 0xa6, 0x4e, 0xb5, 0x6d, 0x74, 0x0d, 0x77, 0x8f, 0x30, 0x07, 0x4c, 0xb9,
	0xd4, 0xbe, 0x8c, 0xd0, 0x31, 0xdb, 0x46, 0xb7, 0xe2, 0x6e, 0x4b, 0xf6, 0x39, 0x54, 0x53, 0xe4,
	0x4a, 0xc6, 0x4e, 0x93, 0x1e, 0xbd, 0xa9, 0xd8, 0x29, 0x98, 0x42, 0x79, 0xa1, 0x58, 0xa1, 0x63,
	0xb5, 0x8d, 0xae, 0xe5, 0x56, 0x85, 0x7a, 0x16, 0x2b, 0xba, 0xa0, 0x34, 0xd7, 0x4b, 0xe5, 0xd4,
	0xf2, 0x0b, 0x79, 0xc5, 0xbe, 0x06, 0x50, 0x9a, 0xa7, 0xda, 0xcb, 0x02, 0x72, 0x20, 0x0f, 0x8b,
	0xc8, 0x8b, 0x88, 0x90, 0xc2, 0x8a, 0x83, 0x5c, 0xac, 0x93, 0x68, 0x62, 0x1c, 0x90, 0x74, 0x02,
	0x95, 0xb7, 0x90, 0x2f, 0x94, 0x73, 0x44, 0x41, 0xe5, 0x05, 0x3b, 0x87, 0xba, 0x50, 0x9e, 0x5c,
	0xea, 0x54, 0x2c, 0xde, 0xb5, 0xd3, 0xa0, 0x8f, 0x00, 0xa1, 0x26, 0x1b, 0x92, 0x19, 0xf0, 0x77,
	0x8d, 0x69, 0xcc, 0xc3, 0x2c, 0xe5, 0x16, 0x7d, 0x0d, 0x6c, 0xd1, 0x28, 0x60, 0x57, 0x70, 0x5c,
	0x18, 0x92, 0x54, 0xae, 0x44, 0x80, 0xa9, 0x63, 0x93, 0xcd, 0xde, 0x0a, 0xd3, 0x0d, 0xef, 0xfc,
	0x08, 0x66, 0x3e, 0x74, 0xc5, 0xae, 0xc0, 0xc4, 0x58, 0xa7, 0x02, 0x95, 0x63, 0xb4, 0x4b, 0xdd,
	0xfa, 0xcd, 0x71, 0x7f, 0xb7, 0x4f, 0xb9, 0xc9, 0xdd, 0x3a, 0x3a, 0x7f, 0x19, 0x50, 0x99, 0xf9,
	0x32, 0xc5, 0x4f, 0x5f, 0x96, 0x33, 0xb0, 0x68, 0x09, 0x77, 0xbb, 0x62, 0x52, 0x3d, 0x0a, 0x28,
	0xd4, 0xec, 0xe1, 0xfb, 0x6b, 0x52, 0x23, 0x42, 0x2b, 0xc2, 0xa0, 0xfc, 0x9e, 0xcd, 0xb4, 0x42,
	0x33, 0xa5, 0x73, 0xc6, 0xf8, 0x6f, 0x7c, 0x4d, 0x4b, 0x50, 0x71, 0xe9, 0xbc, 0x4b, 0xd8, 0xdc,
	0x4f, 0xb8, 0x03, 0x8d, 0x00, 0x7d, 0x11, 0x60, 0xe0, 0xcd, 0xd7, 0xde, 0x1b, 0xdf, 0x0c, 0xba,
	0xbe, 0x81, 0xb7, 0xeb, 0x07, 0xde, 0xf9, 0xd3, 0x80, 0x2a, 0xb5, 0xa7, 0x58, 0xef, 0xbf, 0xb1,
	0xd8, 0x7b, 0xb1, 0x90, 0xa7, 0x48, 0x85, 0x7d, 0x0f, 0x56, 0x91, 0x78, 0xd6, 0x6d, 0xf3, 0xa6,
	0xd1, 0xe7, 0x89, 0xe8, 0x6f, 0xe3, 0x76, 0x0b, 0x99, 0x7d, 0x0b, 0x55, 0x25, 0x97, 0xa9, 0x8f,
	0xd4, 0x7b, 0xf3, 0xa6, 0x4e, 0xc6, 0x19, 0x21, 0x77, 0x23, 0xf5, 0x2e, 0xc1, 0xce, 0x83, 0xbf,
	0x93, 0x51, 0x84, 0xb1, 0xfe, 0x09, 0xd7, 0x8c, 0x41, 0x73, 0x3a, 0x7a, 0xb9, 0x7b, 0x1a, 0xba,
	0xde, 0xdd, 0xd3, 0x60, 0xfc, 0x38, 0xb4, 0x0f, 0x7a, 0x7f, 0x18, 0xd0, 0x9a, 0xa1, 0xd6, 0x21,
	0x66, 0xae, 0x07, 0x6a, 0xd3, 0x82, 0xf2, 0x78, 0x32, 0x1e, 0xda, 0x07, 0xec, 0x04, 0xec, 0xc1,
	0x74, 0xea, 0x4e, 0x5e, 0x07, 0xcf, 0xde, 0x74, 0x38, 0xbe, 0x1f, 0x8d, 0x1f, 0x6d, 0x83, 0x1d,
	0x81, 0x95, 0xd3, 0xe1, 0xbd, 0x7d, 0xc8, 0x5a, 0x50, 0xbf, 0x1f, 0xcd, 0x0a, 0x50, 0x66, 0xa7,
	0xf0, 0xd9, 0xbf, 0x5f, 0xe3, 0x3d, 0x4d, 0x7e, 0x1e, 0xda, 0xd6, 0xff, 0x08, 0x83, 0x5f, 0x06,
	0xbf, 0xda, 0xf6, 0xed, 0x25, 0x5c, 0xf8, 0x32, 0xea, 0xcf, 0x85, 0x5e, 0xf0, 0x08, 0x43, 0x3e,
	0x57, 0xfd, 0xbd, 0x9f, 0x4c, 0x91, 0xd9, 0xbc, 0x4a, 0xff, 0x9b, 0x1f, 0xfe, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x87, 0x79, 0x4d, 0x7b, 0xc3, 0x04, 0x00, 0x00,
}

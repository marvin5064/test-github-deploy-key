// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/api/public/sportsbook.proto

/*
Package public is a generated protocol buffer package.

It is generated from these files:
	sportsbook/api/public/sportsbook.proto

It has these top-level messages:
	Competition
	Event
	Market
	Selection
	Outright
	OutrightSelection
	SportsTree
	SportsTreeEntity
	CompetitionTree
	EventList
	OutrightList
	CompetitionList
	SportList
	StreamResponse
	EventStream
*/
package public

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Competition struct {
	Id       uint32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key      string         `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	Groups   []*api.Generic `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Sport    *api.Generic   `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	Priority uint32         `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
}

func (m *Competition) Reset()                    { *m = Competition{} }
func (m *Competition) String() string            { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()               {}
func (*Competition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Competition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Competition) GetGroups() []*api.Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Competition) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Competition) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type Event struct {
	Timestamp   int64             `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id          uint32            `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StartsAt    int64             `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	Sport       *api.Generic      `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	Competition *Competition      `protobuf:"bytes,6,opt,name=competition" json:"competition,omitempty"`
	Competitors []*api.Competitor `protobuf:"bytes,7,rep,name=competitors" json:"competitors,omitempty"`
	OpenMarkets uint32            `protobuf:"varint,8,opt,name=open_markets,json=openMarkets" json:"open_markets,omitempty"`
	Markets     []*Market         `protobuf:"bytes,9,rep,name=markets" json:"markets,omitempty"`
	Status      api.EventStatus   `protobuf:"varint,10,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	// just strings of the surnames for now
	// we don't have any more info in the feed
	HomePitcher       string             `protobuf:"bytes,15,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
	AwayPitcher       string             `protobuf:"bytes,16,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	ParlayRestriction uint32             `protobuf:"varint,18,opt,name=parlay_restriction,json=parlayRestriction" json:"parlay_restriction,omitempty"`
	Metadata          *api.EventMetadata `protobuf:"bytes,22,opt,name=metadata" json:"metadata,omitempty"`
	Media             *api.EventMedia    `protobuf:"bytes,23,opt,name=media" json:"media,omitempty"`
	Availability      uint32             `protobuf:"varint,24,opt,name=availability" json:"availability,omitempty"`
	// deprecated, Please refer to availability,
	LiveAvailable bool `protobuf:"varint,17,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
	// deprecated, Please refer to media,
	Image string `protobuf:"bytes,19,opt,name=image" json:"image,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Event) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Event) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Event) GetCompetitors() []*api.Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *Event) GetOpenMarkets() uint32 {
	if m != nil {
		return m.OpenMarkets
	}
	return 0
}

func (m *Event) GetMarkets() []*Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *Event) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *Event) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

func (m *Event) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *Event) GetParlayRestriction() uint32 {
	if m != nil {
		return m.ParlayRestriction
	}
	return 0
}

func (m *Event) GetMetadata() *api.EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetMedia() *api.EventMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Event) GetAvailability() uint32 {
	if m != nil {
		return m.Availability
	}
	return 0
}

func (m *Event) GetLiveAvailable() bool {
	if m != nil {
		return m.LiveAvailable
	}
	return false
}

func (m *Event) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type Market struct {
	Id               uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Primary          bool         `protobuf:"varint,3,opt,name=primary" json:"primary,omitempty"`
	Groups           []string     `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	Type             string       `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Selections       []*Selection `protobuf:"bytes,6,rep,name=selections" json:"selections,omitempty"`
	SmvRegex         string       `protobuf:"bytes,7,opt,name=smv_regex,json=smvRegex" json:"smv_regex,omitempty"`
	SmvFields        string       `protobuf:"bytes,8,opt,name=smv_fields,json=smvFields" json:"smv_fields,omitempty"`
	ActiveSelections uint32       `protobuf:"varint,9,opt,name=active_selections,json=activeSelections" json:"active_selections,omitempty"`
	Priority         uint32       `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	Tags             uint64       `protobuf:"varint,13,opt,name=tags" json:"tags,omitempty"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Market) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Market) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Market) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *Market) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Market) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Market) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Market) GetSmvRegex() string {
	if m != nil {
		return m.SmvRegex
	}
	return ""
}

func (m *Market) GetSmvFields() string {
	if m != nil {
		return m.SmvFields
	}
	return ""
}

func (m *Market) GetActiveSelections() uint32 {
	if m != nil {
		return m.ActiveSelections
	}
	return 0
}

func (m *Market) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Market) GetTags() uint64 {
	if m != nil {
		return m.Tags
	}
	return 0
}

// NOTE:
// group_id is the index for the Market grouping names
type Selection struct {
	Timestamp       int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	GroupId         uint32  `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EventId         uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32  `protobuf:"varint,5,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome         string  `protobuf:"bytes,6,opt,name=outcome" json:"outcome,omitempty"`
	SpecialBetValue string  `protobuf:"bytes,7,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	PlayerId        uint32  `protobuf:"varint,8,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamId          uint32  `protobuf:"varint,9,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Odds            float64 `protobuf:"fixed64,10,opt,name=odds" json:"odds,omitempty"`
	MinStake        float64 `protobuf:"fixed64,12,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        float64 `protobuf:"fixed64,13,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	// 0: locked
	// 1: trading
	// 2: temporary lock by provider
	// 3: replaced selection, hide in api
	// more states TBD
	Status      api.SelectionStatus `protobuf:"varint,14,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	BackersOdds float64             `protobuf:"fixed64,16,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Selection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Selection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Selection) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Selection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Selection) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Selection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *Selection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *Selection) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Selection) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *Selection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *Selection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *Selection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *Selection) GetStatus() api.SelectionStatus {
	if m != nil {
		return m.Status
	}
	return api.SelectionStatus_DISABLED
}

func (m *Selection) GetBackersOdds() float64 {
	if m != nil {
		return m.BackersOdds
	}
	return 0
}

type Outright struct {
	Timestamp   int64                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id          uint32               `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name        string               `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StartsAt    int64                `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt      int64                `protobuf:"varint,5,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	Sport       *api.Generic         `protobuf:"bytes,6,opt,name=sport" json:"sport,omitempty"`
	Competition *Competition         `protobuf:"bytes,7,opt,name=competition" json:"competition,omitempty"`
	Selections  []*OutrightSelection `protobuf:"bytes,9,rep,name=selections" json:"selections,omitempty"`
	Status      api.EventStatus      `protobuf:"varint,10,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	FinishesAt  int64                `protobuf:"varint,11,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
	MarketId    uint32               `protobuf:"varint,12,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Key         string               `protobuf:"bytes,14,opt,name=key" json:"key,omitempty"`
}

func (m *Outright) Reset()                    { *m = Outright{} }
func (m *Outright) String() string            { return proto.CompactTextString(m) }
func (*Outright) ProtoMessage()               {}
func (*Outright) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Outright) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Outright) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Outright) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Outright) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Outright) GetEndsAt() int64 {
	if m != nil {
		return m.EndsAt
	}
	return 0
}

func (m *Outright) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Outright) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Outright) GetSelections() []*OutrightSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Outright) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *Outright) GetFinishesAt() int64 {
	if m != nil {
		return m.FinishesAt
	}
	return 0
}

func (m *Outright) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Outright) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type OutrightSelection struct {
	Timestamp       int64               `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            string              `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	EventId         uint32              `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CompetitorId    uint32              `protobuf:"varint,5,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	Odds            float64             `protobuf:"fixed64,6,opt,name=odds" json:"odds,omitempty"`
	MinStake        float64             `protobuf:"fixed64,8,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        float64             `protobuf:"fixed64,9,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	Status          api.SelectionStatus `protobuf:"varint,10,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	SpecialBetValue string              `protobuf:"bytes,12,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Outcome         string              `protobuf:"bytes,13,opt,name=outcome" json:"outcome,omitempty"`
}

func (m *OutrightSelection) Reset()                    { *m = OutrightSelection{} }
func (m *OutrightSelection) String() string            { return proto.CompactTextString(m) }
func (*OutrightSelection) ProtoMessage()               {}
func (*OutrightSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OutrightSelection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OutrightSelection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OutrightSelection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *OutrightSelection) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

func (m *OutrightSelection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *OutrightSelection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *OutrightSelection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *OutrightSelection) GetStatus() api.SelectionStatus {
	if m != nil {
		return m.Status
	}
	return api.SelectionStatus_DISABLED
}

func (m *OutrightSelection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *OutrightSelection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

type SportsTree struct {
	Sports []*SportsTreeEntity `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
}

func (m *SportsTree) Reset()                    { *m = SportsTree{} }
func (m *SportsTree) String() string            { return proto.CompactTextString(m) }
func (*SportsTree) ProtoMessage()               {}
func (*SportsTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SportsTree) GetSports() []*SportsTreeEntity {
	if m != nil {
		return m.Sports
	}
	return nil
}

type SportsTreeEntity struct {
	Id           uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Competitions []*CompetitionTree `protobuf:"bytes,3,rep,name=competitions" json:"competitions,omitempty"`
	Key          string             `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
}

func (m *SportsTreeEntity) Reset()                    { *m = SportsTreeEntity{} }
func (m *SportsTreeEntity) String() string            { return proto.CompactTextString(m) }
func (*SportsTreeEntity) ProtoMessage()               {}
func (*SportsTreeEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SportsTreeEntity) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SportsTreeEntity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SportsTreeEntity) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

func (m *SportsTreeEntity) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CompetitionTree struct {
	Id     uint32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    string         `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	Image  string         `protobuf:"bytes,11,opt,name=image" json:"image,omitempty"`
	Sport  *api.Generic   `protobuf:"bytes,3,opt,name=sport" json:"sport,omitempty"`
	Groups []*api.Generic `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// empty in top level event tree
	Events    []*Event    `protobuf:"bytes,5,rep,name=events" json:"events,omitempty"`
	Outrights []*Outright `protobuf:"bytes,6,rep,name=outrights" json:"outrights,omitempty"`
	// indicator of how many to expect
	EventCount    uint32 `protobuf:"varint,8,opt,name=event_count,json=eventCount" json:"event_count,omitempty"`
	OutrightCount uint32 `protobuf:"varint,9,opt,name=outright_count,json=outrightCount" json:"outright_count,omitempty"`
	// used for sorting
	Priority uint32 `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
}

func (m *CompetitionTree) Reset()                    { *m = CompetitionTree{} }
func (m *CompetitionTree) String() string            { return proto.CompactTextString(m) }
func (*CompetitionTree) ProtoMessage()               {}
func (*CompetitionTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CompetitionTree) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionTree) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompetitionTree) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CompetitionTree) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CompetitionTree) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *CompetitionTree) GetGroups() []*api.Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *CompetitionTree) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *CompetitionTree) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

func (m *CompetitionTree) GetEventCount() uint32 {
	if m != nil {
		return m.EventCount
	}
	return 0
}

func (m *CompetitionTree) GetOutrightCount() uint32 {
	if m != nil {
		return m.OutrightCount
	}
	return 0
}

func (m *CompetitionTree) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type EventList struct {
	Events []*Event `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (m *EventList) Reset()                    { *m = EventList{} }
func (m *EventList) String() string            { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()               {}
func (*EventList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EventList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type OutrightList struct {
	Outrights []*Outright `protobuf:"bytes,2,rep,name=outrights" json:"outrights,omitempty"`
}

func (m *OutrightList) Reset()                    { *m = OutrightList{} }
func (m *OutrightList) String() string            { return proto.CompactTextString(m) }
func (*OutrightList) ProtoMessage()               {}
func (*OutrightList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *OutrightList) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

type CompetitionList struct {
	Competitions []*CompetitionTree `protobuf:"bytes,1,rep,name=competitions" json:"competitions,omitempty"`
}

func (m *CompetitionList) Reset()                    { *m = CompetitionList{} }
func (m *CompetitionList) String() string            { return proto.CompactTextString(m) }
func (*CompetitionList) ProtoMessage()               {}
func (*CompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CompetitionList) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

type SportList struct {
	Sports []*api.Generic `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
}

func (m *SportList) Reset()                    { *m = SportList{} }
func (m *SportList) String() string            { return proto.CompactTextString(m) }
func (*SportList) ProtoMessage()               {}
func (*SportList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SportList) GetSports() []*api.Generic {
	if m != nil {
		return m.Sports
	}
	return nil
}

type StreamResponse struct {
	Data map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StreamResponse) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type EventStream struct {
	Video map[string]*StreamResponse `protobuf:"bytes,1,rep,name=video" json:"video,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EventStream) Reset()                    { *m = EventStream{} }
func (m *EventStream) String() string            { return proto.CompactTextString(m) }
func (*EventStream) ProtoMessage()               {}
func (*EventStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *EventStream) GetVideo() map[string]*StreamResponse {
	if m != nil {
		return m.Video
	}
	return nil
}

func init() {
	proto.RegisterType((*Competition)(nil), "public.Competition")
	proto.RegisterType((*Event)(nil), "public.Event")
	proto.RegisterType((*Market)(nil), "public.Market")
	proto.RegisterType((*Selection)(nil), "public.Selection")
	proto.RegisterType((*Outright)(nil), "public.Outright")
	proto.RegisterType((*OutrightSelection)(nil), "public.OutrightSelection")
	proto.RegisterType((*SportsTree)(nil), "public.SportsTree")
	proto.RegisterType((*SportsTreeEntity)(nil), "public.SportsTreeEntity")
	proto.RegisterType((*CompetitionTree)(nil), "public.CompetitionTree")
	proto.RegisterType((*EventList)(nil), "public.EventList")
	proto.RegisterType((*OutrightList)(nil), "public.OutrightList")
	proto.RegisterType((*CompetitionList)(nil), "public.CompetitionList")
	proto.RegisterType((*SportList)(nil), "public.SportList")
	proto.RegisterType((*StreamResponse)(nil), "public.StreamResponse")
	proto.RegisterType((*EventStream)(nil), "public.EventStream")
}

func init() { proto.RegisterFile("sportsbook/api/public/sportsbook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdb, 0x8e, 0x1b, 0x45,
	0x13, 0xd6, 0xf8, 0x30, 0xf6, 0x94, 0x0f, 0xeb, 0xed, 0x44, 0xd9, 0xc9, 0xfe, 0x3f, 0xc4, 0x0c,
	0x09, 0xb2, 0x42, 0x70, 0xc8, 0x12, 0xc4, 0x49, 0x8a, 0x94, 0x84, 0x80, 0x56, 0x22, 0x24, 0xea,
	0x45, 0xb9, 0xb5, 0xda, 0x9e, 0xce, 0x6e, 0x6b, 0xe7, 0xa4, 0xe9, 0xb6, 0x89, 0xaf, 0xb8, 0xe2,
	0x05, 0x90, 0x90, 0x78, 0x05, 0xc4, 0x3b, 0x70, 0xcb, 0x7b, 0xf0, 0x24, 0xa8, 0xab, 0xe7, 0xe8,
	0xf5, 0x26, 0x0e, 0x12, 0x77, 0xd3, 0xf5, 0x7d, 0xd3, 0x5d, 0x55, 0xf3, 0x7d, 0xdd, 0x3d, 0xf0,
	0x81, 0x4c, 0xe2, 0x54, 0xc9, 0x79, 0x1c, 0x9f, 0xdf, 0x65, 0x89, 0xb8, 0x9b, 0x2c, 0xe7, 0x81,
	0x58, 0xdc, 0x2d, 0xa3, 0xd3, 0x24, 0x8d, 0x55, 0x4c, 0x6c, 0x03, 0x1c, 0xde, 0xd8, 0xe0, 0x6f,
	0x12, 0xbd, 0xdf, 0x2d, 0xe8, 0x3d, 0x8e, 0xc3, 0x84, 0x2b, 0xa1, 0x44, 0x1c, 0x91, 0x21, 0x34,
	0x84, 0xef, 0x5a, 0x63, 0x6b, 0x32, 0xa0, 0x0d, 0xe1, 0x13, 0x02, 0xad, 0x88, 0x85, 0xdc, 0x6d,
	0x8c, 0xad, 0x89, 0x43, 0xf1, 0x99, 0x8c, 0xa0, 0x79, 0xce, 0xd7, 0x6e, 0x17, 0x43, 0xfa, 0x91,
	0xdc, 0x04, 0xfb, 0x34, 0x8d, 0x97, 0x89, 0x74, 0x9b, 0xe3, 0xe6, 0xa4, 0x77, 0xd4, 0x9f, 0xb2,
	0x44, 0x4c, 0xbf, 0xe5, 0x11, 0x4f, 0xc5, 0x82, 0x66, 0x18, 0xf1, 0xa0, 0x8d, 0xeb, 0xbb, 0xed,
	0xb1, 0x75, 0x81, 0x64, 0x20, 0x72, 0x08, 0xdd, 0x24, 0x15, 0x71, 0x2a, 0xd4, 0xda, 0xed, 0x60,
	0x16, 0xc5, 0xd8, 0xfb, 0xad, 0x0d, 0xed, 0x27, 0x2b, 0x1e, 0x29, 0xf2, 0x7f, 0x70, 0x94, 0x08,
	0xb9, 0x54, 0x2c, 0x4c, 0x30, 0xd9, 0x26, 0x2d, 0x03, 0x59, 0x0d, 0x8d, 0x0b, 0x35, 0x34, 0x2b,
	0x35, 0xfc, 0x0f, 0x1c, 0xa9, 0x58, 0xaa, 0xe4, 0x8c, 0x29, 0xb7, 0x85, 0x33, 0x74, 0x4d, 0xe0,
	0xa1, 0xda, 0x29, 0xd1, 0x4f, 0xa1, 0xb7, 0x28, 0xfb, 0xe6, 0xda, 0xc8, 0xbc, 0x32, 0x35, 0x7d,
	0x9f, 0x56, 0x5a, 0x4a, 0xab, 0x3c, 0x72, 0xaf, 0x7c, 0x2d, 0x4e, 0xa5, 0xdb, 0xc1, 0x76, 0xed,
	0xe1, 0x02, 0x8f, 0x8b, 0x38, 0xad, 0x72, 0xc8, 0x7b, 0xd0, 0x8f, 0x13, 0x1e, 0xcd, 0x42, 0x96,
	0x9e, 0x73, 0x25, 0xb1, 0xef, 0x03, 0xda, 0xd3, 0xb1, 0xa7, 0x26, 0x44, 0x26, 0xd0, 0xc9, 0x51,
	0x07, 0x67, 0x1c, 0xe6, 0x89, 0x18, 0x06, 0xcd, 0x61, 0x32, 0x01, 0x5b, 0x2a, 0xa6, 0x96, 0xd2,
	0x85, 0xb1, 0x35, 0x19, 0x1e, 0x8d, 0x70, 0x69, 0xec, 0xea, 0x09, 0xc6, 0x69, 0x86, 0xeb, 0x65,
	0xcf, 0xe2, 0x90, 0xcf, 0x12, 0xa1, 0x16, 0x67, 0x3c, 0x75, 0xf7, 0xb0, 0x7b, 0x3d, 0x1d, 0x7b,
	0x6e, 0x42, 0x9a, 0xc2, 0x7e, 0x64, 0xeb, 0x82, 0x32, 0x32, 0x14, 0x1d, 0xcb, 0x29, 0x1f, 0x01,
	0x49, 0x58, 0x1a, 0xb0, 0xf5, 0x2c, 0xe5, 0x52, 0xa5, 0x62, 0x81, 0xdd, 0x22, 0x58, 0xc2, 0xbe,
	0x41, 0x68, 0x09, 0x90, 0x29, 0x74, 0x43, 0xae, 0x98, 0xcf, 0x14, 0x73, 0xaf, 0x61, 0x4b, 0x49,
	0x99, 0xe0, 0xd3, 0x0c, 0xa1, 0x05, 0x87, 0xdc, 0x82, 0x76, 0xc8, 0x7d, 0xc1, 0xdc, 0x03, 0x24,
	0xef, 0x55, 0xc9, 0xbe, 0x60, 0xd4, 0xa0, 0xc4, 0x83, 0x3e, 0x5b, 0x31, 0x11, 0xb0, 0xb9, 0x08,
	0xb4, 0xb2, 0x5c, 0x5c, 0xbf, 0x16, 0x23, 0xb7, 0x60, 0x18, 0x88, 0x15, 0x9f, 0x65, 0xc1, 0x80,
	0xbb, 0xfb, 0x63, 0x6b, 0xd2, 0xa5, 0x03, 0x1d, 0x7d, 0x98, 0x07, 0xc9, 0x55, 0x68, 0x8b, 0x90,
	0x9d, 0x72, 0xf7, 0x0a, 0x16, 0x6b, 0x06, 0xde, 0x9f, 0x0d, 0xb0, 0x4d, 0xab, 0x77, 0x72, 0x90,
	0x0b, 0x9d, 0x24, 0x15, 0x21, 0x4b, 0xd7, 0x28, 0xca, 0x2e, 0xcd, 0x87, 0xe4, 0x5a, 0xe1, 0xa4,
	0xd6, 0xb8, 0x39, 0x71, 0x0a, 0xef, 0x10, 0x68, 0xa9, 0x75, 0xc2, 0x51, 0x91, 0x0e, 0xc5, 0x67,
	0x72, 0x0f, 0x40, 0xf2, 0x80, 0x63, 0xe7, 0xa4, 0x6b, 0xe3, 0x87, 0xdf, 0xcf, 0x3f, 0xfc, 0x49,
	0x8e, 0xd0, 0x0a, 0x09, 0x65, 0x1f, 0xae, 0x66, 0x29, 0x3f, 0xe5, 0xaf, 0xd0, 0x5f, 0x0e, 0xed,
	0xca, 0x70, 0x45, 0xf5, 0x98, 0xbc, 0x03, 0xa0, 0xc1, 0x97, 0x82, 0x07, 0xbe, 0xcc, 0xec, 0xad,
	0xe9, 0xdf, 0x60, 0x80, 0x7c, 0x08, 0xfb, 0x6c, 0xa1, 0x74, 0x8b, 0x2a, 0xab, 0x3a, 0x58, 0xe7,
	0xc8, 0x00, 0x27, 0xe5, 0x42, 0x55, 0x1f, 0x43, 0xdd, 0xc7, 0x58, 0x0b, 0x3b, 0x95, 0xee, 0x60,
	0x6c, 0x4d, 0x5a, 0x14, 0x9f, 0xbd, 0x3f, 0x9a, 0xe0, 0x14, 0xaf, 0xbf, 0xc1, 0xdf, 0xdb, 0x3a,
	0x7a, 0x1d, 0xba, 0xd8, 0xa9, 0x99, 0xf0, 0xb1, 0xa5, 0x03, 0xda, 0xc1, 0xf1, 0xb1, 0xaf, 0x21,
	0xae, 0x15, 0xa1, 0xa1, 0x96, 0x81, 0x70, 0x7c, 0xec, 0xeb, 0x76, 0x18, 0x63, 0x68, 0xac, 0x6d,
	0xd2, 0x34, 0x81, 0x63, 0x5f, 0x7f, 0xa4, 0x78, 0xa9, 0x16, 0x71, 0xc8, 0xd1, 0xdd, 0x0e, 0xcd,
	0x87, 0xe4, 0x36, 0xec, 0xcb, 0x84, 0x2f, 0x04, 0x0b, 0x66, 0x73, 0xae, 0x66, 0x2b, 0x16, 0x2c,
	0x79, 0xd6, 0xcd, 0xbd, 0x0c, 0x78, 0xc4, 0xd5, 0x0b, 0x1d, 0xd6, 0x4b, 0x24, 0x01, 0x5b, 0xf3,
	0x54, 0x2f, 0xd1, 0xcd, 0x3a, 0x81, 0x81, 0x63, 0x9f, 0x1c, 0x40, 0x47, 0x71, 0x16, 0x6a, 0xc8,
	0x34, 0xd2, 0xd6, 0xc3, 0x63, 0x14, 0x4d, 0xec, 0xfb, 0xc6, 0xa4, 0x16, 0xc5, 0x67, 0x4c, 0x56,
	0x44, 0x33, 0xa9, 0xd8, 0x39, 0x77, 0xfb, 0x08, 0x74, 0x43, 0x11, 0x9d, 0xe8, 0xb1, 0xa9, 0xe4,
	0x55, 0x06, 0x0e, 0x32, 0x90, 0xbd, 0x32, 0xe0, 0x9d, 0xc2, 0xf4, 0x43, 0x34, 0xfd, 0x55, 0xb4,
	0x49, 0xd1, 0xee, 0x8b, 0xc6, 0x9f, 0xb3, 0xc5, 0x39, 0x4f, 0xe5, 0x0c, 0x73, 0x18, 0xe1, 0x6c,
	0xbd, 0x2c, 0xf6, 0xcc, 0xf7, 0xa5, 0xf7, 0x4b, 0x13, 0xba, 0xcf, 0x96, 0x2a, 0x15, 0xa7, 0x67,
	0xff, 0xf9, 0x66, 0x7c, 0x00, 0x1d, 0x1e, 0xf9, 0x08, 0xb5, 0x11, 0xb2, 0xf5, 0xb0, 0xba, 0x4b,
	0xdb, 0x3b, 0xef, 0xd2, 0x9d, 0x1d, 0x77, 0xe9, 0x2f, 0x6a, 0xce, 0x32, 0x5b, 0xea, 0xf5, 0xfc,
	0xad, 0xbc, 0xf0, 0xed, 0x0e, 0xdb, 0x7d, 0x83, 0xbd, 0x01, 0xbd, 0x97, 0x22, 0x12, 0xf2, 0x8c,
	0x63, 0x71, 0x3d, 0x2c, 0x0e, 0xf2, 0xd0, 0x43, 0x55, 0x57, 0x67, 0x7f, 0x43, 0x9d, 0xd9, 0x21,
	0x3c, 0x2c, 0x0e, 0x61, 0xef, 0xaf, 0x06, 0xec, 0x5f, 0xc8, 0xed, 0xdf, 0x59, 0xa9, 0xf0, 0x4b,
	0xb3, 0xee, 0x97, 0xf7, 0x61, 0x50, 0x9e, 0x4c, 0xa5, 0x67, 0xfa, 0x65, 0xb0, 0xa2, 0x5d, 0xfb,
	0x32, 0xed, 0x76, 0x5f, 0xa7, 0x5d, 0xe7, 0x52, 0xed, 0xc2, 0x0e, 0xda, 0xdd, 0xea, 0xcc, 0xfe,
	0x76, 0x67, 0x56, 0xfc, 0x3d, 0xa8, 0xf9, 0xdb, 0x7b, 0x00, 0x70, 0x82, 0x17, 0xa5, 0x1f, 0x52,
	0xce, 0xc9, 0xc7, 0x60, 0x9b, 0x6b, 0x93, 0x6b, 0xa1, 0x10, 0xdc, 0x62, 0x8b, 0x2d, 0x38, 0x4f,
	0x22, 0x25, 0xd4, 0x9a, 0x66, 0x3c, 0xef, 0x67, 0x0b, 0x46, 0x9b, 0xe0, 0x4e, 0xe7, 0xc2, 0x57,
	0xd0, 0xaf, 0xc8, 0x30, 0xbf, 0x4d, 0x1d, 0x6c, 0xd1, 0xab, 0x9e, 0x98, 0xd6, 0xc8, 0xb9, 0x22,
	0x5a, 0xa5, 0x22, 0xfe, 0x6e, 0xc0, 0xde, 0xc6, 0x3b, 0x6f, 0x73, 0xc1, 0x1b, 0x94, 0x17, 0xbc,
	0xe2, 0xd4, 0xeb, 0x55, 0x4e, 0xbd, 0xd2, 0x81, 0xcd, 0xcb, 0x1d, 0x78, 0xb3, 0x76, 0xa0, 0x5d,
	0x76, 0x35, 0xbc, 0x05, 0x36, 0x6a, 0x4c, 0xba, 0x6d, 0x64, 0x0d, 0xf2, 0x92, 0xd1, 0x38, 0x34,
	0x03, 0xc9, 0x14, 0x9c, 0x38, 0x53, 0x78, 0x7e, 0xe0, 0x8d, 0x36, 0x6d, 0x49, 0x4b, 0x8a, 0xb6,
	0x98, 0x91, 0xf2, 0x22, 0x5e, 0x46, 0x2a, 0xdb, 0x7e, 0x01, 0x43, 0x8f, 0x75, 0x44, 0x1f, 0xfa,
	0x39, 0x3b, 0xe3, 0x98, 0x7d, 0x78, 0x90, 0x47, 0x0d, 0xed, 0x35, 0xa7, 0x99, 0x77, 0x04, 0x0e,
	0x26, 0xf9, 0x9d, 0x90, 0xaa, 0x52, 0x47, 0xe3, 0x35, 0x75, 0x78, 0x0f, 0xa0, 0x9f, 0xa7, 0x8b,
	0xaf, 0xd5, 0xea, 0x6a, 0xbc, 0xb1, 0x2e, 0xef, 0xfb, 0xda, 0x77, 0xc5, 0x29, 0x36, 0xa5, 0x63,
	0xbd, 0x85, 0x74, 0xbc, 0x7b, 0xe0, 0xa0, 0x5e, 0x71, 0xa6, 0x9b, 0x1b, 0x7a, 0xdf, 0xf8, 0x62,
	0x99, 0xc6, 0x7f, 0x82, 0xe1, 0x89, 0x4a, 0x39, 0x0b, 0x29, 0x97, 0x49, 0x1c, 0x49, 0x4e, 0xee,
	0x43, 0x0b, 0xef, 0x6d, 0x26, 0xff, 0x71, 0xe1, 0x92, 0x1a, 0x6b, 0xfa, 0x35, 0x53, 0xec, 0x49,
	0xa4, 0xd2, 0x35, 0x45, 0xf6, 0xe1, 0x67, 0xe0, 0x14, 0xa1, 0x5c, 0x78, 0x56, 0x4d, 0x78, 0xc6,
	0xc4, 0x46, 0x9f, 0x66, 0xf0, 0x65, 0xe3, 0x73, 0xcb, 0xfb, 0xd5, 0x82, 0x5e, 0xb6, 0xad, 0xea,
	0x05, 0xc8, 0x7d, 0x68, 0xaf, 0x84, 0xcf, 0xe3, 0x2c, 0xeb, 0x77, 0x6b, 0x9d, 0x37, 0x9c, 0xe9,
	0x0b, 0x4d, 0x30, 0xab, 0x1b, 0xf2, 0xe1, 0x73, 0x80, 0x32, 0xb8, 0x65, 0xfd, 0x3b, 0xd5, 0xf5,
	0x7b, 0x47, 0xd7, 0xb6, 0x57, 0x55, 0xc9, 0xeb, 0xd1, 0x6d, 0x98, 0x2c, 0xe2, 0x70, 0x3a, 0x17,
	0xea, 0x94, 0x85, 0x3c, 0x60, 0x73, 0x39, 0xad, 0xfc, 0x75, 0xe9, 0x56, 0x9a, 0x29, 0x58, 0x22,
	0xe6, 0x36, 0xfe, 0x84, 0x7d, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x50, 0xc0, 0x8d,
	0xd7, 0x0d, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/api/pusher/sportsbook.proto

/*
Package pusher is a generated protocol buffer package.

It is generated from these files:
	sportsbook/api/pusher/sportsbook.proto

It has these top-level messages:
	Competition
	Event
	Market
	Selection
	Outright
	OutrightSelection
	SportsTree
	SportsTreeEntity
	CompetitionTree
	EventList
	OutrightList
	EventMetadata
	SoccerMetadata
	SoccerMetadataV2
	TennisMetadata
	TennisMetadataV2
	BasketballMetadata
	BasketballMetadataV2
	IceHockeyMetadata
	IceHockeyMetadataV2
	HandballMetadata
	HandballMetadataV2
	TableTennisMetadata
	TableTennisMetadataV2
	BaseballMetadata
	BaseballMetadataV2
	AmericanFootballMetadata
	AmericanFootballMetadataV2
	SnookerMetadata
	SnookerMetadataV2
	DartsMetadata
	DartsMetadataV2
	FutsalMetadata
	FutsalMetadataV2
	BowlsMetadata
	BowlsMetadataV2
	CricketMetadata
	CricketMetadataV2
	EventStreamUpdate
*/
package pusher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Competition struct {
	Id       uint32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key      string          `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	Groups   []*api.Generic  `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Sport    *api.Generic    `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	Priority uint32          `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
	Tags     []api.EntityTag `protobuf:"varint,11,rep,packed,name=tags,enum=api.EntityTag" json:"tags,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Competition_CricketCompetitionType
	Type isCompetition_Type `protobuf_oneof:"type"`
}

func (m *Competition) Reset()                    { *m = Competition{} }
func (m *Competition) String() string            { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()               {}
func (*Competition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isCompetition_Type interface{ isCompetition_Type() }

type Competition_CricketCompetitionType struct {
	CricketCompetitionType api.CricketCompetitionType `protobuf:"varint,10,opt,name=cricket_competition_type,json=cricketCompetitionType,enum=api.CricketCompetitionType,oneof"`
}

func (*Competition_CricketCompetitionType) isCompetition_Type() {}

func (m *Competition) GetType() isCompetition_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Competition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Competition) GetGroups() []*api.Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Competition) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Competition) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Competition) GetTags() []api.EntityTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Competition) GetCricketCompetitionType() api.CricketCompetitionType {
	if x, ok := m.GetType().(*Competition_CricketCompetitionType); ok {
		return x.CricketCompetitionType
	}
	return api.CricketCompetitionType_NONE
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Competition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Competition_OneofMarshaler, _Competition_OneofUnmarshaler, _Competition_OneofSizer, []interface{}{
		(*Competition_CricketCompetitionType)(nil),
	}
}

func _Competition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Competition)
	// type
	switch x := m.Type.(type) {
	case *Competition_CricketCompetitionType:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.CricketCompetitionType))
	case nil:
	default:
		return fmt.Errorf("Competition.Type has unexpected type %T", x)
	}
	return nil
}

func _Competition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Competition)
	switch tag {
	case 10: // type.cricket_competition_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &Competition_CricketCompetitionType{api.CricketCompetitionType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Competition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Competition)
	// type
	switch x := m.Type.(type) {
	case *Competition_CricketCompetitionType:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CricketCompetitionType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event struct {
	Timestamp   int64           `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id          uint32          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Image       string          `protobuf:"bytes,19,opt,name=image" json:"image,omitempty"`
	StartsAt    int64           `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	OpenMarkets uint32          `protobuf:"varint,8,opt,name=open_markets,json=openMarkets" json:"open_markets,omitempty"`
	Markets     []*Market       `protobuf:"bytes,9,rep,name=markets" json:"markets,omitempty"`
	Status      api.EventStatus `protobuf:"varint,10,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	// just strings of the surnames for now
	// we don't have any more info in the feed
	HomePitcher       string `protobuf:"bytes,15,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
	AwayPitcher       string `protobuf:"bytes,16,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	LiveAvailable     bool   `protobuf:"varint,17,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
	ParlayRestriction uint32 `protobuf:"varint,18,opt,name=parlay_restriction,json=parlayRestriction" json:"parlay_restriction,omitempty"`
	Availability      uint32 `protobuf:"varint,24,opt,name=availability" json:"availability,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Event) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Event) GetOpenMarkets() uint32 {
	if m != nil {
		return m.OpenMarkets
	}
	return 0
}

func (m *Event) GetMarkets() []*Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *Event) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *Event) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

func (m *Event) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *Event) GetLiveAvailable() bool {
	if m != nil {
		return m.LiveAvailable
	}
	return false
}

func (m *Event) GetParlayRestriction() uint32 {
	if m != nil {
		return m.ParlayRestriction
	}
	return 0
}

func (m *Event) GetAvailability() uint32 {
	if m != nil {
		return m.Availability
	}
	return 0
}

type Market struct {
	Id               uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Primary          bool         `protobuf:"varint,3,opt,name=primary" json:"primary,omitempty"`
	Groups           []string     `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	Type             string       `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Selections       []*Selection `protobuf:"bytes,6,rep,name=selections" json:"selections,omitempty"`
	SmvRegex         string       `protobuf:"bytes,7,opt,name=smv_regex,json=smvRegex" json:"smv_regex,omitempty"`
	SmvFields        string       `protobuf:"bytes,8,opt,name=smv_fields,json=smvFields" json:"smv_fields,omitempty"`
	ActiveSelections uint32       `protobuf:"varint,9,opt,name=active_selections,json=activeSelections" json:"active_selections,omitempty"`
	Priority         uint32       `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	Tags             uint64       `protobuf:"varint,13,opt,name=tags" json:"tags,omitempty"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Market) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Market) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Market) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *Market) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Market) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Market) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Market) GetSmvRegex() string {
	if m != nil {
		return m.SmvRegex
	}
	return ""
}

func (m *Market) GetSmvFields() string {
	if m != nil {
		return m.SmvFields
	}
	return ""
}

func (m *Market) GetActiveSelections() uint32 {
	if m != nil {
		return m.ActiveSelections
	}
	return 0
}

func (m *Market) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Market) GetTags() uint64 {
	if m != nil {
		return m.Tags
	}
	return 0
}

// NOTE:
// group_id is the index for the Market grouping names
type Selection struct {
	Timestamp       int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	GroupId         uint32  `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EventId         uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32  `protobuf:"varint,5,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome         string  `protobuf:"bytes,6,opt,name=outcome" json:"outcome,omitempty"`
	SpecialBetValue string  `protobuf:"bytes,7,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	PlayerId        uint32  `protobuf:"varint,8,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamId          uint32  `protobuf:"varint,9,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Odds            float64 `protobuf:"fixed64,10,opt,name=odds" json:"odds,omitempty"`
	MinStake        float64 `protobuf:"fixed64,12,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        float64 `protobuf:"fixed64,13,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	// 0: locked
	// 1: trading
	// 2: temporary lock by provider
	// 3: replaced selection, hide in api
	// more states TBD
	Status      api.SelectionStatus `protobuf:"varint,14,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	BackersOdds float64             `protobuf:"fixed64,16,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Selection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Selection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Selection) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Selection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Selection) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Selection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *Selection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *Selection) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Selection) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *Selection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *Selection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *Selection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *Selection) GetStatus() api.SelectionStatus {
	if m != nil {
		return m.Status
	}
	return api.SelectionStatus_DISABLED
}

func (m *Selection) GetBackersOdds() float64 {
	if m != nil {
		return m.BackersOdds
	}
	return 0
}

type Outright struct {
	Timestamp  int64                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id         uint32               `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	StartsAt   int64                `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt     int64                `protobuf:"varint,5,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	Selections []*OutrightSelection `protobuf:"bytes,9,rep,name=selections" json:"selections,omitempty"`
	Status     api.EventStatus      `protobuf:"varint,10,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	FinishesAt int64                `protobuf:"varint,11,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
}

func (m *Outright) Reset()                    { *m = Outright{} }
func (m *Outright) String() string            { return proto.CompactTextString(m) }
func (*Outright) ProtoMessage()               {}
func (*Outright) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Outright) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Outright) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Outright) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Outright) GetEndsAt() int64 {
	if m != nil {
		return m.EndsAt
	}
	return 0
}

func (m *Outright) GetSelections() []*OutrightSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Outright) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *Outright) GetFinishesAt() int64 {
	if m != nil {
		return m.FinishesAt
	}
	return 0
}

type OutrightSelection struct {
	Timestamp       int64               `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            string              `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	EventId         uint32              `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CompetitorId    uint32              `protobuf:"varint,5,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	Odds            float64             `protobuf:"fixed64,6,opt,name=odds" json:"odds,omitempty"`
	MinStake        float64             `protobuf:"fixed64,8,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        float64             `protobuf:"fixed64,9,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	Status          api.SelectionStatus `protobuf:"varint,10,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	SpecialBetValue string              `protobuf:"bytes,12,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Outcome         string              `protobuf:"bytes,13,opt,name=outcome" json:"outcome,omitempty"`
}

func (m *OutrightSelection) Reset()                    { *m = OutrightSelection{} }
func (m *OutrightSelection) String() string            { return proto.CompactTextString(m) }
func (*OutrightSelection) ProtoMessage()               {}
func (*OutrightSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OutrightSelection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OutrightSelection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OutrightSelection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *OutrightSelection) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

func (m *OutrightSelection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *OutrightSelection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *OutrightSelection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *OutrightSelection) GetStatus() api.SelectionStatus {
	if m != nil {
		return m.Status
	}
	return api.SelectionStatus_DISABLED
}

func (m *OutrightSelection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *OutrightSelection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

type SportsTree struct {
	Sports []*SportsTreeEntity `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
}

func (m *SportsTree) Reset()                    { *m = SportsTree{} }
func (m *SportsTree) String() string            { return proto.CompactTextString(m) }
func (*SportsTree) ProtoMessage()               {}
func (*SportsTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SportsTree) GetSports() []*SportsTreeEntity {
	if m != nil {
		return m.Sports
	}
	return nil
}

type SportsTreeEntity struct {
	Id           uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Competitions []*CompetitionTree `protobuf:"bytes,3,rep,name=competitions" json:"competitions,omitempty"`
	Key          string             `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
}

func (m *SportsTreeEntity) Reset()                    { *m = SportsTreeEntity{} }
func (m *SportsTreeEntity) String() string            { return proto.CompactTextString(m) }
func (*SportsTreeEntity) ProtoMessage()               {}
func (*SportsTreeEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SportsTreeEntity) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SportsTreeEntity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SportsTreeEntity) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

func (m *SportsTreeEntity) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CompetitionTree struct {
	Id     uint32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    string         `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	Image  string         `protobuf:"bytes,11,opt,name=image" json:"image,omitempty"`
	Sport  *api.Generic   `protobuf:"bytes,3,opt,name=sport" json:"sport,omitempty"`
	Groups []*api.Generic `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// empty in top level event tree
	Events    []*Event    `protobuf:"bytes,5,rep,name=events" json:"events,omitempty"`
	Outrights []*Outright `protobuf:"bytes,6,rep,name=outrights" json:"outrights,omitempty"`
	// indicator of how many to expect
	EventCount    uint32 `protobuf:"varint,8,opt,name=event_count,json=eventCount" json:"event_count,omitempty"`
	OutrightCount uint32 `protobuf:"varint,9,opt,name=outright_count,json=outrightCount" json:"outright_count,omitempty"`
	// used for sorting
	Priority uint32 `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
}

func (m *CompetitionTree) Reset()                    { *m = CompetitionTree{} }
func (m *CompetitionTree) String() string            { return proto.CompactTextString(m) }
func (*CompetitionTree) ProtoMessage()               {}
func (*CompetitionTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CompetitionTree) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionTree) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompetitionTree) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CompetitionTree) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CompetitionTree) GetSport() *api.Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *CompetitionTree) GetGroups() []*api.Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *CompetitionTree) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *CompetitionTree) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

func (m *CompetitionTree) GetEventCount() uint32 {
	if m != nil {
		return m.EventCount
	}
	return 0
}

func (m *CompetitionTree) GetOutrightCount() uint32 {
	if m != nil {
		return m.OutrightCount
	}
	return 0
}

func (m *CompetitionTree) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type EventList struct {
	Events []*Event `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (m *EventList) Reset()                    { *m = EventList{} }
func (m *EventList) String() string            { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()               {}
func (*EventList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EventList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type OutrightList struct {
	Outrights []*Outright `protobuf:"bytes,2,rep,name=outrights" json:"outrights,omitempty"`
}

func (m *OutrightList) Reset()                    { *m = OutrightList{} }
func (m *OutrightList) String() string            { return proto.CompactTextString(m) }
func (*OutrightList) ProtoMessage()               {}
func (*OutrightList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *OutrightList) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

type EventMetadata struct {
	EventStatus       string                          `protobuf:"bytes,1,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
	Score             []int32                         `protobuf:"varint,2,rep,packed,name=score" json:"score,omitempty"`
	SetScores         []*EventMetadata_Set            `protobuf:"bytes,3,rep,name=set_scores,json=setScores" json:"set_scores,omitempty"`
	ClearedScore      []int32                         `protobuf:"varint,4,rep,packed,name=cleared_score,json=clearedScore" json:"cleared_score,omitempty"`
	EventTime         string                          `protobuf:"bytes,5,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	EventTimeExtended string                          `protobuf:"bytes,6,opt,name=event_time_extended,json=eventTimeExtended" json:"event_time_extended,omitempty"`
	ScoreList         []*EventMetadata_SummaryListing `protobuf:"bytes,7,rep,name=score_list,json=scoreList" json:"score_list,omitempty"`
	CardList          []*EventMetadata_SummaryListing `protobuf:"bytes,8,rep,name=card_list,json=cardList" json:"card_list,omitempty"`
	// Types that are valid to be assigned to MetadataV2:
	//	*EventMetadata_SoccerV2
	//	*EventMetadata_TennisV2
	//	*EventMetadata_BasketballV2
	//	*EventMetadata_IceHockey_V2
	//	*EventMetadata_HandballV2
	//	*EventMetadata_TableTennisV2
	//	*EventMetadata_BaseballV2
	//	*EventMetadata_AmericanFootballV2
	//	*EventMetadata_SnookerV2
	//	*EventMetadata_DartsV2
	//	*EventMetadata_FutsalV2
	//	*EventMetadata_BowlsV2
	//	*EventMetadata_CricketV2
	MetadataV2 isEventMetadata_MetadataV2 `protobuf_oneof:"metadata_v2"`
	// Types that are valid to be assigned to Metadata:
	//	*EventMetadata_Soccer
	//	*EventMetadata_Tennis
	//	*EventMetadata_Basketball
	//	*EventMetadata_IceHockey
	//	*EventMetadata_Handball
	//	*EventMetadata_TableTennis
	//	*EventMetadata_Baseball
	//	*EventMetadata_AmericanFootball
	//	*EventMetadata_Snooker
	//	*EventMetadata_Darts
	//	*EventMetadata_Futsal
	//	*EventMetadata_Bowls
	//	*EventMetadata_Cricket
	Metadata      isEventMetadata_Metadata `protobuf_oneof:"metadata"`
	LiveAvailable bool                     `protobuf:"varint,22,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
}

func (m *EventMetadata) Reset()                    { *m = EventMetadata{} }
func (m *EventMetadata) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata) ProtoMessage()               {}
func (*EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isEventMetadata_MetadataV2 interface{ isEventMetadata_MetadataV2() }
type isEventMetadata_Metadata interface{ isEventMetadata_Metadata() }

type EventMetadata_SoccerV2 struct {
	SoccerV2 *SoccerMetadataV2 `protobuf:"bytes,23,opt,name=soccer_v2,json=soccerV2,oneof"`
}
type EventMetadata_TennisV2 struct {
	TennisV2 *TennisMetadataV2 `protobuf:"bytes,24,opt,name=tennis_v2,json=tennisV2,oneof"`
}
type EventMetadata_BasketballV2 struct {
	BasketballV2 *BasketballMetadataV2 `protobuf:"bytes,25,opt,name=basketball_v2,json=basketballV2,oneof"`
}
type EventMetadata_IceHockey_V2 struct {
	IceHockey_V2 *IceHockeyMetadataV2 `protobuf:"bytes,26,opt,name=ice_hockey_V2,json=iceHockeyV2,oneof"`
}
type EventMetadata_HandballV2 struct {
	HandballV2 *HandballMetadataV2 `protobuf:"bytes,27,opt,name=handball_v2,json=handballV2,oneof"`
}
type EventMetadata_TableTennisV2 struct {
	TableTennisV2 *TableTennisMetadataV2 `protobuf:"bytes,28,opt,name=table_tennis_v2,json=tableTennisV2,oneof"`
}
type EventMetadata_BaseballV2 struct {
	BaseballV2 *BaseballMetadataV2 `protobuf:"bytes,29,opt,name=baseball_v2,json=baseballV2,oneof"`
}
type EventMetadata_AmericanFootballV2 struct {
	AmericanFootballV2 *AmericanFootballMetadataV2 `protobuf:"bytes,30,opt,name=american_football_v2,json=americanFootballV2,oneof"`
}
type EventMetadata_SnookerV2 struct {
	SnookerV2 *SnookerMetadataV2 `protobuf:"bytes,31,opt,name=snooker_v2,json=snookerV2,oneof"`
}
type EventMetadata_DartsV2 struct {
	DartsV2 *DartsMetadataV2 `protobuf:"bytes,32,opt,name=darts_v2,json=dartsV2,oneof"`
}
type EventMetadata_FutsalV2 struct {
	FutsalV2 *FutsalMetadataV2 `protobuf:"bytes,33,opt,name=futsal_v2,json=futsalV2,oneof"`
}
type EventMetadata_BowlsV2 struct {
	BowlsV2 *BowlsMetadataV2 `protobuf:"bytes,34,opt,name=bowls_v2,json=bowlsV2,oneof"`
}
type EventMetadata_CricketV2 struct {
	CricketV2 *CricketMetadataV2 `protobuf:"bytes,35,opt,name=cricket_v2,json=cricketV2,oneof"`
}
type EventMetadata_Soccer struct {
	Soccer *SoccerMetadata `protobuf:"bytes,9,opt,name=soccer,oneof"`
}
type EventMetadata_Tennis struct {
	Tennis *TennisMetadata `protobuf:"bytes,10,opt,name=tennis,oneof"`
}
type EventMetadata_Basketball struct {
	Basketball *BasketballMetadata `protobuf:"bytes,11,opt,name=basketball,oneof"`
}
type EventMetadata_IceHockey struct {
	IceHockey *IceHockeyMetadata `protobuf:"bytes,12,opt,name=ice_hockey,json=iceHockey,oneof"`
}
type EventMetadata_Handball struct {
	Handball *HandballMetadata `protobuf:"bytes,13,opt,name=handball,oneof"`
}
type EventMetadata_TableTennis struct {
	TableTennis *TableTennisMetadata `protobuf:"bytes,14,opt,name=table_tennis,json=tableTennis,oneof"`
}
type EventMetadata_Baseball struct {
	Baseball *BaseballMetadata `protobuf:"bytes,15,opt,name=baseball,oneof"`
}
type EventMetadata_AmericanFootball struct {
	AmericanFootball *AmericanFootballMetadata `protobuf:"bytes,16,opt,name=american_football,json=americanFootball,oneof"`
}
type EventMetadata_Snooker struct {
	Snooker *SnookerMetadata `protobuf:"bytes,17,opt,name=snooker,oneof"`
}
type EventMetadata_Darts struct {
	Darts *DartsMetadata `protobuf:"bytes,18,opt,name=darts,oneof"`
}
type EventMetadata_Futsal struct {
	Futsal *FutsalMetadata `protobuf:"bytes,19,opt,name=futsal,oneof"`
}
type EventMetadata_Bowls struct {
	Bowls *BowlsMetadata `protobuf:"bytes,20,opt,name=bowls,oneof"`
}
type EventMetadata_Cricket struct {
	Cricket *CricketMetadata `protobuf:"bytes,21,opt,name=cricket,oneof"`
}

func (*EventMetadata_SoccerV2) isEventMetadata_MetadataV2()           {}
func (*EventMetadata_TennisV2) isEventMetadata_MetadataV2()           {}
func (*EventMetadata_BasketballV2) isEventMetadata_MetadataV2()       {}
func (*EventMetadata_IceHockey_V2) isEventMetadata_MetadataV2()       {}
func (*EventMetadata_HandballV2) isEventMetadata_MetadataV2()         {}
func (*EventMetadata_TableTennisV2) isEventMetadata_MetadataV2()      {}
func (*EventMetadata_BaseballV2) isEventMetadata_MetadataV2()         {}
func (*EventMetadata_AmericanFootballV2) isEventMetadata_MetadataV2() {}
func (*EventMetadata_SnookerV2) isEventMetadata_MetadataV2()          {}
func (*EventMetadata_DartsV2) isEventMetadata_MetadataV2()            {}
func (*EventMetadata_FutsalV2) isEventMetadata_MetadataV2()           {}
func (*EventMetadata_BowlsV2) isEventMetadata_MetadataV2()            {}
func (*EventMetadata_CricketV2) isEventMetadata_MetadataV2()          {}
func (*EventMetadata_Soccer) isEventMetadata_Metadata()               {}
func (*EventMetadata_Tennis) isEventMetadata_Metadata()               {}
func (*EventMetadata_Basketball) isEventMetadata_Metadata()           {}
func (*EventMetadata_IceHockey) isEventMetadata_Metadata()            {}
func (*EventMetadata_Handball) isEventMetadata_Metadata()             {}
func (*EventMetadata_TableTennis) isEventMetadata_Metadata()          {}
func (*EventMetadata_Baseball) isEventMetadata_Metadata()             {}
func (*EventMetadata_AmericanFootball) isEventMetadata_Metadata()     {}
func (*EventMetadata_Snooker) isEventMetadata_Metadata()              {}
func (*EventMetadata_Darts) isEventMetadata_Metadata()                {}
func (*EventMetadata_Futsal) isEventMetadata_Metadata()               {}
func (*EventMetadata_Bowls) isEventMetadata_Metadata()                {}
func (*EventMetadata_Cricket) isEventMetadata_Metadata()              {}

func (m *EventMetadata) GetMetadataV2() isEventMetadata_MetadataV2 {
	if m != nil {
		return m.MetadataV2
	}
	return nil
}
func (m *EventMetadata) GetMetadata() isEventMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventMetadata) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

func (m *EventMetadata) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *EventMetadata) GetSetScores() []*EventMetadata_Set {
	if m != nil {
		return m.SetScores
	}
	return nil
}

func (m *EventMetadata) GetClearedScore() []int32 {
	if m != nil {
		return m.ClearedScore
	}
	return nil
}

func (m *EventMetadata) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *EventMetadata) GetEventTimeExtended() string {
	if m != nil {
		return m.EventTimeExtended
	}
	return ""
}

func (m *EventMetadata) GetScoreList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *EventMetadata) GetCardList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *EventMetadata) GetSoccerV2() *SoccerMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_SoccerV2); ok {
		return x.SoccerV2
	}
	return nil
}

func (m *EventMetadata) GetTennisV2() *TennisMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_TennisV2); ok {
		return x.TennisV2
	}
	return nil
}

func (m *EventMetadata) GetBasketballV2() *BasketballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_BasketballV2); ok {
		return x.BasketballV2
	}
	return nil
}

func (m *EventMetadata) GetIceHockey_V2() *IceHockeyMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_IceHockey_V2); ok {
		return x.IceHockey_V2
	}
	return nil
}

func (m *EventMetadata) GetHandballV2() *HandballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_HandballV2); ok {
		return x.HandballV2
	}
	return nil
}

func (m *EventMetadata) GetTableTennisV2() *TableTennisMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_TableTennisV2); ok {
		return x.TableTennisV2
	}
	return nil
}

func (m *EventMetadata) GetBaseballV2() *BaseballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_BaseballV2); ok {
		return x.BaseballV2
	}
	return nil
}

func (m *EventMetadata) GetAmericanFootballV2() *AmericanFootballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_AmericanFootballV2); ok {
		return x.AmericanFootballV2
	}
	return nil
}

func (m *EventMetadata) GetSnookerV2() *SnookerMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_SnookerV2); ok {
		return x.SnookerV2
	}
	return nil
}

func (m *EventMetadata) GetDartsV2() *DartsMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_DartsV2); ok {
		return x.DartsV2
	}
	return nil
}

func (m *EventMetadata) GetFutsalV2() *FutsalMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_FutsalV2); ok {
		return x.FutsalV2
	}
	return nil
}

func (m *EventMetadata) GetBowlsV2() *BowlsMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_BowlsV2); ok {
		return x.BowlsV2
	}
	return nil
}

func (m *EventMetadata) GetCricketV2() *CricketMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_CricketV2); ok {
		return x.CricketV2
	}
	return nil
}

func (m *EventMetadata) GetSoccer() *SoccerMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Soccer); ok {
		return x.Soccer
	}
	return nil
}

func (m *EventMetadata) GetTennis() *TennisMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Tennis); ok {
		return x.Tennis
	}
	return nil
}

func (m *EventMetadata) GetBasketball() *BasketballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Basketball); ok {
		return x.Basketball
	}
	return nil
}

func (m *EventMetadata) GetIceHockey() *IceHockeyMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_IceHockey); ok {
		return x.IceHockey
	}
	return nil
}

func (m *EventMetadata) GetHandball() *HandballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Handball); ok {
		return x.Handball
	}
	return nil
}

func (m *EventMetadata) GetTableTennis() *TableTennisMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_TableTennis); ok {
		return x.TableTennis
	}
	return nil
}

func (m *EventMetadata) GetBaseball() *BaseballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Baseball); ok {
		return x.Baseball
	}
	return nil
}

func (m *EventMetadata) GetAmericanFootball() *AmericanFootballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_AmericanFootball); ok {
		return x.AmericanFootball
	}
	return nil
}

func (m *EventMetadata) GetSnooker() *SnookerMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Snooker); ok {
		return x.Snooker
	}
	return nil
}

func (m *EventMetadata) GetDarts() *DartsMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Darts); ok {
		return x.Darts
	}
	return nil
}

func (m *EventMetadata) GetFutsal() *FutsalMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Futsal); ok {
		return x.Futsal
	}
	return nil
}

func (m *EventMetadata) GetBowls() *BowlsMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Bowls); ok {
		return x.Bowls
	}
	return nil
}

func (m *EventMetadata) GetCricket() *CricketMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Cricket); ok {
		return x.Cricket
	}
	return nil
}

func (m *EventMetadata) GetLiveAvailable() bool {
	if m != nil {
		return m.LiveAvailable
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventMetadata_OneofMarshaler, _EventMetadata_OneofUnmarshaler, _EventMetadata_OneofSizer, []interface{}{
		(*EventMetadata_SoccerV2)(nil),
		(*EventMetadata_TennisV2)(nil),
		(*EventMetadata_BasketballV2)(nil),
		(*EventMetadata_IceHockey_V2)(nil),
		(*EventMetadata_HandballV2)(nil),
		(*EventMetadata_TableTennisV2)(nil),
		(*EventMetadata_BaseballV2)(nil),
		(*EventMetadata_AmericanFootballV2)(nil),
		(*EventMetadata_SnookerV2)(nil),
		(*EventMetadata_DartsV2)(nil),
		(*EventMetadata_FutsalV2)(nil),
		(*EventMetadata_BowlsV2)(nil),
		(*EventMetadata_CricketV2)(nil),
		(*EventMetadata_Soccer)(nil),
		(*EventMetadata_Tennis)(nil),
		(*EventMetadata_Basketball)(nil),
		(*EventMetadata_IceHockey)(nil),
		(*EventMetadata_Handball)(nil),
		(*EventMetadata_TableTennis)(nil),
		(*EventMetadata_Baseball)(nil),
		(*EventMetadata_AmericanFootball)(nil),
		(*EventMetadata_Snooker)(nil),
		(*EventMetadata_Darts)(nil),
		(*EventMetadata_Futsal)(nil),
		(*EventMetadata_Bowls)(nil),
		(*EventMetadata_Cricket)(nil),
	}
}

func _EventMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventMetadata)
	// metadata_v2
	switch x := m.MetadataV2.(type) {
	case *EventMetadata_SoccerV2:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SoccerV2); err != nil {
			return err
		}
	case *EventMetadata_TennisV2:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TennisV2); err != nil {
			return err
		}
	case *EventMetadata_BasketballV2:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasketballV2); err != nil {
			return err
		}
	case *EventMetadata_IceHockey_V2:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IceHockey_V2); err != nil {
			return err
		}
	case *EventMetadata_HandballV2:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandballV2); err != nil {
			return err
		}
	case *EventMetadata_TableTennisV2:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableTennisV2); err != nil {
			return err
		}
	case *EventMetadata_BaseballV2:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BaseballV2); err != nil {
			return err
		}
	case *EventMetadata_AmericanFootballV2:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmericanFootballV2); err != nil {
			return err
		}
	case *EventMetadata_SnookerV2:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SnookerV2); err != nil {
			return err
		}
	case *EventMetadata_DartsV2:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DartsV2); err != nil {
			return err
		}
	case *EventMetadata_FutsalV2:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FutsalV2); err != nil {
			return err
		}
	case *EventMetadata_BowlsV2:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BowlsV2); err != nil {
			return err
		}
	case *EventMetadata_CricketV2:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CricketV2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventMetadata.MetadataV2 has unexpected type %T", x)
	}
	// metadata
	switch x := m.Metadata.(type) {
	case *EventMetadata_Soccer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Soccer); err != nil {
			return err
		}
	case *EventMetadata_Tennis:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tennis); err != nil {
			return err
		}
	case *EventMetadata_Basketball:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Basketball); err != nil {
			return err
		}
	case *EventMetadata_IceHockey:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IceHockey); err != nil {
			return err
		}
	case *EventMetadata_Handball:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Handball); err != nil {
			return err
		}
	case *EventMetadata_TableTennis:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableTennis); err != nil {
			return err
		}
	case *EventMetadata_Baseball:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Baseball); err != nil {
			return err
		}
	case *EventMetadata_AmericanFootball:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmericanFootball); err != nil {
			return err
		}
	case *EventMetadata_Snooker:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Snooker); err != nil {
			return err
		}
	case *EventMetadata_Darts:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Darts); err != nil {
			return err
		}
	case *EventMetadata_Futsal:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Futsal); err != nil {
			return err
		}
	case *EventMetadata_Bowls:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bowls); err != nil {
			return err
		}
	case *EventMetadata_Cricket:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cricket); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventMetadata.Metadata has unexpected type %T", x)
	}
	return nil
}

func _EventMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventMetadata)
	switch tag {
	case 23: // metadata_v2.soccer_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoccerMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_SoccerV2{msg}
		return true, err
	case 24: // metadata_v2.tennis_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TennisMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_TennisV2{msg}
		return true, err
	case 25: // metadata_v2.basketball_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasketballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_BasketballV2{msg}
		return true, err
	case 26: // metadata_v2.ice_hockey_V2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IceHockeyMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_IceHockey_V2{msg}
		return true, err
	case 27: // metadata_v2.handball_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_HandballV2{msg}
		return true, err
	case 28: // metadata_v2.table_tennis_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTennisMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_TableTennisV2{msg}
		return true, err
	case 29: // metadata_v2.baseball_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BaseballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_BaseballV2{msg}
		return true, err
	case 30: // metadata_v2.american_football_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmericanFootballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_AmericanFootballV2{msg}
		return true, err
	case 31: // metadata_v2.snooker_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnookerMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_SnookerV2{msg}
		return true, err
	case 32: // metadata_v2.darts_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DartsMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_DartsV2{msg}
		return true, err
	case 33: // metadata_v2.futsal_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FutsalMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_FutsalV2{msg}
		return true, err
	case 34: // metadata_v2.bowls_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BowlsMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_BowlsV2{msg}
		return true, err
	case 35: // metadata_v2.cricket_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CricketMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_CricketV2{msg}
		return true, err
	case 9: // metadata.soccer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoccerMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Soccer{msg}
		return true, err
	case 10: // metadata.tennis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TennisMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Tennis{msg}
		return true, err
	case 11: // metadata.basketball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasketballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Basketball{msg}
		return true, err
	case 12: // metadata.ice_hockey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IceHockeyMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_IceHockey{msg}
		return true, err
	case 13: // metadata.handball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Handball{msg}
		return true, err
	case 14: // metadata.table_tennis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTennisMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_TableTennis{msg}
		return true, err
	case 15: // metadata.baseball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BaseballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Baseball{msg}
		return true, err
	case 16: // metadata.american_football
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmericanFootballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_AmericanFootball{msg}
		return true, err
	case 17: // metadata.snooker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnookerMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Snooker{msg}
		return true, err
	case 18: // metadata.darts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DartsMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Darts{msg}
		return true, err
	case 19: // metadata.futsal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FutsalMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Futsal{msg}
		return true, err
	case 20: // metadata.bowls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BowlsMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Bowls{msg}
		return true, err
	case 21: // metadata.cricket
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CricketMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Cricket{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventMetadata)
	// metadata_v2
	switch x := m.MetadataV2.(type) {
	case *EventMetadata_SoccerV2:
		s := proto.Size(x.SoccerV2)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TennisV2:
		s := proto.Size(x.TennisV2)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_BasketballV2:
		s := proto.Size(x.BasketballV2)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_IceHockey_V2:
		s := proto.Size(x.IceHockey_V2)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_HandballV2:
		s := proto.Size(x.HandballV2)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TableTennisV2:
		s := proto.Size(x.TableTennisV2)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_BaseballV2:
		s := proto.Size(x.BaseballV2)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_AmericanFootballV2:
		s := proto.Size(x.AmericanFootballV2)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_SnookerV2:
		s := proto.Size(x.SnookerV2)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_DartsV2:
		s := proto.Size(x.DartsV2)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_FutsalV2:
		s := proto.Size(x.FutsalV2)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_BowlsV2:
		s := proto.Size(x.BowlsV2)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_CricketV2:
		s := proto.Size(x.CricketV2)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// metadata
	switch x := m.Metadata.(type) {
	case *EventMetadata_Soccer:
		s := proto.Size(x.Soccer)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Tennis:
		s := proto.Size(x.Tennis)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Basketball:
		s := proto.Size(x.Basketball)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_IceHockey:
		s := proto.Size(x.IceHockey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Handball:
		s := proto.Size(x.Handball)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TableTennis:
		s := proto.Size(x.TableTennis)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Baseball:
		s := proto.Size(x.Baseball)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_AmericanFootball:
		s := proto.Size(x.AmericanFootball)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Snooker:
		s := proto.Size(x.Snooker)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Darts:
		s := proto.Size(x.Darts)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Futsal:
		s := proto.Size(x.Futsal)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Bowls:
		s := proto.Size(x.Bowls)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Cricket:
		s := proto.Size(x.Cricket)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventMetadata_Set struct {
	Score []int32 `protobuf:"varint,1,rep,packed,name=score" json:"score,omitempty"`
}

func (m *EventMetadata_Set) Reset()                    { *m = EventMetadata_Set{} }
func (m *EventMetadata_Set) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata_Set) ProtoMessage()               {}
func (*EventMetadata_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *EventMetadata_Set) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

type EventMetadata_SummaryListing struct {
	Cancelled  string `protobuf:"bytes,1,opt,name=cancelled" json:"cancelled,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerId   uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamName   string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamId     uint32 `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Time       string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	HomeScore  int32  `protobuf:"varint,7,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore  int32  `protobuf:"varint,8,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	Type       string `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
}

func (m *EventMetadata_SummaryListing) Reset()         { *m = EventMetadata_SummaryListing{} }
func (m *EventMetadata_SummaryListing) String() string { return proto.CompactTextString(m) }
func (*EventMetadata_SummaryListing) ProtoMessage()    {}
func (*EventMetadata_SummaryListing) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 1}
}

func (m *EventMetadata_SummaryListing) GetCancelled() string {
	if m != nil {
		return m.Cancelled
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetHomeScore() int32 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetAwayScore() int32 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SoccerMetadata struct {
	CornersAway        int32 `protobuf:"varint,1,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        int32 `protobuf:"varint,2,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       int32 `protobuf:"varint,3,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       int32 `protobuf:"varint,4,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    int32 `protobuf:"varint,5,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    int32 `protobuf:"varint,6,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway int32 `protobuf:"varint,7,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome int32 `protobuf:"varint,8,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
}

func (m *SoccerMetadata) Reset()                    { *m = SoccerMetadata{} }
func (m *SoccerMetadata) String() string            { return proto.CompactTextString(m) }
func (*SoccerMetadata) ProtoMessage()               {}
func (*SoccerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SoccerMetadata) GetCornersAway() int32 {
	if m != nil {
		return m.CornersAway
	}
	return 0
}

func (m *SoccerMetadata) GetCornersHome() int32 {
	if m != nil {
		return m.CornersHome
	}
	return 0
}

func (m *SoccerMetadata) GetRedCardsAway() int32 {
	if m != nil {
		return m.RedCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetRedCardsHome() int32 {
	if m != nil {
		return m.RedCardsHome
	}
	return 0
}

func (m *SoccerMetadata) GetYellowCardsAway() int32 {
	if m != nil {
		return m.YellowCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetYellowCardsHome() int32 {
	if m != nil {
		return m.YellowCardsHome
	}
	return 0
}

func (m *SoccerMetadata) GetYellowRedCardsAway() int32 {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetYellowRedCardsHome() int32 {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return 0
}

type SoccerMetadataV2 struct {
	CornersAway        string `protobuf:"bytes,1,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        string `protobuf:"bytes,2,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       string `protobuf:"bytes,3,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       string `protobuf:"bytes,4,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    string `protobuf:"bytes,5,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    string `protobuf:"bytes,6,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway string `protobuf:"bytes,7,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome string `protobuf:"bytes,8,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
	HomeScore          string `protobuf:"bytes,9,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore          string `protobuf:"bytes,10,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	EventStatus        string `protobuf:"bytes,11,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
}

func (m *SoccerMetadataV2) Reset()                    { *m = SoccerMetadataV2{} }
func (m *SoccerMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*SoccerMetadataV2) ProtoMessage()               {}
func (*SoccerMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SoccerMetadataV2) GetCornersAway() string {
	if m != nil {
		return m.CornersAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetCornersHome() string {
	if m != nil {
		return m.CornersHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetRedCardsAway() string {
	if m != nil {
		return m.RedCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetRedCardsHome() string {
	if m != nil {
		return m.RedCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowCardsAway() string {
	if m != nil {
		return m.YellowCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowCardsHome() string {
	if m != nil {
		return m.YellowCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowRedCardsAway() string {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowRedCardsHome() string {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetHomeScore() string {
	if m != nil {
		return m.HomeScore
	}
	return ""
}

func (m *SoccerMetadataV2) GetAwayScore() string {
	if m != nil {
		return m.AwayScore
	}
	return ""
}

func (m *SoccerMetadataV2) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

type TennisMetadata struct {
	Server     int32   `protobuf:"varint,1,opt,name=server" json:"server,omitempty"`
	IsTiebreak bool    `protobuf:"varint,2,opt,name=is_tiebreak,json=isTiebreak" json:"is_tiebreak,omitempty"`
	GameScore  []int32 `protobuf:"varint,5,rep,packed,name=game_score,json=gameScore" json:"game_score,omitempty"`
}

func (m *TennisMetadata) Reset()                    { *m = TennisMetadata{} }
func (m *TennisMetadata) String() string            { return proto.CompactTextString(m) }
func (*TennisMetadata) ProtoMessage()               {}
func (*TennisMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TennisMetadata) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *TennisMetadata) GetIsTiebreak() bool {
	if m != nil {
		return m.IsTiebreak
	}
	return false
}

func (m *TennisMetadata) GetGameScore() []int32 {
	if m != nil {
		return m.GameScore
	}
	return nil
}

type TennisMetadataV2 struct {
	Server     string   `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	IsTiebreak string   `protobuf:"bytes,2,opt,name=is_tiebreak,json=isTiebreak" json:"is_tiebreak,omitempty"`
	GameScore  []string `protobuf:"bytes,5,rep,name=game_score,json=gameScore" json:"game_score,omitempty"`
}

func (m *TennisMetadataV2) Reset()                    { *m = TennisMetadataV2{} }
func (m *TennisMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*TennisMetadataV2) ProtoMessage()               {}
func (*TennisMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TennisMetadataV2) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *TennisMetadataV2) GetIsTiebreak() string {
	if m != nil {
		return m.IsTiebreak
	}
	return ""
}

func (m *TennisMetadataV2) GetGameScore() []string {
	if m != nil {
		return m.GameScore
	}
	return nil
}

type BasketballMetadata struct {
	ClockStopped          int32  `protobuf:"varint,1,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,2,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,3,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *BasketballMetadata) Reset()                    { *m = BasketballMetadata{} }
func (m *BasketballMetadata) String() string            { return proto.CompactTextString(m) }
func (*BasketballMetadata) ProtoMessage()               {}
func (*BasketballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BasketballMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *BasketballMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *BasketballMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type BasketballMetadataV2 struct {
	ClockStopped          string `protobuf:"bytes,1,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,2,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,3,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *BasketballMetadataV2) Reset()                    { *m = BasketballMetadataV2{} }
func (m *BasketballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*BasketballMetadataV2) ProtoMessage()               {}
func (*BasketballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BasketballMetadataV2) GetClockStopped() string {
	if m != nil {
		return m.ClockStopped
	}
	return ""
}

func (m *BasketballMetadataV2) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *BasketballMetadataV2) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type IceHockeyMetadata struct {
	SuspendHome int32 `protobuf:"varint,1,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway int32 `protobuf:"varint,2,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// already in basketball
	ClockStopped          int32  `protobuf:"varint,3,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,4,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,5,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *IceHockeyMetadata) Reset()                    { *m = IceHockeyMetadata{} }
func (m *IceHockeyMetadata) String() string            { return proto.CompactTextString(m) }
func (*IceHockeyMetadata) ProtoMessage()               {}
func (*IceHockeyMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *IceHockeyMetadata) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *IceHockeyMetadata) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

func (m *IceHockeyMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *IceHockeyMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *IceHockeyMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type IceHockeyMetadataV2 struct {
	SuspendHome string `protobuf:"bytes,1,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway string `protobuf:"bytes,2,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// already in basketball
	ClockStopped          string `protobuf:"bytes,3,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,4,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,5,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *IceHockeyMetadataV2) Reset()                    { *m = IceHockeyMetadataV2{} }
func (m *IceHockeyMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*IceHockeyMetadataV2) ProtoMessage()               {}
func (*IceHockeyMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IceHockeyMetadataV2) GetSuspendHome() string {
	if m != nil {
		return m.SuspendHome
	}
	return ""
}

func (m *IceHockeyMetadataV2) GetSuspendAway() string {
	if m != nil {
		return m.SuspendAway
	}
	return ""
}

func (m *IceHockeyMetadataV2) GetClockStopped() string {
	if m != nil {
		return m.ClockStopped
	}
	return ""
}

func (m *IceHockeyMetadataV2) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *IceHockeyMetadataV2) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type HandballMetadata struct {
	SuspendHome int32 `protobuf:"varint,1,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway int32 `protobuf:"varint,2,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// already in basketball
	ClockStopped          int32  `protobuf:"varint,3,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,4,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,5,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *HandballMetadata) Reset()                    { *m = HandballMetadata{} }
func (m *HandballMetadata) String() string            { return proto.CompactTextString(m) }
func (*HandballMetadata) ProtoMessage()               {}
func (*HandballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *HandballMetadata) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *HandballMetadata) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

func (m *HandballMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *HandballMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *HandballMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type HandballMetadataV2 struct {
	SuspendHome string `protobuf:"bytes,1,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway string `protobuf:"bytes,2,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// already in basketball
	ClockStopped          string `protobuf:"bytes,3,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,4,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,5,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *HandballMetadataV2) Reset()                    { *m = HandballMetadataV2{} }
func (m *HandballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*HandballMetadataV2) ProtoMessage()               {}
func (*HandballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *HandballMetadataV2) GetSuspendHome() string {
	if m != nil {
		return m.SuspendHome
	}
	return ""
}

func (m *HandballMetadataV2) GetSuspendAway() string {
	if m != nil {
		return m.SuspendAway
	}
	return ""
}

func (m *HandballMetadataV2) GetClockStopped() string {
	if m != nil {
		return m.ClockStopped
	}
	return ""
}

func (m *HandballMetadataV2) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *HandballMetadataV2) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type TableTennisMetadata struct {
	Expedite int32 `protobuf:"varint,1,opt,name=expedite" json:"expedite,omitempty"`
	// already in tennis
	Server int32 `protobuf:"varint,2,opt,name=server" json:"server,omitempty"`
}

func (m *TableTennisMetadata) Reset()                    { *m = TableTennisMetadata{} }
func (m *TableTennisMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableTennisMetadata) ProtoMessage()               {}
func (*TableTennisMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *TableTennisMetadata) GetExpedite() int32 {
	if m != nil {
		return m.Expedite
	}
	return 0
}

func (m *TableTennisMetadata) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

type TableTennisMetadataV2 struct {
	Expedite string `protobuf:"bytes,1,opt,name=expedite" json:"expedite,omitempty"`
	// already in tennis
	Server string `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
}

func (m *TableTennisMetadataV2) Reset()                    { *m = TableTennisMetadataV2{} }
func (m *TableTennisMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*TableTennisMetadataV2) ProtoMessage()               {}
func (*TableTennisMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TableTennisMetadataV2) GetExpedite() string {
	if m != nil {
		return m.Expedite
	}
	return ""
}

func (m *TableTennisMetadataV2) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

type BaseballMetadata struct {
	AwayBatter  int32  `protobuf:"varint,1,opt,name=away_batter,json=awayBatter" json:"away_batter,omitempty"`
	HomeBatter  int32  `protobuf:"varint,2,opt,name=home_batter,json=homeBatter" json:"home_batter,omitempty"`
	Balls       int32  `protobuf:"varint,3,opt,name=balls" json:"balls,omitempty"`
	Bases       string `protobuf:"bytes,4,opt,name=bases" json:"bases,omitempty"`
	Strikes     int32  `protobuf:"varint,5,opt,name=strikes" json:"strikes,omitempty"`
	Outs        int32  `protobuf:"varint,6,opt,name=outs" json:"outs,omitempty"`
	AwayPitcher string `protobuf:"bytes,7,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	HomePitcher string `protobuf:"bytes,8,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
}

func (m *BaseballMetadata) Reset()                    { *m = BaseballMetadata{} }
func (m *BaseballMetadata) String() string            { return proto.CompactTextString(m) }
func (*BaseballMetadata) ProtoMessage()               {}
func (*BaseballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BaseballMetadata) GetAwayBatter() int32 {
	if m != nil {
		return m.AwayBatter
	}
	return 0
}

func (m *BaseballMetadata) GetHomeBatter() int32 {
	if m != nil {
		return m.HomeBatter
	}
	return 0
}

func (m *BaseballMetadata) GetBalls() int32 {
	if m != nil {
		return m.Balls
	}
	return 0
}

func (m *BaseballMetadata) GetBases() string {
	if m != nil {
		return m.Bases
	}
	return ""
}

func (m *BaseballMetadata) GetStrikes() int32 {
	if m != nil {
		return m.Strikes
	}
	return 0
}

func (m *BaseballMetadata) GetOuts() int32 {
	if m != nil {
		return m.Outs
	}
	return 0
}

func (m *BaseballMetadata) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *BaseballMetadata) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

type BaseballMetadataV2 struct {
	AwayBatter  string `protobuf:"bytes,1,opt,name=away_batter,json=awayBatter" json:"away_batter,omitempty"`
	HomeBatter  string `protobuf:"bytes,2,opt,name=home_batter,json=homeBatter" json:"home_batter,omitempty"`
	Balls       string `protobuf:"bytes,3,opt,name=balls" json:"balls,omitempty"`
	Bases       string `protobuf:"bytes,4,opt,name=bases" json:"bases,omitempty"`
	Strikes     string `protobuf:"bytes,5,opt,name=strikes" json:"strikes,omitempty"`
	Outs        string `protobuf:"bytes,6,opt,name=outs" json:"outs,omitempty"`
	AwayPitcher string `protobuf:"bytes,7,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	HomePitcher string `protobuf:"bytes,8,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
}

func (m *BaseballMetadataV2) Reset()                    { *m = BaseballMetadataV2{} }
func (m *BaseballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*BaseballMetadataV2) ProtoMessage()               {}
func (*BaseballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BaseballMetadataV2) GetAwayBatter() string {
	if m != nil {
		return m.AwayBatter
	}
	return ""
}

func (m *BaseballMetadataV2) GetHomeBatter() string {
	if m != nil {
		return m.HomeBatter
	}
	return ""
}

func (m *BaseballMetadataV2) GetBalls() string {
	if m != nil {
		return m.Balls
	}
	return ""
}

func (m *BaseballMetadataV2) GetBases() string {
	if m != nil {
		return m.Bases
	}
	return ""
}

func (m *BaseballMetadataV2) GetStrikes() string {
	if m != nil {
		return m.Strikes
	}
	return ""
}

func (m *BaseballMetadataV2) GetOuts() string {
	if m != nil {
		return m.Outs
	}
	return ""
}

func (m *BaseballMetadataV2) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *BaseballMetadataV2) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

type AmericanFootballMetadata struct {
	Possession int32 `protobuf:"varint,1,opt,name=possession" json:"possession,omitempty"`
	Position   int32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	Try        int32 `protobuf:"varint,3,opt,name=try" json:"try,omitempty"`
	Yards      int32 `protobuf:"varint,4,opt,name=yards" json:"yards,omitempty"`
	// already in basketball
	RemainingTime         string `protobuf:"bytes,5,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,6,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *AmericanFootballMetadata) Reset()                    { *m = AmericanFootballMetadata{} }
func (m *AmericanFootballMetadata) String() string            { return proto.CompactTextString(m) }
func (*AmericanFootballMetadata) ProtoMessage()               {}
func (*AmericanFootballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AmericanFootballMetadata) GetPossession() int32 {
	if m != nil {
		return m.Possession
	}
	return 0
}

func (m *AmericanFootballMetadata) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *AmericanFootballMetadata) GetTry() int32 {
	if m != nil {
		return m.Try
	}
	return 0
}

func (m *AmericanFootballMetadata) GetYards() int32 {
	if m != nil {
		return m.Yards
	}
	return 0
}

func (m *AmericanFootballMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *AmericanFootballMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type AmericanFootballMetadataV2 struct {
	Possession string `protobuf:"bytes,1,opt,name=possession" json:"possession,omitempty"`
	Position   string `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Try        string `protobuf:"bytes,3,opt,name=try" json:"try,omitempty"`
	Yards      string `protobuf:"bytes,4,opt,name=yards" json:"yards,omitempty"`
	// already in basketball
	RemainingTime         string `protobuf:"bytes,5,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,6,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *AmericanFootballMetadataV2) Reset()                    { *m = AmericanFootballMetadataV2{} }
func (m *AmericanFootballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*AmericanFootballMetadataV2) ProtoMessage()               {}
func (*AmericanFootballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AmericanFootballMetadataV2) GetPossession() string {
	if m != nil {
		return m.Possession
	}
	return ""
}

func (m *AmericanFootballMetadataV2) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *AmericanFootballMetadataV2) GetTry() string {
	if m != nil {
		return m.Try
	}
	return ""
}

func (m *AmericanFootballMetadataV2) GetYards() string {
	if m != nil {
		return m.Yards
	}
	return ""
}

func (m *AmericanFootballMetadataV2) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *AmericanFootballMetadataV2) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type SnookerMetadata struct {
	RemainingReds int32 `protobuf:"varint,1,opt,name=remaining_reds,json=remainingReds" json:"remaining_reds,omitempty"`
	Visit         int32 `protobuf:"varint,2,opt,name=visit" json:"visit,omitempty"`
}

func (m *SnookerMetadata) Reset()                    { *m = SnookerMetadata{} }
func (m *SnookerMetadata) String() string            { return proto.CompactTextString(m) }
func (*SnookerMetadata) ProtoMessage()               {}
func (*SnookerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SnookerMetadata) GetRemainingReds() int32 {
	if m != nil {
		return m.RemainingReds
	}
	return 0
}

func (m *SnookerMetadata) GetVisit() int32 {
	if m != nil {
		return m.Visit
	}
	return 0
}

type SnookerMetadataV2 struct {
	RemainingReds string `protobuf:"bytes,1,opt,name=remaining_reds,json=remainingReds" json:"remaining_reds,omitempty"`
	Visit         string `protobuf:"bytes,2,opt,name=visit" json:"visit,omitempty"`
}

func (m *SnookerMetadataV2) Reset()                    { *m = SnookerMetadataV2{} }
func (m *SnookerMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*SnookerMetadataV2) ProtoMessage()               {}
func (*SnookerMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SnookerMetadataV2) GetRemainingReds() string {
	if m != nil {
		return m.RemainingReds
	}
	return ""
}

func (m *SnookerMetadataV2) GetVisit() string {
	if m != nil {
		return m.Visit
	}
	return ""
}

type DartsMetadata struct {
	LegScore int32 `protobuf:"varint,1,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
	Throw    int32 `protobuf:"varint,2,opt,name=throw" json:"throw,omitempty"`
	// already in snooker
	Visit int32 `protobuf:"varint,3,opt,name=visit" json:"visit,omitempty"`
}

func (m *DartsMetadata) Reset()                    { *m = DartsMetadata{} }
func (m *DartsMetadata) String() string            { return proto.CompactTextString(m) }
func (*DartsMetadata) ProtoMessage()               {}
func (*DartsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DartsMetadata) GetLegScore() int32 {
	if m != nil {
		return m.LegScore
	}
	return 0
}

func (m *DartsMetadata) GetThrow() int32 {
	if m != nil {
		return m.Throw
	}
	return 0
}

func (m *DartsMetadata) GetVisit() int32 {
	if m != nil {
		return m.Visit
	}
	return 0
}

type DartsMetadataV2 struct {
	LegScore string `protobuf:"bytes,1,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
	Throw    string `protobuf:"bytes,2,opt,name=throw" json:"throw,omitempty"`
	// already in snooker
	Visit string `protobuf:"bytes,3,opt,name=visit" json:"visit,omitempty"`
}

func (m *DartsMetadataV2) Reset()                    { *m = DartsMetadataV2{} }
func (m *DartsMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*DartsMetadataV2) ProtoMessage()               {}
func (*DartsMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DartsMetadataV2) GetLegScore() string {
	if m != nil {
		return m.LegScore
	}
	return ""
}

func (m *DartsMetadataV2) GetThrow() string {
	if m != nil {
		return m.Throw
	}
	return ""
}

func (m *DartsMetadataV2) GetVisit() string {
	if m != nil {
		return m.Visit
	}
	return ""
}

type FutsalMetadata struct {
	// already in ice hockey and handball
	ClockStopped int32 `protobuf:"varint,1,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	SuspendHome  int32 `protobuf:"varint,2,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway  int32 `protobuf:"varint,3,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
}

func (m *FutsalMetadata) Reset()                    { *m = FutsalMetadata{} }
func (m *FutsalMetadata) String() string            { return proto.CompactTextString(m) }
func (*FutsalMetadata) ProtoMessage()               {}
func (*FutsalMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *FutsalMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *FutsalMetadata) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *FutsalMetadata) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

type FutsalMetadataV2 struct {
	// already in ice hockey and handball
	ClockStopped string `protobuf:"bytes,1,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	SuspendHome  string `protobuf:"bytes,2,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway  string `protobuf:"bytes,3,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
}

func (m *FutsalMetadataV2) Reset()                    { *m = FutsalMetadataV2{} }
func (m *FutsalMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*FutsalMetadataV2) ProtoMessage()               {}
func (*FutsalMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *FutsalMetadataV2) GetClockStopped() string {
	if m != nil {
		return m.ClockStopped
	}
	return ""
}

func (m *FutsalMetadataV2) GetSuspendHome() string {
	if m != nil {
		return m.SuspendHome
	}
	return ""
}

func (m *FutsalMetadataV2) GetSuspendAway() string {
	if m != nil {
		return m.SuspendAway
	}
	return ""
}

type BowlsMetadata struct {
	RemainingBowlsAway int32 `protobuf:"varint,1,opt,name=remaining_bowls_away,json=remainingBowlsAway" json:"remaining_bowls_away,omitempty"`
	RemainingBowlsHome int32 `protobuf:"varint,2,opt,name=remaining_bowls_home,json=remainingBowlsHome" json:"remaining_bowls_home,omitempty"`
	CurrentEnd         int32 `protobuf:"varint,3,opt,name=current_end,json=currentEnd" json:"current_end,omitempty"`
	Delivery           int32 `protobuf:"varint,4,opt,name=delivery" json:"delivery,omitempty"`
}

func (m *BowlsMetadata) Reset()                    { *m = BowlsMetadata{} }
func (m *BowlsMetadata) String() string            { return proto.CompactTextString(m) }
func (*BowlsMetadata) ProtoMessage()               {}
func (*BowlsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *BowlsMetadata) GetRemainingBowlsAway() int32 {
	if m != nil {
		return m.RemainingBowlsAway
	}
	return 0
}

func (m *BowlsMetadata) GetRemainingBowlsHome() int32 {
	if m != nil {
		return m.RemainingBowlsHome
	}
	return 0
}

func (m *BowlsMetadata) GetCurrentEnd() int32 {
	if m != nil {
		return m.CurrentEnd
	}
	return 0
}

func (m *BowlsMetadata) GetDelivery() int32 {
	if m != nil {
		return m.Delivery
	}
	return 0
}

type BowlsMetadataV2 struct {
	RemainingBowlsAway string `protobuf:"bytes,1,opt,name=remaining_bowls_away,json=remainingBowlsAway" json:"remaining_bowls_away,omitempty"`
	RemainingBowlsHome string `protobuf:"bytes,2,opt,name=remaining_bowls_home,json=remainingBowlsHome" json:"remaining_bowls_home,omitempty"`
	CurrentEnd         string `protobuf:"bytes,3,opt,name=current_end,json=currentEnd" json:"current_end,omitempty"`
	Delivery           string `protobuf:"bytes,4,opt,name=delivery" json:"delivery,omitempty"`
}

func (m *BowlsMetadataV2) Reset()                    { *m = BowlsMetadataV2{} }
func (m *BowlsMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*BowlsMetadataV2) ProtoMessage()               {}
func (*BowlsMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *BowlsMetadataV2) GetRemainingBowlsAway() string {
	if m != nil {
		return m.RemainingBowlsAway
	}
	return ""
}

func (m *BowlsMetadataV2) GetRemainingBowlsHome() string {
	if m != nil {
		return m.RemainingBowlsHome
	}
	return ""
}

func (m *BowlsMetadataV2) GetCurrentEnd() string {
	if m != nil {
		return m.CurrentEnd
	}
	return ""
}

func (m *BowlsMetadataV2) GetDelivery() string {
	if m != nil {
		return m.Delivery
	}
	return ""
}

type CricketMetadata struct {
	DismissalsAway     int32  `protobuf:"varint,1,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     int32  `protobuf:"varint,2,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               int32  `protobuf:"varint,3,opt,name=over" json:"over,omitempty"`
	Innings            int32  `protobuf:"varint,4,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    int32  `protobuf:"varint,5,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    int32  `protobuf:"varint,6,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           int32  `protobuf:"varint,9,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           int32  `protobuf:"varint,10,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        int32  `protobuf:"varint,11,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        int32  `protobuf:"varint,12,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           int64  `protobuf:"varint,13,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   uint32 `protobuf:"varint,14,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam uint32 `protobuf:"varint,15,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         uint32 `protobuf:"varint,16,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	HomeTotalOvers     uint32 `protobuf:"varint,17,opt,name=home_total_overs,json=homeTotalOvers" json:"home_total_overs,omitempty"`
	AwayTotalOvers     uint32 `protobuf:"varint,18,opt,name=away_total_overs,json=awayTotalOvers" json:"away_total_overs,omitempty"`
	HomeOver           uint32 `protobuf:"varint,19,opt,name=home_over,json=homeOver" json:"home_over,omitempty"`
	AwayOver           uint32 `protobuf:"varint,20,opt,name=away_over,json=awayOver" json:"away_over,omitempty"`
	HomeBalls          string `protobuf:"bytes,21,opt,name=home_balls,json=homeBalls" json:"home_balls,omitempty"`
	AwayBalls          string `protobuf:"bytes,22,opt,name=away_balls,json=awayBalls" json:"away_balls,omitempty"`
}

func (m *CricketMetadata) Reset()                    { *m = CricketMetadata{} }
func (m *CricketMetadata) String() string            { return proto.CompactTextString(m) }
func (*CricketMetadata) ProtoMessage()               {}
func (*CricketMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CricketMetadata) GetDismissalsAway() int32 {
	if m != nil {
		return m.DismissalsAway
	}
	return 0
}

func (m *CricketMetadata) GetDismissalsHome() int32 {
	if m != nil {
		return m.DismissalsHome
	}
	return 0
}

func (m *CricketMetadata) GetOver() int32 {
	if m != nil {
		return m.Over
	}
	return 0
}

func (m *CricketMetadata) GetInnings() int32 {
	if m != nil {
		return m.Innings
	}
	return 0
}

func (m *CricketMetadata) GetPenaltyRunsHome() int32 {
	if m != nil {
		return m.PenaltyRunsHome
	}
	return 0
}

func (m *CricketMetadata) GetPenaltyRunsAway() int32 {
	if m != nil {
		return m.PenaltyRunsAway
	}
	return 0
}

func (m *CricketMetadata) GetHomeRuns() int32 {
	if m != nil {
		return m.HomeRuns
	}
	return 0
}

func (m *CricketMetadata) GetAwayRuns() int32 {
	if m != nil {
		return m.AwayRuns
	}
	return 0
}

func (m *CricketMetadata) GetHomeWickets() int32 {
	if m != nil {
		return m.HomeWickets
	}
	return 0
}

func (m *CricketMetadata) GetAwayWickets() int32 {
	if m != nil {
		return m.AwayWickets
	}
	return 0
}

func (m *CricketMetadata) GetTossTime() int64 {
	if m != nil {
		return m.TossTime
	}
	return 0
}

func (m *CricketMetadata) GetStartBattingTeam() uint32 {
	if m != nil {
		return m.StartBattingTeam
	}
	return 0
}

func (m *CricketMetadata) GetCurrentBattingTeam() uint32 {
	if m != nil {
		return m.CurrentBattingTeam
	}
	return 0
}

func (m *CricketMetadata) GetTossWinner() uint32 {
	if m != nil {
		return m.TossWinner
	}
	return 0
}

func (m *CricketMetadata) GetHomeTotalOvers() uint32 {
	if m != nil {
		return m.HomeTotalOvers
	}
	return 0
}

func (m *CricketMetadata) GetAwayTotalOvers() uint32 {
	if m != nil {
		return m.AwayTotalOvers
	}
	return 0
}

func (m *CricketMetadata) GetHomeOver() uint32 {
	if m != nil {
		return m.HomeOver
	}
	return 0
}

func (m *CricketMetadata) GetAwayOver() uint32 {
	if m != nil {
		return m.AwayOver
	}
	return 0
}

func (m *CricketMetadata) GetHomeBalls() string {
	if m != nil {
		return m.HomeBalls
	}
	return ""
}

func (m *CricketMetadata) GetAwayBalls() string {
	if m != nil {
		return m.AwayBalls
	}
	return ""
}

type CricketMetadataV2 struct {
	DismissalsAway     string `protobuf:"bytes,1,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     string `protobuf:"bytes,2,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               string `protobuf:"bytes,3,opt,name=over" json:"over,omitempty"`
	Innings            string `protobuf:"bytes,4,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    string `protobuf:"bytes,5,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    string `protobuf:"bytes,6,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           string `protobuf:"bytes,9,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           string `protobuf:"bytes,10,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        string `protobuf:"bytes,11,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        string `protobuf:"bytes,12,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           string `protobuf:"bytes,13,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   string `protobuf:"bytes,14,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam string `protobuf:"bytes,15,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         string `protobuf:"bytes,16,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	HomeTotalOvers     string `protobuf:"bytes,17,opt,name=home_total_overs,json=homeTotalOvers" json:"home_total_overs,omitempty"`
	AwayTotalOvers     string `protobuf:"bytes,18,opt,name=away_total_overs,json=awayTotalOvers" json:"away_total_overs,omitempty"`
	HomeOver           string `protobuf:"bytes,19,opt,name=home_over,json=homeOver" json:"home_over,omitempty"`
	AwayOver           string `protobuf:"bytes,20,opt,name=away_over,json=awayOver" json:"away_over,omitempty"`
	HomeBalls          string `protobuf:"bytes,21,opt,name=home_balls,json=homeBalls" json:"home_balls,omitempty"`
	AwayBalls          string `protobuf:"bytes,22,opt,name=away_balls,json=awayBalls" json:"away_balls,omitempty"`
}

func (m *CricketMetadataV2) Reset()                    { *m = CricketMetadataV2{} }
func (m *CricketMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*CricketMetadataV2) ProtoMessage()               {}
func (*CricketMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CricketMetadataV2) GetDismissalsAway() string {
	if m != nil {
		return m.DismissalsAway
	}
	return ""
}

func (m *CricketMetadataV2) GetDismissalsHome() string {
	if m != nil {
		return m.DismissalsHome
	}
	return ""
}

func (m *CricketMetadataV2) GetOver() string {
	if m != nil {
		return m.Over
	}
	return ""
}

func (m *CricketMetadataV2) GetInnings() string {
	if m != nil {
		return m.Innings
	}
	return ""
}

func (m *CricketMetadataV2) GetPenaltyRunsHome() string {
	if m != nil {
		return m.PenaltyRunsHome
	}
	return ""
}

func (m *CricketMetadataV2) GetPenaltyRunsAway() string {
	if m != nil {
		return m.PenaltyRunsAway
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeRuns() string {
	if m != nil {
		return m.HomeRuns
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayRuns() string {
	if m != nil {
		return m.AwayRuns
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeWickets() string {
	if m != nil {
		return m.HomeWickets
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayWickets() string {
	if m != nil {
		return m.AwayWickets
	}
	return ""
}

func (m *CricketMetadataV2) GetTossTime() string {
	if m != nil {
		return m.TossTime
	}
	return ""
}

func (m *CricketMetadataV2) GetStartBattingTeam() string {
	if m != nil {
		return m.StartBattingTeam
	}
	return ""
}

func (m *CricketMetadataV2) GetCurrentBattingTeam() string {
	if m != nil {
		return m.CurrentBattingTeam
	}
	return ""
}

func (m *CricketMetadataV2) GetTossWinner() string {
	if m != nil {
		return m.TossWinner
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeTotalOvers() string {
	if m != nil {
		return m.HomeTotalOvers
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayTotalOvers() string {
	if m != nil {
		return m.AwayTotalOvers
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeOver() string {
	if m != nil {
		return m.HomeOver
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayOver() string {
	if m != nil {
		return m.AwayOver
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeBalls() string {
	if m != nil {
		return m.HomeBalls
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayBalls() string {
	if m != nil {
		return m.AwayBalls
	}
	return ""
}

type EventStreamUpdate struct {
	Id        uint32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Locations *api.GeoRestriction `protobuf:"bytes,2,opt,name=locations" json:"locations,omitempty"`
	Live      bool                `protobuf:"varint,3,opt,name=live" json:"live,omitempty"`
}

func (m *EventStreamUpdate) Reset()                    { *m = EventStreamUpdate{} }
func (m *EventStreamUpdate) String() string            { return proto.CompactTextString(m) }
func (*EventStreamUpdate) ProtoMessage()               {}
func (*EventStreamUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *EventStreamUpdate) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventStreamUpdate) GetLocations() *api.GeoRestriction {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *EventStreamUpdate) GetLive() bool {
	if m != nil {
		return m.Live
	}
	return false
}

func init() {
	proto.RegisterType((*Competition)(nil), "pusher.Competition")
	proto.RegisterType((*Event)(nil), "pusher.Event")
	proto.RegisterType((*Market)(nil), "pusher.Market")
	proto.RegisterType((*Selection)(nil), "pusher.Selection")
	proto.RegisterType((*Outright)(nil), "pusher.Outright")
	proto.RegisterType((*OutrightSelection)(nil), "pusher.OutrightSelection")
	proto.RegisterType((*SportsTree)(nil), "pusher.SportsTree")
	proto.RegisterType((*SportsTreeEntity)(nil), "pusher.SportsTreeEntity")
	proto.RegisterType((*CompetitionTree)(nil), "pusher.CompetitionTree")
	proto.RegisterType((*EventList)(nil), "pusher.EventList")
	proto.RegisterType((*OutrightList)(nil), "pusher.OutrightList")
	proto.RegisterType((*EventMetadata)(nil), "pusher.EventMetadata")
	proto.RegisterType((*EventMetadata_Set)(nil), "pusher.EventMetadata.Set")
	proto.RegisterType((*EventMetadata_SummaryListing)(nil), "pusher.EventMetadata.SummaryListing")
	proto.RegisterType((*SoccerMetadata)(nil), "pusher.SoccerMetadata")
	proto.RegisterType((*SoccerMetadataV2)(nil), "pusher.SoccerMetadataV2")
	proto.RegisterType((*TennisMetadata)(nil), "pusher.TennisMetadata")
	proto.RegisterType((*TennisMetadataV2)(nil), "pusher.TennisMetadataV2")
	proto.RegisterType((*BasketballMetadata)(nil), "pusher.BasketballMetadata")
	proto.RegisterType((*BasketballMetadataV2)(nil), "pusher.BasketballMetadataV2")
	proto.RegisterType((*IceHockeyMetadata)(nil), "pusher.IceHockeyMetadata")
	proto.RegisterType((*IceHockeyMetadataV2)(nil), "pusher.IceHockeyMetadataV2")
	proto.RegisterType((*HandballMetadata)(nil), "pusher.HandballMetadata")
	proto.RegisterType((*HandballMetadataV2)(nil), "pusher.HandballMetadataV2")
	proto.RegisterType((*TableTennisMetadata)(nil), "pusher.TableTennisMetadata")
	proto.RegisterType((*TableTennisMetadataV2)(nil), "pusher.TableTennisMetadataV2")
	proto.RegisterType((*BaseballMetadata)(nil), "pusher.BaseballMetadata")
	proto.RegisterType((*BaseballMetadataV2)(nil), "pusher.BaseballMetadataV2")
	proto.RegisterType((*AmericanFootballMetadata)(nil), "pusher.AmericanFootballMetadata")
	proto.RegisterType((*AmericanFootballMetadataV2)(nil), "pusher.AmericanFootballMetadataV2")
	proto.RegisterType((*SnookerMetadata)(nil), "pusher.SnookerMetadata")
	proto.RegisterType((*SnookerMetadataV2)(nil), "pusher.SnookerMetadataV2")
	proto.RegisterType((*DartsMetadata)(nil), "pusher.DartsMetadata")
	proto.RegisterType((*DartsMetadataV2)(nil), "pusher.DartsMetadataV2")
	proto.RegisterType((*FutsalMetadata)(nil), "pusher.FutsalMetadata")
	proto.RegisterType((*FutsalMetadataV2)(nil), "pusher.FutsalMetadataV2")
	proto.RegisterType((*BowlsMetadata)(nil), "pusher.BowlsMetadata")
	proto.RegisterType((*BowlsMetadataV2)(nil), "pusher.BowlsMetadataV2")
	proto.RegisterType((*CricketMetadata)(nil), "pusher.CricketMetadata")
	proto.RegisterType((*CricketMetadataV2)(nil), "pusher.CricketMetadataV2")
	proto.RegisterType((*EventStreamUpdate)(nil), "pusher.EventStreamUpdate")
}

func init() { proto.RegisterFile("sportsbook/api/pusher/sportsbook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6e, 0x23, 0xc7,
	0xf1, 0xf7, 0x90, 0x22, 0xc5, 0x2e, 0x8a, 0x12, 0xd5, 0xab, 0xdd, 0x9d, 0x95, 0xbc, 0x5e, 0x79,
	0xbc, 0xfe, 0x5b, 0xf8, 0xc7, 0x96, 0x6d, 0x3a, 0x88, 0xf3, 0x69, 0x44, 0xda, 0xac, 0x2d, 0x21,
	0xb1, 0xd7, 0x18, 0x29, 0x72, 0x90, 0xcb, 0x60, 0xc4, 0xe9, 0x95, 0xc6, 0x22, 0x67, 0x88, 0xe9,
	0x96, 0x76, 0x89, 0x20, 0xc7, 0x00, 0x79, 0x85, 0x20, 0x87, 0x3c, 0x40, 0x80, 0x20, 0xc8, 0x03,
	0xe4, 0x92, 0x43, 0x1e, 0x20, 0xc8, 0x31, 0x8e, 0x91, 0x67, 0x30, 0x02, 0xe4, 0x16, 0x54, 0x75,
	0xcf, 0x27, 0x47, 0x12, 0x15, 0x18, 0x3e, 0xf8, 0xc6, 0xae, 0xaa, 0xae, 0xae, 0xaa, 0xfe, 0x75,
	0x57, 0x55, 0x73, 0xe0, 0xff, 0xe4, 0x24, 0x4e, 0x94, 0x3c, 0x8e, 0xe3, 0xb3, 0x37, 0xfd, 0x49,
	0xf8, 0xe6, 0xe4, 0x5c, 0x9e, 0x8a, 0xe4, 0xcd, 0x9c, 0xba, 0x3d, 0x49, 0x62, 0x15, 0xf3, 0xb6,
	0x66, 0xac, 0x3f, 0xa8, 0xc8, 0x57, 0x05, 0x9d, 0x3f, 0x34, 0xa0, 0xfb, 0x28, 0x1e, 0x4f, 0x84,
	0x0a, 0x55, 0x18, 0x47, 0x7c, 0x19, 0x1a, 0x61, 0x60, 0x5b, 0x9b, 0xd6, 0x56, 0xcf, 0x6d, 0x84,
	0x01, 0xe7, 0xb0, 0x10, 0xf9, 0x63, 0x61, 0x37, 0x36, 0xad, 0x2d, 0xe6, 0xd2, 0x6f, 0xde, 0x87,
	0xe6, 0x99, 0x98, 0xda, 0x1d, 0x22, 0xe1, 0x4f, 0xfe, 0x10, 0xda, 0x27, 0x49, 0x7c, 0x3e, 0x91,
	0x76, 0x73, 0xb3, 0xb9, 0xd5, 0x1d, 0x2c, 0x6d, 0xfb, 0x93, 0x70, 0xfb, 0x03, 0x11, 0x89, 0x24,
	0x1c, 0xba, 0x86, 0xc7, 0x1d, 0x68, 0xd1, 0xfa, 0x76, 0x6b, 0xd3, 0x9a, 0x11, 0xd2, 0x2c, 0xbe,
	0x0e, 0x9d, 0x49, 0x12, 0xc6, 0x49, 0xa8, 0xa6, 0xf6, 0x22, 0x59, 0x91, 0x8d, 0xb9, 0x03, 0x0b,
	0xca, 0x3f, 0x91, 0x76, 0x77, 0xb3, 0xb9, 0xb5, 0x3c, 0x58, 0xa6, 0xe9, 0x8f, 0x23, 0x15, 0xaa,
	0xe9, 0xa1, 0x7f, 0xe2, 0x12, 0x8f, 0x7f, 0x02, 0xf6, 0x30, 0x09, 0x87, 0x67, 0x42, 0x79, 0xc3,
	0xdc, 0x2d, 0x4f, 0x4d, 0x27, 0xc2, 0x86, 0x4d, 0x6b, 0x6b, 0x79, 0xb0, 0x41, 0xf3, 0x1e, 0x69,
	0xa1, 0x82, 0xeb, 0x87, 0xd3, 0x89, 0xd8, 0x7b, 0xc1, 0xbd, 0x33, 0xac, 0xe5, 0xec, 0xb6, 0x61,
	0x01, 0x95, 0x38, 0xbf, 0x6b, 0x42, 0xeb, 0xf1, 0x85, 0x88, 0x14, 0x7f, 0x11, 0x98, 0x0a, 0xc7,
	0x42, 0x2a, 0x7f, 0x3c, 0xa1, 0x88, 0x35, 0xdd, 0x9c, 0x60, 0x02, 0xd9, 0xc8, 0x02, 0xb9, 0x06,
	0xad, 0x70, 0xec, 0x9f, 0x08, 0xfb, 0x16, 0x85, 0x4d, 0x0f, 0xf8, 0x06, 0x30, 0xa9, 0xfc, 0x44,
	0x49, 0xcf, 0x57, 0xf6, 0x02, 0xe9, 0xe8, 0x68, 0xc2, 0x8e, 0xe2, 0x2f, 0xc3, 0x52, 0x3c, 0x11,
	0x91, 0x37, 0xf6, 0x93, 0x33, 0xa1, 0x24, 0x05, 0xbc, 0xe7, 0x76, 0x91, 0xf6, 0xa1, 0x26, 0xf1,
	0x2d, 0x58, 0x4c, 0xb9, 0x8c, 0x22, 0xbf, 0xbc, 0xad, 0x77, 0x7e, 0x5b, 0x4b, 0xb8, 0x29, 0x9b,
	0x6f, 0x41, 0x5b, 0x2a, 0x5f, 0x9d, 0x4b, 0x13, 0x86, 0xbe, 0x0e, 0x1f, 0x7a, 0x72, 0x40, 0x74,
	0xd7, 0xf0, 0x71, 0xd9, 0xd3, 0x78, 0x2c, 0xbc, 0x49, 0xa8, 0x86, 0xa7, 0x22, 0xb1, 0x57, 0xc8,
	0xe0, 0x2e, 0xd2, 0x3e, 0xd6, 0x24, 0x14, 0xf1, 0x9f, 0xf9, 0xd3, 0x4c, 0xa4, 0xaf, 0x45, 0x90,
	0x96, 0x8a, 0xbc, 0x0a, 0xcb, 0xa3, 0xf0, 0x42, 0x78, 0xfe, 0x85, 0x1f, 0x8e, 0xfc, 0xe3, 0x91,
	0xb0, 0x57, 0x37, 0xad, 0xad, 0x8e, 0xdb, 0x43, 0xea, 0x4e, 0x4a, 0xe4, 0x6f, 0x00, 0x9f, 0xf8,
	0xc9, 0xc8, 0x9f, 0x7a, 0x89, 0x90, 0x2a, 0x09, 0x87, 0x18, 0x70, 0x9b, 0x93, 0xa7, 0xab, 0x9a,
	0xe3, 0xe6, 0x0c, 0xee, 0xc0, 0x92, 0x51, 0x18, 0x8e, 0x10, 0x22, 0x36, 0x09, 0x96, 0x68, 0xce,
	0x9f, 0x1b, 0xd0, 0xd6, 0xde, 0xcf, 0x85, 0x66, 0x1b, 0x16, 0x27, 0x49, 0x38, 0xf6, 0x93, 0xa9,
	0xdd, 0x24, 0x0b, 0xd3, 0x21, 0xbf, 0x93, 0xa1, 0x7a, 0x61, 0xb3, 0xb9, 0xc5, 0x32, 0x1c, 0x73,
	0x0d, 0x05, 0x82, 0x31, 0x73, 0xe9, 0x37, 0x7f, 0x1b, 0x40, 0x8a, 0x91, 0x20, 0x2b, 0xa5, 0xdd,
	0xa6, 0xbd, 0x58, 0x4d, 0xf7, 0xe2, 0x20, 0xe5, 0xb8, 0x05, 0x21, 0xda, 0xfb, 0xf1, 0x85, 0x97,
	0x88, 0x13, 0xf1, 0x9c, 0xb0, 0xce, 0xdc, 0x8e, 0x1c, 0x5f, 0xb8, 0x38, 0xe6, 0xf7, 0x01, 0x90,
	0xf9, 0x34, 0x14, 0xa3, 0x40, 0x9a, 0xa3, 0x86, 0xe2, 0xef, 0x13, 0x81, 0x7f, 0x03, 0x56, 0xfd,
	0xa1, 0xc2, 0xf8, 0x16, 0x56, 0x65, 0xe4, 0x67, 0x5f, 0x33, 0x0e, 0xf2, 0x85, 0x8a, 0x67, 0x0a,
	0x2a, 0x67, 0x8a, 0x9b, 0x33, 0xd5, 0xdb, 0xb4, 0xb6, 0x16, 0xf4, 0x19, 0x72, 0x7e, 0xdf, 0x04,
	0x96, 0x4d, 0xbf, 0x06, 0xe6, 0x75, 0x11, 0xbd, 0x07, 0x1d, 0x8a, 0x94, 0x17, 0x06, 0x14, 0xd2,
	0x9e, 0xbb, 0x48, 0xe3, 0xfd, 0x00, 0x59, 0x02, 0x21, 0x87, 0xac, 0x05, 0xcd, 0xa2, 0xf1, 0x7e,
	0x80, 0xe1, 0xd0, 0x58, 0x45, 0x5e, 0x4b, 0x9b, 0xa9, 0x09, 0xfb, 0x01, 0x6e, 0x52, 0x7c, 0xae,
	0x86, 0xf1, 0x58, 0xd8, 0x6d, 0x5a, 0x29, 0x1d, 0xf2, 0xff, 0x87, 0x55, 0x39, 0x11, 0xc3, 0xd0,
	0x1f, 0x79, 0xc7, 0x42, 0x79, 0x17, 0xfe, 0xe8, 0x5c, 0x98, 0x68, 0xae, 0x18, 0xc6, 0xae, 0x50,
	0x47, 0x48, 0xc6, 0x25, 0x26, 0x23, 0x7f, 0x2a, 0x12, 0x5c, 0xa2, 0x63, 0x22, 0x41, 0x84, 0xfd,
	0x80, 0xdf, 0x85, 0x45, 0x25, 0xfc, 0x31, 0xb2, 0x74, 0x20, 0xdb, 0x38, 0xdc, 0x27, 0xd0, 0xc4,
	0x41, 0xa0, 0xcf, 0x8d, 0xe5, 0xd2, 0x6f, 0x32, 0x36, 0x8c, 0x3c, 0xa9, 0xfc, 0x33, 0x61, 0x2f,
	0x11, 0xa3, 0x33, 0x0e, 0xa3, 0x03, 0x1c, 0x6b, 0x4f, 0x9e, 0x1b, 0x66, 0xcf, 0x30, 0xfd, 0xe7,
	0x9a, 0xf9, 0x7a, 0x76, 0x0e, 0x97, 0xe9, 0x1c, 0xae, 0xd1, 0x39, 0xcc, 0xc2, 0x3d, 0x7b, 0x16,
	0x8f, 0xfd, 0xe1, 0x99, 0x48, 0xa4, 0x47, 0x36, 0xf4, 0x49, 0x5b, 0xd7, 0xd0, 0x9e, 0x04, 0x81,
	0x74, 0xbe, 0xb0, 0xa0, 0xf3, 0xe4, 0x5c, 0x25, 0xe1, 0xc9, 0xe9, 0x4d, 0xef, 0xa4, 0x2b, 0x6f,
	0x9f, 0xbb, 0xb0, 0x28, 0xa2, 0x80, 0x58, 0x2d, 0x62, 0xb5, 0x71, 0xb8, 0xa3, 0xf8, 0x77, 0x4a,
	0x50, 0xd7, 0xd7, 0xce, 0xbd, 0x14, 0xea, 0xa9, 0x25, 0xf5, 0x90, 0x9f, 0xff, 0x12, 0x7a, 0x00,
	0xdd, 0xa7, 0x61, 0x14, 0xca, 0x53, 0x41, 0x16, 0x74, 0xc9, 0x02, 0x48, 0x49, 0x3b, 0xca, 0xf9,
	0x6b, 0x03, 0x56, 0x67, 0x16, 0xfb, 0xdf, 0xc0, 0x9a, 0x21, 0xb2, 0x59, 0x46, 0xe4, 0x2b, 0xd0,
	0x4b, 0x73, 0x48, 0x9c, 0xe4, 0xa8, 0x5c, 0xca, 0x89, 0x05, 0x74, 0xb4, 0x2f, 0x43, 0x47, 0xe7,
	0x2a, 0x74, 0xb0, 0x4b, 0xd1, 0x01, 0x73, 0xa0, 0xa3, 0x16, 0xfb, 0x4b, 0xf5, 0xd8, 0x2f, 0x9c,
	0xa0, 0x5e, 0xe9, 0x04, 0x39, 0xef, 0x01, 0x1c, 0x50, 0x59, 0x70, 0x98, 0x08, 0xc1, 0xdf, 0x82,
	0xb6, 0x2e, 0x12, 0x6c, 0x8b, 0x76, 0xd6, 0xce, 0x2e, 0xb1, 0x4c, 0x46, 0xe7, 0x5c, 0xd7, 0xc8,
	0x39, 0xbf, 0xb2, 0xa0, 0x5f, 0x65, 0xce, 0x75, 0xf3, 0x7e, 0x0f, 0x96, 0x0a, 0x39, 0x3a, 0xad,
	0x1d, 0xee, 0xa6, 0x0b, 0x16, 0x33, 0x70, 0x22, 0x84, 0x5b, 0x12, 0x4e, 0x8b, 0x90, 0x85, 0xac,
	0x08, 0x71, 0xfe, 0xd5, 0x80, 0x95, 0xca, 0x9c, 0x9b, 0x94, 0x33, 0xbd, 0xbc, 0x9c, 0xc9, 0x72,
	0x75, 0xb7, 0x98, 0xab, 0xb3, 0xf2, 0xa5, 0x79, 0x79, 0xf9, 0xf2, 0xb0, 0x94, 0x32, 0x2e, 0x2b,
	0x84, 0x5e, 0x85, 0x36, 0x61, 0x4c, 0xda, 0x2d, 0x92, 0xea, 0xa5, 0x2e, 0xd3, 0x49, 0x70, 0x0d,
	0x93, 0x6f, 0x03, 0x8b, 0x0d, 0xc2, 0xd3, 0x94, 0xd2, 0xaf, 0x9e, 0x33, 0x37, 0x17, 0xc1, 0x33,
	0xa3, 0xa1, 0x3c, 0x8c, 0xcf, 0x23, 0x65, 0x2e, 0x38, 0x20, 0xd2, 0x23, 0xa4, 0x60, 0x4e, 0x4e,
	0xa5, 0x8d, 0x8c, 0xbe, 0xe9, 0x7a, 0x29, 0x55, 0x8b, 0x5d, 0x91, 0x2f, 0x9c, 0x01, 0x30, 0x32,
	0xf2, 0x27, 0xa1, 0x54, 0x05, 0x3f, 0x1a, 0x57, 0xf8, 0xe1, 0xbc, 0x07, 0x4b, 0xa9, 0xb9, 0x34,
	0xad, 0xe4, 0x57, 0xe3, 0x5a, 0xbf, 0x9c, 0xff, 0xac, 0x42, 0x8f, 0x34, 0x7e, 0x28, 0x94, 0x1f,
	0xf8, 0xca, 0xc7, 0x6b, 0x51, 0x7b, 0x6a, 0x0e, 0x8b, 0xa5, 0xeb, 0x0f, 0x91, 0x5f, 0x24, 0xb8,
	0x87, 0x72, 0x18, 0x27, 0x82, 0x16, 0x68, 0xb9, 0x7a, 0xc0, 0xbf, 0x8d, 0x77, 0x97, 0xf2, 0x68,
	0x90, 0x02, 0xee, 0x5e, 0xc9, 0xea, 0x74, 0x8d, 0xed, 0x03, 0xa1, 0x5c, 0x26, 0x85, 0x3a, 0x20,
	0x59, 0xba, 0x0c, 0x46, 0xc2, 0x4f, 0x44, 0xa0, 0x67, 0xd3, 0x06, 0xb7, 0xdc, 0x25, 0x43, 0x24,
	0x29, 0xcc, 0xda, 0xda, 0x2e, 0xbc, 0x73, 0x4c, 0x7d, 0xc0, 0x88, 0x72, 0x18, 0x8e, 0x05, 0xdf,
	0x86, 0x5b, 0x39, 0xdb, 0x13, 0xcf, 0x95, 0x88, 0x02, 0x11, 0x98, 0x8c, 0xb6, 0x9a, 0xc9, 0x3d,
	0x36, 0x0c, 0xfe, 0x08, 0x80, 0xd6, 0xf2, 0x46, 0xa1, 0x54, 0xf6, 0x22, 0x59, 0xfb, 0xf0, 0x12,
	0x6b, 0xcf, 0xc7, 0x58, 0xb3, 0x60, 0x7c, 0xc3, 0xe8, 0xc4, 0x65, 0x34, 0x8f, 0xa2, 0xbd, 0x03,
	0x6c, 0xe8, 0x27, 0x81, 0xd6, 0xd1, 0xb9, 0x81, 0x8e, 0x0e, 0x4e, 0x23, 0x15, 0xef, 0x02, 0x93,
	0xf1, 0x70, 0x28, 0x12, 0xef, 0x62, 0x60, 0xdf, 0x25, 0xf4, 0xe7, 0xd7, 0x02, 0x31, 0x52, 0x1d,
	0x47, 0x83, 0xbd, 0x17, 0xdc, 0x8e, 0x16, 0x3e, 0x1a, 0xe0, 0x44, 0x25, 0xa2, 0x28, 0x94, 0x38,
	0xd1, 0x2e, 0x4f, 0x3c, 0x24, 0x46, 0x79, 0xa2, 0x16, 0x3e, 0x1a, 0xf0, 0x47, 0xd0, 0x3b, 0xf6,
	0xe5, 0x99, 0x50, 0xc7, 0xfe, 0x68, 0x84, 0x93, 0xef, 0xd1, 0xe4, 0x17, 0xd3, 0xc9, 0xbb, 0x19,
	0xb3, 0xa4, 0x60, 0x29, 0x9f, 0x74, 0x34, 0xe0, 0x3b, 0xd0, 0x0b, 0x87, 0xc2, 0x3b, 0x8d, 0x87,
	0x67, 0x62, 0xea, 0x1d, 0x0d, 0xec, 0x75, 0x52, 0xb2, 0x91, 0x2a, 0xd9, 0x1f, 0x8a, 0x3d, 0xe2,
	0x95, 0x74, 0x74, 0xc3, 0x94, 0x7c, 0x34, 0xe0, 0x3f, 0x80, 0xee, 0xa9, 0x1f, 0x05, 0xa9, 0x15,
	0x1b, 0xa4, 0x60, 0x3d, 0x55, 0xb0, 0x67, 0x58, 0xa5, 0xf9, 0x90, 0x4e, 0x38, 0x1a, 0xf0, 0x0f,
	0x60, 0x45, 0x61, 0x99, 0xeb, 0xe5, 0x51, 0x78, 0x91, 0x54, 0xdc, 0xcf, 0xa2, 0x80, 0xec, 0x9a,
	0x50, 0xf4, 0x54, 0xce, 0xd0, 0x76, 0x1c, 0xfb, 0x52, 0xa4, 0x76, 0xdc, 0x2f, 0xdb, 0xb1, 0x6b,
	0x58, 0x65, 0x3b, 0xd2, 0x09, 0x47, 0x03, 0x7e, 0x04, 0x6b, 0xfe, 0x18, 0xaf, 0x20, 0x3f, 0xf2,
	0x9e, 0xc6, 0x71, 0x16, 0xd5, 0x97, 0x48, 0x8f, 0x93, 0xea, 0xd9, 0x31, 0x32, 0xef, 0x1b, 0x91,
	0x92, 0x3e, 0xee, 0x57, 0xb8, 0x47, 0x03, 0xfe, 0x5d, 0x00, 0x19, 0xc5, 0xf1, 0x99, 0x46, 0xc6,
	0x03, 0xd2, 0x96, 0x1d, 0xa7, 0x03, 0xcd, 0x29, 0x29, 0x61, 0x46, 0xfc, 0x68, 0xc0, 0xbf, 0x09,
	0x9d, 0x80, 0x6a, 0x8f, 0x8b, 0x81, 0xbd, 0x49, 0x33, 0xb3, 0x9b, 0xff, 0x47, 0x48, 0x2f, 0xcd,
	0x5b, 0x24, 0x51, 0x8d, 0xa8, 0xa7, 0xe7, 0x4a, 0xfa, 0x64, 0xfe, 0xcb, 0x65, 0x44, 0xbd, 0x4f,
	0x8c, 0x32, 0xa2, 0xb4, 0xb0, 0x5e, 0xee, 0x38, 0x7e, 0x36, 0xa2, 0xe5, 0x9c, 0xf2, 0x72, 0xbb,
	0x48, 0x2f, 0x2f, 0x47, 0xa2, 0xda, 0xc1, 0xb4, 0x9d, 0xbc, 0x18, 0xd8, 0xaf, 0x94, 0x1d, 0x34,
	0x3d, 0x64, 0xd9, 0x41, 0x23, 0x7e, 0x34, 0xa0, 0x4c, 0x4a, 0x07, 0x81, 0x6e, 0xd9, 0xee, 0xe0,
	0x4e, 0xfd, 0x91, 0xd9, 0xb3, 0x5c, 0x23, 0x87, 0x33, 0x34, 0x50, 0xe8, 0xda, 0x2d, 0xcc, 0x28,
	0x03, 0x04, 0x67, 0x68, 0x39, 0xfe, 0x7d, 0x80, 0x1c, 0xf2, 0x94, 0xae, 0xca, 0xb0, 0xa8, 0x1c,
	0x92, 0x3d, 0xcb, 0x2d, 0xc8, 0xa3, 0x77, 0xf9, 0x01, 0xa1, 0xc2, 0xa1, 0xe0, 0xdd, 0xcc, 0xe9,
	0xd8, 0xb3, 0x5c, 0x96, 0x9d, 0x0d, 0xfe, 0x2d, 0xe8, 0xa4, 0x40, 0xa7, 0xd4, 0x59, 0xd8, 0x87,
	0xea, 0xb1, 0xd8, 0xb3, 0xdc, 0x4c, 0x96, 0xff, 0x10, 0x96, 0x8a, 0x47, 0x82, 0xaa, 0xe0, 0xc2,
	0x99, 0xac, 0x39, 0x0f, 0x7b, 0x96, 0xdb, 0x2d, 0x9c, 0x06, 0x5c, 0x39, 0x85, 0x36, 0xf5, 0xa6,
	0x85, 0x95, 0xab, 0x07, 0x01, 0x57, 0x4e, 0x65, 0xf9, 0x13, 0x58, 0x9d, 0x39, 0x04, 0x54, 0x50,
	0x77, 0x07, 0x9b, 0xd7, 0x9d, 0x80, 0x3d, 0xcb, 0xed, 0x57, 0xf1, 0xcf, 0xdf, 0x81, 0x45, 0x03,
	0x67, 0xea, 0x6d, 0x0b, 0x88, 0xaa, 0x40, 0x7f, 0xcf, 0x72, 0x53, 0x49, 0xfe, 0x06, 0xb4, 0x08,
	0xcb, 0xd4, 0xe3, 0x76, 0x07, 0xb7, 0x6b, 0x31, 0xbf, 0x67, 0xb9, 0x5a, 0x0a, 0x21, 0xa1, 0x21,
	0x4c, 0xef, 0x06, 0x05, 0x48, 0x94, 0xc1, 0x8e, 0x90, 0xd0, 0x72, 0xb8, 0x00, 0xa1, 0xd7, 0x5e,
	0x2b, 0x2f, 0x50, 0x42, 0x39, 0x2e, 0x40, 0x52, 0xe8, 0x84, 0x81, 0xac, 0x7d, 0xbb, 0xec, 0x44,
	0x05, 0xde, 0xe8, 0x84, 0x91, 0xac, 0x69, 0xee, 0xef, 0xd4, 0x34, 0xf7, 0xeb, 0x1b, 0xd0, 0x3c,
	0x10, 0x2a, 0x4f, 0xc5, 0x56, 0x21, 0x15, 0xaf, 0xff, 0xba, 0x01, 0xcb, 0xe5, 0x8c, 0x83, 0xd5,
	0xfb, 0xd0, 0x8f, 0x86, 0x62, 0x34, 0x12, 0x81, 0xc9, 0xe9, 0x39, 0x01, 0xcb, 0x1b, 0xd3, 0xbd,
	0x15, 0x4a, 0x38, 0xd0, 0xa4, 0x8f, 0xb0, 0x90, 0x2b, 0xb5, 0x77, 0xcd, 0x4a, 0x7b, 0xb7, 0x81,
	0xa9, 0xc8, 0x1f, 0xeb, 0xb9, 0xba, 0x6a, 0xec, 0x20, 0x81, 0x66, 0x16, 0x7a, 0xbf, 0x56, 0xb5,
	0xf7, 0xa3, 0x54, 0xde, 0x36, 0xad, 0x3e, 0x66, 0xf1, 0xfb, 0x00, 0xf4, 0x3e, 0xa2, 0x7d, 0xc2,
	0x56, 0xb3, 0xe5, 0x32, 0xa4, 0x64, 0x35, 0x00, 0xbd, 0x8d, 0x68, 0x76, 0x47, 0xb3, 0x91, 0xa2,
	0xd9, 0xe9, 0xe3, 0x01, 0xcb, 0x1f, 0x0f, 0x76, 0x7b, 0xd0, 0x1d, 0x9b, 0x28, 0x7b, 0x17, 0x83,
	0x5d, 0x80, 0x4e, 0x3a, 0x74, 0x3e, 0xc7, 0x28, 0x95, 0xee, 0x0b, 0x2c, 0x7e, 0x86, 0x71, 0x12,
	0x61, 0x4f, 0x88, 0x6a, 0x29, 0x50, 0x2d, 0xb7, 0x6b, 0x68, 0x3b, 0xcf, 0xfc, 0x69, 0x51, 0x04,
	0x0d, 0xa3, 0x58, 0xe5, 0x22, 0x7b, 0xd8, 0x37, 0x3f, 0x84, 0x65, 0xac, 0x65, 0x30, 0xc7, 0x1b,
	0x3d, 0x4d, 0x12, 0x5a, 0x4a, 0x44, 0xf0, 0x08, 0x89, 0xa4, 0xa8, 0x24, 0x45, 0xaa, 0x16, 0xca,
	0x52, 0x7b, 0xa6, 0x07, 0x9f, 0x8a, 0xd1, 0x28, 0x7e, 0x56, 0x54, 0xd7, 0x22, 0xc1, 0x15, 0xcd,
	0xc8, 0x35, 0x56, 0x65, 0x4f, 0xd3, 0x9e, 0xbe, 0x2c, 0x4b, 0x7a, 0xdf, 0x86, 0xdb, 0x46, 0xb6,
	0x62, 0xaa, 0x0e, 0x3a, 0xd7, 0x4c, 0xb7, 0x68, 0x70, 0xdd, 0x14, 0x5a, 0xa2, 0x53, 0x37, 0x05,
	0x57, 0x71, 0xfe, 0xd2, 0x84, 0x7e, 0xb5, 0x8a, 0xa9, 0x0d, 0x32, 0xbb, 0x3e, 0xc8, 0x6c, 0x9e,
	0x20, 0xb3, 0xb9, 0x82, 0xcc, 0xe6, 0x0d, 0x32, 0xbb, 0x41, 0x90, 0xd9, 0x0d, 0x83, 0xcc, 0x6e,
	0x1e, 0x64, 0x56, 0x17, 0xe4, 0xca, 0xa1, 0xd1, 0xe0, 0xbf, 0xf4, 0xd0, 0x80, 0x66, 0xe7, 0x87,
	0xa6, 0x5a, 0xef, 0x77, 0x67, 0xea, 0x7d, 0xe7, 0x14, 0x96, 0xcb, 0x69, 0x83, 0xdf, 0x81, 0xb6,
	0x14, 0xc9, 0x85, 0x48, 0xcc, 0x09, 0x31, 0x23, 0xbc, 0x47, 0x42, 0xe9, 0xa9, 0x50, 0x1c, 0x27,
	0xc2, 0x3f, 0xa3, 0x6d, 0xeb, 0xb8, 0x10, 0xca, 0x43, 0x43, 0x41, 0x63, 0x4e, 0xfc, 0xcc, 0xd6,
	0x16, 0x5d, 0x5a, 0x0c, 0x29, 0x64, 0x8c, 0xf3, 0x29, 0xf4, 0xab, 0x05, 0x5b, 0x65, 0x2d, 0x76,
	0xd5, 0x5a, 0xec, 0x9a, 0xb5, 0x58, 0x71, 0xad, 0xdf, 0x58, 0xc0, 0x67, 0xd3, 0xb8, 0x6e, 0x46,
	0xe2, 0xe1, 0x99, 0x27, 0x55, 0x3c, 0x99, 0x98, 0xcb, 0x92, 0x9a, 0x91, 0x78, 0x78, 0x76, 0xa0,
	0x69, 0x78, 0x49, 0x27, 0x62, 0xec, 0x87, 0x51, 0x18, 0x9d, 0xe8, 0x86, 0x44, 0x2f, 0xdf, 0xcb,
	0xa8, 0xd4, 0x94, 0xbc, 0x0b, 0x76, 0x59, 0xcc, 0x0b, 0x23, 0x6f, 0x22, 0x92, 0x30, 0x0e, 0x0c,
	0x5a, 0x6f, 0x97, 0x26, 0xec, 0x47, 0x1f, 0x13, 0xd3, 0xf9, 0xad, 0x05, 0x6b, 0x75, 0x75, 0x78,
	0xbd, 0x75, 0xec, 0x2b, 0xb6, 0xee, 0x33, 0x0b, 0x56, 0x67, 0x4a, 0x18, 0x04, 0x92, 0x3c, 0x97,
	0x13, 0x11, 0x05, 0x1a, 0xb0, 0xe6, 0xee, 0x34, 0x34, 0x42, 0x6a, 0x41, 0x84, 0x8e, 0x41, 0xa3,
	0x24, 0x42, 0xf8, 0x9f, 0x71, 0xb0, 0x39, 0x57, 0xf8, 0x17, 0x6e, 0xea, 0x60, 0xeb, 0x2a, 0x07,
	0x3f, 0xb7, 0xe0, 0x56, 0x4d, 0x07, 0x53, 0xeb, 0x22, 0xbb, 0xde, 0x45, 0x36, 0x87, 0x8b, 0xec,
	0x2b, 0x76, 0xf1, 0x1f, 0x16, 0xf4, 0xab, 0xc5, 0xe4, 0xd7, 0x69, 0x0b, 0xff, 0x69, 0x01, 0x9f,
	0xed, 0x21, 0xbf, 0x4e, 0x3b, 0xb8, 0x0f, 0xb7, 0x6a, 0x2a, 0x7a, 0xbe, 0x0e, 0x1d, 0xf1, 0x7c,
	0x22, 0x82, 0x50, 0xa5, 0xfb, 0x97, 0x8d, 0x0b, 0x57, 0x69, 0xa3, 0x78, 0x6d, 0x3b, 0x3f, 0x86,
	0xdb, 0xb5, 0xcd, 0xf2, 0x8c, 0x32, 0x76, 0xa9, 0xb2, 0xec, 0x5e, 0x76, 0xbe, 0xb0, 0xa0, 0x5f,
	0x6d, 0x16, 0xf0, 0xb2, 0xa6, 0x24, 0x74, 0xec, 0x2b, 0x95, 0x65, 0x0d, 0xca, 0x4b, 0xbb, 0x44,
	0x41, 0x01, 0x4a, 0x62, 0x46, 0x40, 0xdb, 0x47, 0x79, 0xcd, 0x08, 0xac, 0x41, 0x0b, 0x35, 0x4a,
	0x83, 0x26, 0x3d, 0xd0, 0x54, 0x29, 0xa4, 0x89, 0xad, 0x1e, 0x70, 0x1b, 0x16, 0xa5, 0x4a, 0xc2,
	0x33, 0x21, 0x4d, 0xa9, 0x94, 0x0e, 0xe9, 0x49, 0xf9, 0x5c, 0x49, 0x53, 0x15, 0xd1, 0xef, 0x99,
	0x7f, 0xdc, 0x16, 0x67, 0xff, 0x71, 0xab, 0xfe, 0x6f, 0xd7, 0x99, 0xf9, 0xdf, 0xce, 0xf9, 0xb7,
	0x4e, 0x27, 0x95, 0xc7, 0x82, 0x3a, 0xc7, 0xd9, 0x75, 0x8e, 0xb3, 0xcb, 0x1d, 0x67, 0x37, 0x72,
	0x9c, 0xd5, 0x3b, 0xce, 0xbe, 0x54, 0xc7, 0x3f, 0xb3, 0xc0, 0xbe, 0xac, 0xb7, 0xe3, 0x2f, 0x01,
	0x4c, 0x62, 0x29, 0x85, 0x94, 0x61, 0x1c, 0xa5, 0xdb, 0x9e, 0x53, 0xe8, 0x3d, 0x34, 0x96, 0xf4,
	0xa8, 0x6c, 0xf6, 0x3c, 0x1b, 0xf3, 0x3e, 0x34, 0x55, 0x92, 0xd6, 0xce, 0xf8, 0x13, 0x9d, 0x9e,
	0x62, 0xd9, 0x63, 0x2a, 0x65, 0x3d, 0xa8, 0x39, 0x68, 0xad, 0x9b, 0x1e, 0xb4, 0xf6, 0x35, 0xd9,
	0x60, 0xfd, 0xf2, 0xe7, 0x9b, 0x1a, 0x17, 0xd9, 0x95, 0x2e, 0xb2, 0x7a, 0x17, 0x59, 0x8d, 0x8b,
	0xec, 0xab, 0x72, 0xf1, 0x23, 0x58, 0xa9, 0xf4, 0xd5, 0xe5, 0x25, 0x13, 0x11, 0x48, 0xb3, 0x7b,
	0xf9, 0x92, 0xae, 0x08, 0x08, 0x87, 0x17, 0xa1, 0x0c, 0x95, 0xd9, 0x3d, 0x3d, 0x70, 0x3e, 0x86,
	0xd5, 0x99, 0x27, 0xaa, 0x4b, 0x34, 0xb2, 0x2b, 0x35, 0xb2, 0x54, 0xe3, 0xcf, 0xa0, 0x57, 0x6a,
	0xe3, 0xb1, 0xe9, 0x1c, 0x89, 0x13, 0x2f, 0xed, 0x7e, 0x09, 0x3a, 0x23, 0x71, 0xa2, 0x8b, 0xda,
	0x35, 0x68, 0xa9, 0xd3, 0x24, 0x7e, 0x96, 0x5a, 0x45, 0x83, 0x5c, 0x73, 0xb3, 0x68, 0xeb, 0xcf,
	0x61, 0xa5, 0xf2, 0x28, 0x36, 0xab, 0x9b, 0x5d, 0xa6, 0x9b, 0xd5, 0xea, 0xce, 0xac, 0xfe, 0x05,
	0x2c, 0x97, 0x1f, 0x13, 0xe6, 0x2b, 0x2f, 0xab, 0x59, 0xaa, 0x71, 0x7d, 0x1e, 0x6e, 0xce, 0xe4,
	0x61, 0xe7, 0x97, 0xd0, 0xaf, 0x3e, 0xdb, 0xcd, 0x57, 0x3f, 0xd6, 0x2d, 0xcf, 0xae, 0x5f, 0xbe,
	0x9c, 0x24, 0x9d, 0x3f, 0x5a, 0xd0, 0x2b, 0x3d, 0x8c, 0xf0, 0xb7, 0x60, 0x2d, 0x07, 0x80, 0x7e,
	0x31, 0x2c, 0x74, 0xd9, 0x3c, 0xe3, 0xd1, 0x2c, 0x4a, 0xb4, 0x35, 0x33, 0x0a, 0x01, 0xa9, 0xcc,
	0x20, 0xc3, 0x1e, 0x40, 0x77, 0x78, 0x9e, 0x24, 0xd8, 0xd0, 0x88, 0x28, 0x2d, 0x3d, 0xc0, 0x90,
	0x1e, 0x47, 0x01, 0x1e, 0xc7, 0x40, 0x8c, 0xc2, 0x0b, 0x91, 0x4c, 0xcd, 0x35, 0x92, 0x8d, 0x9d,
	0x3f, 0x59, 0xb0, 0x52, 0x79, 0xb1, 0xbc, 0xd2, 0x68, 0x76, 0x63, 0xa3, 0xd9, 0xbc, 0x46, 0xb3,
	0x2b, 0x8d, 0x66, 0x05, 0xa3, 0xff, 0xd6, 0x82, 0x95, 0xca, 0x7b, 0x12, 0x7f, 0x0d, 0x56, 0x82,
	0x50, 0x8e, 0x43, 0x29, 0xfd, 0x72, 0x90, 0x97, 0x73, 0x32, 0xd9, 0x5a, 0x16, 0x2c, 0xc4, 0xb6,
	0x20, 0x48, 0x26, 0x62, 0xfe, 0xc0, 0x5c, 0xdf, 0x34, 0x89, 0x13, 0x3b, 0x30, 0x1b, 0x16, 0xc3,
	0x08, 0x3d, 0x49, 0x2f, 0xe4, 0x74, 0x88, 0x4d, 0xf2, 0x44, 0x44, 0xfe, 0x48, 0x4d, 0xbd, 0xe4,
	0x3c, 0x32, 0x8a, 0xcd, 0xab, 0x85, 0x61, 0xb8, 0xe7, 0x51, 0xd6, 0x7c, 0x97, 0x64, 0xc9, 0xda,
	0xf6, 0x8c, 0x2c, 0x99, 0xbb, 0x01, 0xd4, 0xd8, 0x92, 0x20, 0x75, 0xba, 0x2d, 0xb7, 0x83, 0x04,
	0x14, 0x40, 0x26, 0xa5, 0x33, 0x62, 0x82, 0x66, 0x22, 0x81, 0x98, 0x69, 0x22, 0x7b, 0x46, 0x81,
	0xd2, 0x6d, 0x6e, 0x4b, 0x27, 0xb2, 0x4f, 0x34, 0x29, 0x4b, 0x87, 0xa9, 0xc8, 0x92, 0x16, 0x41,
	0x5a, 0x2a, 0xb2, 0x01, 0x4c, 0xc5, 0x52, 0xea, 0x2b, 0xb8, 0xa7, 0xff, 0xd5, 0x47, 0x02, 0xdd,
	0xbe, 0xaf, 0x03, 0xa7, 0x7f, 0xf8, 0x29, 0x95, 0xd3, 0x0d, 0x2c, 0xfc, 0x31, 0x3d, 0xc2, 0xf6,
	0xdc, 0x3e, 0x71, 0x76, 0x35, 0xe3, 0x50, 0xf8, 0x63, 0x44, 0x49, 0xba, 0xe7, 0x25, 0xf9, 0x15,
	0x92, 0xe7, 0x86, 0x57, 0x9c, 0xf1, 0x00, 0xba, 0xb4, 0xf8, 0xb3, 0x30, 0x8a, 0xcc, 0x87, 0x41,
	0x3d, 0x17, 0x90, 0xf4, 0x09, 0x51, 0xf8, 0x16, 0xf4, 0xc9, 0x47, 0x15, 0x2b, 0x7f, 0xe4, 0xe1,
	0x16, 0x49, 0x7a, 0x3d, 0xed, 0xb9, 0xcb, 0x48, 0x3f, 0x44, 0xf2, 0x13, 0xa4, 0xa2, 0x24, 0xb9,
	0x5a, 0x94, 0xd4, 0x1f, 0x06, 0x2d, 0x23, 0xbd, 0x20, 0x99, 0x46, 0x9c, 0x36, 0xff, 0x96, 0x7e,
	0xf8, 0x43, 0x02, 0x72, 0xb3, 0x88, 0x13, 0x73, 0x4d, 0x33, 0x91, 0x40, 0xcc, 0xf4, 0x59, 0x42,
	0x17, 0x2f, 0xb7, 0xf3, 0x67, 0x89, 0x5d, 0x2a, 0x60, 0xd2, 0x67, 0x09, 0xcd, 0xbe, 0x93, 0x3f,
	0x4b, 0x10, 0xdb, 0xf9, 0x7b, 0x0b, 0x56, 0x67, 0xfe, 0x04, 0xb8, 0x0c, 0xd7, 0x6c, 0x5e, 0x5c,
	0xb3, 0x2b, 0x71, 0xcd, 0xea, 0x71, 0xcd, 0xe6, 0xc0, 0x35, 0xbb, 0x01, 0xae, 0xd9, 0x1c, 0xb8,
	0x66, 0x57, 0xe1, 0x9a, 0x5d, 0x83, 0x6b, 0x76, 0x3d, 0xae, 0xd9, 0x35, 0xb8, 0x66, 0x73, 0xe1,
	0x9a, 0xdd, 0x10, 0xd7, 0x6c, 0x5e, 0x5c, 0xb3, 0xb9, 0x70, 0xcd, 0xe6, 0xc6, 0x35, 0xbb, 0x1e,
	0xd7, 0xec, 0x2a, 0x5c, 0xb3, 0x2f, 0x0d, 0xd7, 0x9f, 0xc2, 0xaa, 0xf9, 0x26, 0x27, 0x11, 0xfe,
	0xf8, 0xa7, 0x93, 0xc0, 0x57, 0xb3, 0x9f, 0x52, 0xbc, 0x0d, 0x6c, 0x14, 0x0f, 0x7d, 0xfd, 0xe9,
	0x46, 0x83, 0xfe, 0x3a, 0xb8, 0x65, 0xbe, 0x76, 0x88, 0x0b, 0x9f, 0xec, 0xb9, 0xb9, 0x14, 0xe2,
	0x18, 0xf3, 0x81, 0xf9, 0xce, 0x8e, 0x7e, 0xef, 0xbe, 0x06, 0xaf, 0x0e, 0xe3, 0xf1, 0xf6, 0x71,
	0xa8, 0x4e, 0xfc, 0xb1, 0x18, 0xf9, 0xc7, 0x72, 0xbb, 0xf0, 0x91, 0x2a, 0xea, 0xd3, 0x7f, 0x47,
	0x1c, 0xb7, 0xe9, 0x83, 0xd5, 0x77, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x83, 0x0c, 0x2d, 0x68,
	0x03, 0x2b, 0x00, 0x00,
}

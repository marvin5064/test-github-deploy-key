// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/api/resulted/sportsbook.proto

/*
Package resulted is a generated protocol buffer package.

It is generated from these files:
	sportsbook/api/resulted/sportsbook.proto

It has these top-level messages:
	EventMetadata
	SoccerMetadata
	SoccerMetadataV2
	TennisMetadata
	TennisMetadataV2
	BasketballMetadata
	BasketballMetadataV2
	IceHockeyMetadata
	IceHockeyMetadataV2
	HandballMetadata
	HandballMetadataV2
	TableTennisMetadata
	TableTennisMetadataV2
	BaseballMetadata
	BaseballMetadataV2
	AmericanFootballMetadata
	AmericanFootballMetadataV2
	SnookerMetadata
	SnookerMetadataV2
	DartsMetadata
	DartsMetadataV2
	FutsalMetadata
	FutsalMetadataV2
	BowlsMetadata
	BowlsMetadataV2
	CricketMetadata
	CricketMetadataV2
*/
package resulted

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventMetadata struct {
	EventStatus  string                          `protobuf:"bytes,1,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
	Score        []int32                         `protobuf:"varint,2,rep,packed,name=score" json:"score,omitempty"`
	SetScores    []*EventMetadata_Set            `protobuf:"bytes,3,rep,name=set_scores,json=setScores" json:"set_scores,omitempty"`
	ClearedScore []int32                         `protobuf:"varint,4,rep,packed,name=cleared_score,json=clearedScore" json:"cleared_score,omitempty"`
	ScoreList    []*EventMetadata_SummaryListing `protobuf:"bytes,7,rep,name=score_list,json=scoreList" json:"score_list,omitempty"`
	CardList     []*EventMetadata_SummaryListing `protobuf:"bytes,8,rep,name=card_list,json=cardList" json:"card_list,omitempty"`
	// Types that are valid to be assigned to MetadataV2:
	//	*EventMetadata_SoccerV2
	//	*EventMetadata_TennisV2
	//	*EventMetadata_BasketballV2
	//	*EventMetadata_IceHockey_V2
	//	*EventMetadata_HandballV2
	//	*EventMetadata_TableTennisV2
	//	*EventMetadata_BaseballV2
	//	*EventMetadata_AmericanFootballV2
	//	*EventMetadata_SnookerV2
	//	*EventMetadata_DartsV2
	//	*EventMetadata_FutsalV2
	//	*EventMetadata_BowlsV2
	//	*EventMetadata_CricketV2
	MetadataV2 isEventMetadata_MetadataV2 `protobuf_oneof:"metadata_v2"`
	// Types that are valid to be assigned to Metadata:
	//	*EventMetadata_Soccer
	//	*EventMetadata_Tennis
	//	*EventMetadata_Basketball
	//	*EventMetadata_IceHockey
	//	*EventMetadata_Handball
	//	*EventMetadata_TableTennis
	//	*EventMetadata_Baseball
	//	*EventMetadata_AmericanFootball
	//	*EventMetadata_Snooker
	//	*EventMetadata_Darts
	//	*EventMetadata_Futsal
	//	*EventMetadata_Bowls
	//	*EventMetadata_Cricket
	Metadata isEventMetadata_Metadata `protobuf_oneof:"metadata"`
}

func (m *EventMetadata) Reset()                    { *m = EventMetadata{} }
func (m *EventMetadata) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata) ProtoMessage()               {}
func (*EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isEventMetadata_MetadataV2 interface{ isEventMetadata_MetadataV2() }
type isEventMetadata_Metadata interface{ isEventMetadata_Metadata() }

type EventMetadata_SoccerV2 struct {
	SoccerV2 *SoccerMetadataV2 `protobuf:"bytes,23,opt,name=soccer_v2,json=soccerV2,oneof"`
}
type EventMetadata_TennisV2 struct {
	TennisV2 *TennisMetadataV2 `protobuf:"bytes,24,opt,name=tennis_v2,json=tennisV2,oneof"`
}
type EventMetadata_BasketballV2 struct {
	BasketballV2 *BasketballMetadataV2 `protobuf:"bytes,25,opt,name=basketball_v2,json=basketballV2,oneof"`
}
type EventMetadata_IceHockey_V2 struct {
	IceHockey_V2 *IceHockeyMetadataV2 `protobuf:"bytes,26,opt,name=ice_hockey_V2,json=iceHockeyV2,oneof"`
}
type EventMetadata_HandballV2 struct {
	HandballV2 *HandballMetadataV2 `protobuf:"bytes,27,opt,name=handball_v2,json=handballV2,oneof"`
}
type EventMetadata_TableTennisV2 struct {
	TableTennisV2 *TableTennisMetadataV2 `protobuf:"bytes,28,opt,name=table_tennis_v2,json=tableTennisV2,oneof"`
}
type EventMetadata_BaseballV2 struct {
	BaseballV2 *BaseballMetadataV2 `protobuf:"bytes,29,opt,name=baseball_v2,json=baseballV2,oneof"`
}
type EventMetadata_AmericanFootballV2 struct {
	AmericanFootballV2 *AmericanFootballMetadataV2 `protobuf:"bytes,30,opt,name=american_football_v2,json=americanFootballV2,oneof"`
}
type EventMetadata_SnookerV2 struct {
	SnookerV2 *SnookerMetadataV2 `protobuf:"bytes,31,opt,name=snooker_v2,json=snookerV2,oneof"`
}
type EventMetadata_DartsV2 struct {
	DartsV2 *DartsMetadataV2 `protobuf:"bytes,32,opt,name=darts_v2,json=dartsV2,oneof"`
}
type EventMetadata_FutsalV2 struct {
	FutsalV2 *FutsalMetadataV2 `protobuf:"bytes,33,opt,name=futsal_v2,json=futsalV2,oneof"`
}
type EventMetadata_BowlsV2 struct {
	BowlsV2 *BowlsMetadataV2 `protobuf:"bytes,34,opt,name=bowls_v2,json=bowlsV2,oneof"`
}
type EventMetadata_CricketV2 struct {
	CricketV2 *CricketMetadataV2 `protobuf:"bytes,35,opt,name=cricket_v2,json=cricketV2,oneof"`
}
type EventMetadata_Soccer struct {
	Soccer *SoccerMetadata `protobuf:"bytes,9,opt,name=soccer,oneof"`
}
type EventMetadata_Tennis struct {
	Tennis *TennisMetadata `protobuf:"bytes,10,opt,name=tennis,oneof"`
}
type EventMetadata_Basketball struct {
	Basketball *BasketballMetadata `protobuf:"bytes,11,opt,name=basketball,oneof"`
}
type EventMetadata_IceHockey struct {
	IceHockey *IceHockeyMetadata `protobuf:"bytes,12,opt,name=ice_hockey,json=iceHockey,oneof"`
}
type EventMetadata_Handball struct {
	Handball *HandballMetadata `protobuf:"bytes,13,opt,name=handball,oneof"`
}
type EventMetadata_TableTennis struct {
	TableTennis *TableTennisMetadata `protobuf:"bytes,14,opt,name=table_tennis,json=tableTennis,oneof"`
}
type EventMetadata_Baseball struct {
	Baseball *BaseballMetadata `protobuf:"bytes,15,opt,name=baseball,oneof"`
}
type EventMetadata_AmericanFootball struct {
	AmericanFootball *AmericanFootballMetadata `protobuf:"bytes,16,opt,name=american_football,json=americanFootball,oneof"`
}
type EventMetadata_Snooker struct {
	Snooker *SnookerMetadata `protobuf:"bytes,17,opt,name=snooker,oneof"`
}
type EventMetadata_Darts struct {
	Darts *DartsMetadata `protobuf:"bytes,18,opt,name=darts,oneof"`
}
type EventMetadata_Futsal struct {
	Futsal *FutsalMetadata `protobuf:"bytes,19,opt,name=futsal,oneof"`
}
type EventMetadata_Bowls struct {
	Bowls *BowlsMetadata `protobuf:"bytes,20,opt,name=bowls,oneof"`
}
type EventMetadata_Cricket struct {
	Cricket *CricketMetadata `protobuf:"bytes,21,opt,name=cricket,oneof"`
}

func (*EventMetadata_SoccerV2) isEventMetadata_MetadataV2()           {}
func (*EventMetadata_TennisV2) isEventMetadata_MetadataV2()           {}
func (*EventMetadata_BasketballV2) isEventMetadata_MetadataV2()       {}
func (*EventMetadata_IceHockey_V2) isEventMetadata_MetadataV2()       {}
func (*EventMetadata_HandballV2) isEventMetadata_MetadataV2()         {}
func (*EventMetadata_TableTennisV2) isEventMetadata_MetadataV2()      {}
func (*EventMetadata_BaseballV2) isEventMetadata_MetadataV2()         {}
func (*EventMetadata_AmericanFootballV2) isEventMetadata_MetadataV2() {}
func (*EventMetadata_SnookerV2) isEventMetadata_MetadataV2()          {}
func (*EventMetadata_DartsV2) isEventMetadata_MetadataV2()            {}
func (*EventMetadata_FutsalV2) isEventMetadata_MetadataV2()           {}
func (*EventMetadata_BowlsV2) isEventMetadata_MetadataV2()            {}
func (*EventMetadata_CricketV2) isEventMetadata_MetadataV2()          {}
func (*EventMetadata_Soccer) isEventMetadata_Metadata()               {}
func (*EventMetadata_Tennis) isEventMetadata_Metadata()               {}
func (*EventMetadata_Basketball) isEventMetadata_Metadata()           {}
func (*EventMetadata_IceHockey) isEventMetadata_Metadata()            {}
func (*EventMetadata_Handball) isEventMetadata_Metadata()             {}
func (*EventMetadata_TableTennis) isEventMetadata_Metadata()          {}
func (*EventMetadata_Baseball) isEventMetadata_Metadata()             {}
func (*EventMetadata_AmericanFootball) isEventMetadata_Metadata()     {}
func (*EventMetadata_Snooker) isEventMetadata_Metadata()              {}
func (*EventMetadata_Darts) isEventMetadata_Metadata()                {}
func (*EventMetadata_Futsal) isEventMetadata_Metadata()               {}
func (*EventMetadata_Bowls) isEventMetadata_Metadata()                {}
func (*EventMetadata_Cricket) isEventMetadata_Metadata()              {}

func (m *EventMetadata) GetMetadataV2() isEventMetadata_MetadataV2 {
	if m != nil {
		return m.MetadataV2
	}
	return nil
}
func (m *EventMetadata) GetMetadata() isEventMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventMetadata) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

func (m *EventMetadata) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *EventMetadata) GetSetScores() []*EventMetadata_Set {
	if m != nil {
		return m.SetScores
	}
	return nil
}

func (m *EventMetadata) GetClearedScore() []int32 {
	if m != nil {
		return m.ClearedScore
	}
	return nil
}

func (m *EventMetadata) GetScoreList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *EventMetadata) GetCardList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *EventMetadata) GetSoccerV2() *SoccerMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_SoccerV2); ok {
		return x.SoccerV2
	}
	return nil
}

func (m *EventMetadata) GetTennisV2() *TennisMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_TennisV2); ok {
		return x.TennisV2
	}
	return nil
}

func (m *EventMetadata) GetBasketballV2() *BasketballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_BasketballV2); ok {
		return x.BasketballV2
	}
	return nil
}

func (m *EventMetadata) GetIceHockey_V2() *IceHockeyMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_IceHockey_V2); ok {
		return x.IceHockey_V2
	}
	return nil
}

func (m *EventMetadata) GetHandballV2() *HandballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_HandballV2); ok {
		return x.HandballV2
	}
	return nil
}

func (m *EventMetadata) GetTableTennisV2() *TableTennisMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_TableTennisV2); ok {
		return x.TableTennisV2
	}
	return nil
}

func (m *EventMetadata) GetBaseballV2() *BaseballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_BaseballV2); ok {
		return x.BaseballV2
	}
	return nil
}

func (m *EventMetadata) GetAmericanFootballV2() *AmericanFootballMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_AmericanFootballV2); ok {
		return x.AmericanFootballV2
	}
	return nil
}

func (m *EventMetadata) GetSnookerV2() *SnookerMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_SnookerV2); ok {
		return x.SnookerV2
	}
	return nil
}

func (m *EventMetadata) GetDartsV2() *DartsMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_DartsV2); ok {
		return x.DartsV2
	}
	return nil
}

func (m *EventMetadata) GetFutsalV2() *FutsalMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_FutsalV2); ok {
		return x.FutsalV2
	}
	return nil
}

func (m *EventMetadata) GetBowlsV2() *BowlsMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_BowlsV2); ok {
		return x.BowlsV2
	}
	return nil
}

func (m *EventMetadata) GetCricketV2() *CricketMetadataV2 {
	if x, ok := m.GetMetadataV2().(*EventMetadata_CricketV2); ok {
		return x.CricketV2
	}
	return nil
}

func (m *EventMetadata) GetSoccer() *SoccerMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Soccer); ok {
		return x.Soccer
	}
	return nil
}

func (m *EventMetadata) GetTennis() *TennisMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Tennis); ok {
		return x.Tennis
	}
	return nil
}

func (m *EventMetadata) GetBasketball() *BasketballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Basketball); ok {
		return x.Basketball
	}
	return nil
}

func (m *EventMetadata) GetIceHockey() *IceHockeyMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_IceHockey); ok {
		return x.IceHockey
	}
	return nil
}

func (m *EventMetadata) GetHandball() *HandballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Handball); ok {
		return x.Handball
	}
	return nil
}

func (m *EventMetadata) GetTableTennis() *TableTennisMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_TableTennis); ok {
		return x.TableTennis
	}
	return nil
}

func (m *EventMetadata) GetBaseball() *BaseballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Baseball); ok {
		return x.Baseball
	}
	return nil
}

func (m *EventMetadata) GetAmericanFootball() *AmericanFootballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_AmericanFootball); ok {
		return x.AmericanFootball
	}
	return nil
}

func (m *EventMetadata) GetSnooker() *SnookerMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Snooker); ok {
		return x.Snooker
	}
	return nil
}

func (m *EventMetadata) GetDarts() *DartsMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Darts); ok {
		return x.Darts
	}
	return nil
}

func (m *EventMetadata) GetFutsal() *FutsalMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Futsal); ok {
		return x.Futsal
	}
	return nil
}

func (m *EventMetadata) GetBowls() *BowlsMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Bowls); ok {
		return x.Bowls
	}
	return nil
}

func (m *EventMetadata) GetCricket() *CricketMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Cricket); ok {
		return x.Cricket
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventMetadata_OneofMarshaler, _EventMetadata_OneofUnmarshaler, _EventMetadata_OneofSizer, []interface{}{
		(*EventMetadata_SoccerV2)(nil),
		(*EventMetadata_TennisV2)(nil),
		(*EventMetadata_BasketballV2)(nil),
		(*EventMetadata_IceHockey_V2)(nil),
		(*EventMetadata_HandballV2)(nil),
		(*EventMetadata_TableTennisV2)(nil),
		(*EventMetadata_BaseballV2)(nil),
		(*EventMetadata_AmericanFootballV2)(nil),
		(*EventMetadata_SnookerV2)(nil),
		(*EventMetadata_DartsV2)(nil),
		(*EventMetadata_FutsalV2)(nil),
		(*EventMetadata_BowlsV2)(nil),
		(*EventMetadata_CricketV2)(nil),
		(*EventMetadata_Soccer)(nil),
		(*EventMetadata_Tennis)(nil),
		(*EventMetadata_Basketball)(nil),
		(*EventMetadata_IceHockey)(nil),
		(*EventMetadata_Handball)(nil),
		(*EventMetadata_TableTennis)(nil),
		(*EventMetadata_Baseball)(nil),
		(*EventMetadata_AmericanFootball)(nil),
		(*EventMetadata_Snooker)(nil),
		(*EventMetadata_Darts)(nil),
		(*EventMetadata_Futsal)(nil),
		(*EventMetadata_Bowls)(nil),
		(*EventMetadata_Cricket)(nil),
	}
}

func _EventMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventMetadata)
	// metadata_v2
	switch x := m.MetadataV2.(type) {
	case *EventMetadata_SoccerV2:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SoccerV2); err != nil {
			return err
		}
	case *EventMetadata_TennisV2:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TennisV2); err != nil {
			return err
		}
	case *EventMetadata_BasketballV2:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasketballV2); err != nil {
			return err
		}
	case *EventMetadata_IceHockey_V2:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IceHockey_V2); err != nil {
			return err
		}
	case *EventMetadata_HandballV2:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HandballV2); err != nil {
			return err
		}
	case *EventMetadata_TableTennisV2:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableTennisV2); err != nil {
			return err
		}
	case *EventMetadata_BaseballV2:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BaseballV2); err != nil {
			return err
		}
	case *EventMetadata_AmericanFootballV2:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmericanFootballV2); err != nil {
			return err
		}
	case *EventMetadata_SnookerV2:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SnookerV2); err != nil {
			return err
		}
	case *EventMetadata_DartsV2:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DartsV2); err != nil {
			return err
		}
	case *EventMetadata_FutsalV2:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FutsalV2); err != nil {
			return err
		}
	case *EventMetadata_BowlsV2:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BowlsV2); err != nil {
			return err
		}
	case *EventMetadata_CricketV2:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CricketV2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventMetadata.MetadataV2 has unexpected type %T", x)
	}
	// metadata
	switch x := m.Metadata.(type) {
	case *EventMetadata_Soccer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Soccer); err != nil {
			return err
		}
	case *EventMetadata_Tennis:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tennis); err != nil {
			return err
		}
	case *EventMetadata_Basketball:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Basketball); err != nil {
			return err
		}
	case *EventMetadata_IceHockey:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IceHockey); err != nil {
			return err
		}
	case *EventMetadata_Handball:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Handball); err != nil {
			return err
		}
	case *EventMetadata_TableTennis:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableTennis); err != nil {
			return err
		}
	case *EventMetadata_Baseball:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Baseball); err != nil {
			return err
		}
	case *EventMetadata_AmericanFootball:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmericanFootball); err != nil {
			return err
		}
	case *EventMetadata_Snooker:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Snooker); err != nil {
			return err
		}
	case *EventMetadata_Darts:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Darts); err != nil {
			return err
		}
	case *EventMetadata_Futsal:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Futsal); err != nil {
			return err
		}
	case *EventMetadata_Bowls:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bowls); err != nil {
			return err
		}
	case *EventMetadata_Cricket:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cricket); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventMetadata.Metadata has unexpected type %T", x)
	}
	return nil
}

func _EventMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventMetadata)
	switch tag {
	case 23: // metadata_v2.soccer_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoccerMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_SoccerV2{msg}
		return true, err
	case 24: // metadata_v2.tennis_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TennisMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_TennisV2{msg}
		return true, err
	case 25: // metadata_v2.basketball_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasketballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_BasketballV2{msg}
		return true, err
	case 26: // metadata_v2.ice_hockey_V2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IceHockeyMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_IceHockey_V2{msg}
		return true, err
	case 27: // metadata_v2.handball_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_HandballV2{msg}
		return true, err
	case 28: // metadata_v2.table_tennis_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTennisMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_TableTennisV2{msg}
		return true, err
	case 29: // metadata_v2.baseball_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BaseballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_BaseballV2{msg}
		return true, err
	case 30: // metadata_v2.american_football_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmericanFootballMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_AmericanFootballV2{msg}
		return true, err
	case 31: // metadata_v2.snooker_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnookerMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_SnookerV2{msg}
		return true, err
	case 32: // metadata_v2.darts_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DartsMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_DartsV2{msg}
		return true, err
	case 33: // metadata_v2.futsal_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FutsalMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_FutsalV2{msg}
		return true, err
	case 34: // metadata_v2.bowls_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BowlsMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_BowlsV2{msg}
		return true, err
	case 35: // metadata_v2.cricket_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CricketMetadataV2)
		err := b.DecodeMessage(msg)
		m.MetadataV2 = &EventMetadata_CricketV2{msg}
		return true, err
	case 9: // metadata.soccer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoccerMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Soccer{msg}
		return true, err
	case 10: // metadata.tennis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TennisMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Tennis{msg}
		return true, err
	case 11: // metadata.basketball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasketballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Basketball{msg}
		return true, err
	case 12: // metadata.ice_hockey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IceHockeyMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_IceHockey{msg}
		return true, err
	case 13: // metadata.handball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Handball{msg}
		return true, err
	case 14: // metadata.table_tennis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTennisMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_TableTennis{msg}
		return true, err
	case 15: // metadata.baseball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BaseballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Baseball{msg}
		return true, err
	case 16: // metadata.american_football
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmericanFootballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_AmericanFootball{msg}
		return true, err
	case 17: // metadata.snooker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnookerMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Snooker{msg}
		return true, err
	case 18: // metadata.darts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DartsMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Darts{msg}
		return true, err
	case 19: // metadata.futsal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FutsalMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Futsal{msg}
		return true, err
	case 20: // metadata.bowls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BowlsMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Bowls{msg}
		return true, err
	case 21: // metadata.cricket
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CricketMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Cricket{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventMetadata)
	// metadata_v2
	switch x := m.MetadataV2.(type) {
	case *EventMetadata_SoccerV2:
		s := proto.Size(x.SoccerV2)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TennisV2:
		s := proto.Size(x.TennisV2)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_BasketballV2:
		s := proto.Size(x.BasketballV2)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_IceHockey_V2:
		s := proto.Size(x.IceHockey_V2)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_HandballV2:
		s := proto.Size(x.HandballV2)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TableTennisV2:
		s := proto.Size(x.TableTennisV2)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_BaseballV2:
		s := proto.Size(x.BaseballV2)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_AmericanFootballV2:
		s := proto.Size(x.AmericanFootballV2)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_SnookerV2:
		s := proto.Size(x.SnookerV2)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_DartsV2:
		s := proto.Size(x.DartsV2)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_FutsalV2:
		s := proto.Size(x.FutsalV2)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_BowlsV2:
		s := proto.Size(x.BowlsV2)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_CricketV2:
		s := proto.Size(x.CricketV2)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// metadata
	switch x := m.Metadata.(type) {
	case *EventMetadata_Soccer:
		s := proto.Size(x.Soccer)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Tennis:
		s := proto.Size(x.Tennis)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Basketball:
		s := proto.Size(x.Basketball)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_IceHockey:
		s := proto.Size(x.IceHockey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Handball:
		s := proto.Size(x.Handball)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TableTennis:
		s := proto.Size(x.TableTennis)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Baseball:
		s := proto.Size(x.Baseball)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_AmericanFootball:
		s := proto.Size(x.AmericanFootball)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Snooker:
		s := proto.Size(x.Snooker)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Darts:
		s := proto.Size(x.Darts)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Futsal:
		s := proto.Size(x.Futsal)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Bowls:
		s := proto.Size(x.Bowls)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Cricket:
		s := proto.Size(x.Cricket)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventMetadata_Set struct {
	Score []int32 `protobuf:"varint,1,rep,packed,name=score" json:"score,omitempty"`
}

func (m *EventMetadata_Set) Reset()                    { *m = EventMetadata_Set{} }
func (m *EventMetadata_Set) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata_Set) ProtoMessage()               {}
func (*EventMetadata_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *EventMetadata_Set) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

type EventMetadata_SummaryListing struct {
	Cancelled  string `protobuf:"bytes,1,opt,name=cancelled" json:"cancelled,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerId   uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamName   string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamId     uint32 `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Time       string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	HomeScore  int32  `protobuf:"varint,7,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore  int32  `protobuf:"varint,8,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	Type       string `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
}

func (m *EventMetadata_SummaryListing) Reset()                    { *m = EventMetadata_SummaryListing{} }
func (m *EventMetadata_SummaryListing) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata_SummaryListing) ProtoMessage()               {}
func (*EventMetadata_SummaryListing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *EventMetadata_SummaryListing) GetCancelled() string {
	if m != nil {
		return m.Cancelled
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetHomeScore() int32 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetAwayScore() int32 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SoccerMetadata struct {
	CornersAway        int32 `protobuf:"varint,1,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        int32 `protobuf:"varint,2,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       int32 `protobuf:"varint,3,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       int32 `protobuf:"varint,4,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    int32 `protobuf:"varint,5,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    int32 `protobuf:"varint,6,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway int32 `protobuf:"varint,7,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome int32 `protobuf:"varint,8,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
}

func (m *SoccerMetadata) Reset()                    { *m = SoccerMetadata{} }
func (m *SoccerMetadata) String() string            { return proto.CompactTextString(m) }
func (*SoccerMetadata) ProtoMessage()               {}
func (*SoccerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SoccerMetadata) GetCornersAway() int32 {
	if m != nil {
		return m.CornersAway
	}
	return 0
}

func (m *SoccerMetadata) GetCornersHome() int32 {
	if m != nil {
		return m.CornersHome
	}
	return 0
}

func (m *SoccerMetadata) GetRedCardsAway() int32 {
	if m != nil {
		return m.RedCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetRedCardsHome() int32 {
	if m != nil {
		return m.RedCardsHome
	}
	return 0
}

func (m *SoccerMetadata) GetYellowCardsAway() int32 {
	if m != nil {
		return m.YellowCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetYellowCardsHome() int32 {
	if m != nil {
		return m.YellowCardsHome
	}
	return 0
}

func (m *SoccerMetadata) GetYellowRedCardsAway() int32 {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetYellowRedCardsHome() int32 {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return 0
}

type SoccerMetadataV2 struct {
	CornersAway        string `protobuf:"bytes,1,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        string `protobuf:"bytes,2,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       string `protobuf:"bytes,3,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       string `protobuf:"bytes,4,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    string `protobuf:"bytes,5,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    string `protobuf:"bytes,6,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway string `protobuf:"bytes,7,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome string `protobuf:"bytes,8,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
}

func (m *SoccerMetadataV2) Reset()                    { *m = SoccerMetadataV2{} }
func (m *SoccerMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*SoccerMetadataV2) ProtoMessage()               {}
func (*SoccerMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SoccerMetadataV2) GetCornersAway() string {
	if m != nil {
		return m.CornersAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetCornersHome() string {
	if m != nil {
		return m.CornersHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetRedCardsAway() string {
	if m != nil {
		return m.RedCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetRedCardsHome() string {
	if m != nil {
		return m.RedCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowCardsAway() string {
	if m != nil {
		return m.YellowCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowCardsHome() string {
	if m != nil {
		return m.YellowCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowRedCardsAway() string {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowRedCardsHome() string {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return ""
}

type TennisMetadata struct {
	GameScore []int32 `protobuf:"varint,5,rep,packed,name=game_score,json=gameScore" json:"game_score,omitempty"`
}

func (m *TennisMetadata) Reset()                    { *m = TennisMetadata{} }
func (m *TennisMetadata) String() string            { return proto.CompactTextString(m) }
func (*TennisMetadata) ProtoMessage()               {}
func (*TennisMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TennisMetadata) GetGameScore() []int32 {
	if m != nil {
		return m.GameScore
	}
	return nil
}

type TennisMetadataV2 struct {
	GameScore []string `protobuf:"bytes,5,rep,name=game_score,json=gameScore" json:"game_score,omitempty"`
}

func (m *TennisMetadataV2) Reset()                    { *m = TennisMetadataV2{} }
func (m *TennisMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*TennisMetadataV2) ProtoMessage()               {}
func (*TennisMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TennisMetadataV2) GetGameScore() []string {
	if m != nil {
		return m.GameScore
	}
	return nil
}

type BasketballMetadata struct {
}

func (m *BasketballMetadata) Reset()                    { *m = BasketballMetadata{} }
func (m *BasketballMetadata) String() string            { return proto.CompactTextString(m) }
func (*BasketballMetadata) ProtoMessage()               {}
func (*BasketballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type BasketballMetadataV2 struct {
}

func (m *BasketballMetadataV2) Reset()                    { *m = BasketballMetadataV2{} }
func (m *BasketballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*BasketballMetadataV2) ProtoMessage()               {}
func (*BasketballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type IceHockeyMetadata struct {
}

func (m *IceHockeyMetadata) Reset()                    { *m = IceHockeyMetadata{} }
func (m *IceHockeyMetadata) String() string            { return proto.CompactTextString(m) }
func (*IceHockeyMetadata) ProtoMessage()               {}
func (*IceHockeyMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type IceHockeyMetadataV2 struct {
}

func (m *IceHockeyMetadataV2) Reset()                    { *m = IceHockeyMetadataV2{} }
func (m *IceHockeyMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*IceHockeyMetadataV2) ProtoMessage()               {}
func (*IceHockeyMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type HandballMetadata struct {
}

func (m *HandballMetadata) Reset()                    { *m = HandballMetadata{} }
func (m *HandballMetadata) String() string            { return proto.CompactTextString(m) }
func (*HandballMetadata) ProtoMessage()               {}
func (*HandballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type HandballMetadataV2 struct {
}

func (m *HandballMetadataV2) Reset()                    { *m = HandballMetadataV2{} }
func (m *HandballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*HandballMetadataV2) ProtoMessage()               {}
func (*HandballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type TableTennisMetadata struct {
}

func (m *TableTennisMetadata) Reset()                    { *m = TableTennisMetadata{} }
func (m *TableTennisMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableTennisMetadata) ProtoMessage()               {}
func (*TableTennisMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type TableTennisMetadataV2 struct {
}

func (m *TableTennisMetadataV2) Reset()                    { *m = TableTennisMetadataV2{} }
func (m *TableTennisMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*TableTennisMetadataV2) ProtoMessage()               {}
func (*TableTennisMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type BaseballMetadata struct {
	AwayPitcher string `protobuf:"bytes,7,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	HomePitcher string `protobuf:"bytes,8,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
}

func (m *BaseballMetadata) Reset()                    { *m = BaseballMetadata{} }
func (m *BaseballMetadata) String() string            { return proto.CompactTextString(m) }
func (*BaseballMetadata) ProtoMessage()               {}
func (*BaseballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BaseballMetadata) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *BaseballMetadata) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

type BaseballMetadataV2 struct {
	AwayPitcher string `protobuf:"bytes,7,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	HomePitcher string `protobuf:"bytes,8,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
}

func (m *BaseballMetadataV2) Reset()                    { *m = BaseballMetadataV2{} }
func (m *BaseballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*BaseballMetadataV2) ProtoMessage()               {}
func (*BaseballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BaseballMetadataV2) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *BaseballMetadataV2) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

type AmericanFootballMetadata struct {
	Possession int32 `protobuf:"varint,1,opt,name=possession" json:"possession,omitempty"`
}

func (m *AmericanFootballMetadata) Reset()                    { *m = AmericanFootballMetadata{} }
func (m *AmericanFootballMetadata) String() string            { return proto.CompactTextString(m) }
func (*AmericanFootballMetadata) ProtoMessage()               {}
func (*AmericanFootballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AmericanFootballMetadata) GetPossession() int32 {
	if m != nil {
		return m.Possession
	}
	return 0
}

type AmericanFootballMetadataV2 struct {
	Possession string `protobuf:"bytes,1,opt,name=possession" json:"possession,omitempty"`
}

func (m *AmericanFootballMetadataV2) Reset()                    { *m = AmericanFootballMetadataV2{} }
func (m *AmericanFootballMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*AmericanFootballMetadataV2) ProtoMessage()               {}
func (*AmericanFootballMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AmericanFootballMetadataV2) GetPossession() string {
	if m != nil {
		return m.Possession
	}
	return ""
}

type SnookerMetadata struct {
}

func (m *SnookerMetadata) Reset()                    { *m = SnookerMetadata{} }
func (m *SnookerMetadata) String() string            { return proto.CompactTextString(m) }
func (*SnookerMetadata) ProtoMessage()               {}
func (*SnookerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type SnookerMetadataV2 struct {
}

func (m *SnookerMetadataV2) Reset()                    { *m = SnookerMetadataV2{} }
func (m *SnookerMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*SnookerMetadataV2) ProtoMessage()               {}
func (*SnookerMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type DartsMetadata struct {
	LegScore int32 `protobuf:"varint,1,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
}

func (m *DartsMetadata) Reset()                    { *m = DartsMetadata{} }
func (m *DartsMetadata) String() string            { return proto.CompactTextString(m) }
func (*DartsMetadata) ProtoMessage()               {}
func (*DartsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DartsMetadata) GetLegScore() int32 {
	if m != nil {
		return m.LegScore
	}
	return 0
}

type DartsMetadataV2 struct {
	LegScore string `protobuf:"bytes,1,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
}

func (m *DartsMetadataV2) Reset()                    { *m = DartsMetadataV2{} }
func (m *DartsMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*DartsMetadataV2) ProtoMessage()               {}
func (*DartsMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DartsMetadataV2) GetLegScore() string {
	if m != nil {
		return m.LegScore
	}
	return ""
}

type FutsalMetadata struct {
}

func (m *FutsalMetadata) Reset()                    { *m = FutsalMetadata{} }
func (m *FutsalMetadata) String() string            { return proto.CompactTextString(m) }
func (*FutsalMetadata) ProtoMessage()               {}
func (*FutsalMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type FutsalMetadataV2 struct {
}

func (m *FutsalMetadataV2) Reset()                    { *m = FutsalMetadataV2{} }
func (m *FutsalMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*FutsalMetadataV2) ProtoMessage()               {}
func (*FutsalMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type BowlsMetadata struct {
}

func (m *BowlsMetadata) Reset()                    { *m = BowlsMetadata{} }
func (m *BowlsMetadata) String() string            { return proto.CompactTextString(m) }
func (*BowlsMetadata) ProtoMessage()               {}
func (*BowlsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type BowlsMetadataV2 struct {
}

func (m *BowlsMetadataV2) Reset()                    { *m = BowlsMetadataV2{} }
func (m *BowlsMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*BowlsMetadataV2) ProtoMessage()               {}
func (*BowlsMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type CricketMetadata struct {
	DismissalsAway     int32  `protobuf:"varint,1,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     int32  `protobuf:"varint,2,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               int32  `protobuf:"varint,3,opt,name=over" json:"over,omitempty"`
	Innings            int32  `protobuf:"varint,4,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    int32  `protobuf:"varint,5,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    int32  `protobuf:"varint,6,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           int32  `protobuf:"varint,9,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           int32  `protobuf:"varint,10,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        int32  `protobuf:"varint,11,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        int32  `protobuf:"varint,12,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           int64  `protobuf:"varint,13,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   uint32 `protobuf:"varint,14,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam uint32 `protobuf:"varint,15,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         uint32 `protobuf:"varint,16,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	HomeTotalOvers     uint32 `protobuf:"varint,17,opt,name=home_total_overs,json=homeTotalOvers" json:"home_total_overs,omitempty"`
	AwayTotalOvers     uint32 `protobuf:"varint,18,opt,name=away_total_overs,json=awayTotalOvers" json:"away_total_overs,omitempty"`
	HomeOver           uint32 `protobuf:"varint,19,opt,name=home_over,json=homeOver" json:"home_over,omitempty"`
	AwayOver           uint32 `protobuf:"varint,20,opt,name=away_over,json=awayOver" json:"away_over,omitempty"`
	HomeBalls          string `protobuf:"bytes,21,opt,name=home_balls,json=homeBalls" json:"home_balls,omitempty"`
	AwayBalls          string `protobuf:"bytes,22,opt,name=away_balls,json=awayBalls" json:"away_balls,omitempty"`
}

func (m *CricketMetadata) Reset()                    { *m = CricketMetadata{} }
func (m *CricketMetadata) String() string            { return proto.CompactTextString(m) }
func (*CricketMetadata) ProtoMessage()               {}
func (*CricketMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CricketMetadata) GetDismissalsAway() int32 {
	if m != nil {
		return m.DismissalsAway
	}
	return 0
}

func (m *CricketMetadata) GetDismissalsHome() int32 {
	if m != nil {
		return m.DismissalsHome
	}
	return 0
}

func (m *CricketMetadata) GetOver() int32 {
	if m != nil {
		return m.Over
	}
	return 0
}

func (m *CricketMetadata) GetInnings() int32 {
	if m != nil {
		return m.Innings
	}
	return 0
}

func (m *CricketMetadata) GetPenaltyRunsHome() int32 {
	if m != nil {
		return m.PenaltyRunsHome
	}
	return 0
}

func (m *CricketMetadata) GetPenaltyRunsAway() int32 {
	if m != nil {
		return m.PenaltyRunsAway
	}
	return 0
}

func (m *CricketMetadata) GetHomeRuns() int32 {
	if m != nil {
		return m.HomeRuns
	}
	return 0
}

func (m *CricketMetadata) GetAwayRuns() int32 {
	if m != nil {
		return m.AwayRuns
	}
	return 0
}

func (m *CricketMetadata) GetHomeWickets() int32 {
	if m != nil {
		return m.HomeWickets
	}
	return 0
}

func (m *CricketMetadata) GetAwayWickets() int32 {
	if m != nil {
		return m.AwayWickets
	}
	return 0
}

func (m *CricketMetadata) GetTossTime() int64 {
	if m != nil {
		return m.TossTime
	}
	return 0
}

func (m *CricketMetadata) GetStartBattingTeam() uint32 {
	if m != nil {
		return m.StartBattingTeam
	}
	return 0
}

func (m *CricketMetadata) GetCurrentBattingTeam() uint32 {
	if m != nil {
		return m.CurrentBattingTeam
	}
	return 0
}

func (m *CricketMetadata) GetTossWinner() uint32 {
	if m != nil {
		return m.TossWinner
	}
	return 0
}

func (m *CricketMetadata) GetHomeTotalOvers() uint32 {
	if m != nil {
		return m.HomeTotalOvers
	}
	return 0
}

func (m *CricketMetadata) GetAwayTotalOvers() uint32 {
	if m != nil {
		return m.AwayTotalOvers
	}
	return 0
}

func (m *CricketMetadata) GetHomeOver() uint32 {
	if m != nil {
		return m.HomeOver
	}
	return 0
}

func (m *CricketMetadata) GetAwayOver() uint32 {
	if m != nil {
		return m.AwayOver
	}
	return 0
}

func (m *CricketMetadata) GetHomeBalls() string {
	if m != nil {
		return m.HomeBalls
	}
	return ""
}

func (m *CricketMetadata) GetAwayBalls() string {
	if m != nil {
		return m.AwayBalls
	}
	return ""
}

type CricketMetadataV2 struct {
	DismissalsAway     string `protobuf:"bytes,1,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     string `protobuf:"bytes,2,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               string `protobuf:"bytes,3,opt,name=over" json:"over,omitempty"`
	Innings            string `protobuf:"bytes,4,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    string `protobuf:"bytes,5,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    string `protobuf:"bytes,6,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           string `protobuf:"bytes,9,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           string `protobuf:"bytes,10,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        string `protobuf:"bytes,11,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        string `protobuf:"bytes,12,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           string `protobuf:"bytes,13,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   string `protobuf:"bytes,14,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam string `protobuf:"bytes,15,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         string `protobuf:"bytes,16,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	HomeTotalOvers     string `protobuf:"bytes,17,opt,name=home_total_overs,json=homeTotalOvers" json:"home_total_overs,omitempty"`
	AwayTotalOvers     string `protobuf:"bytes,18,opt,name=away_total_overs,json=awayTotalOvers" json:"away_total_overs,omitempty"`
	HomeOver           string `protobuf:"bytes,19,opt,name=home_over,json=homeOver" json:"home_over,omitempty"`
	AwayOver           string `protobuf:"bytes,20,opt,name=away_over,json=awayOver" json:"away_over,omitempty"`
	HomeBalls          string `protobuf:"bytes,21,opt,name=home_balls,json=homeBalls" json:"home_balls,omitempty"`
	AwayBalls          string `protobuf:"bytes,22,opt,name=away_balls,json=awayBalls" json:"away_balls,omitempty"`
}

func (m *CricketMetadataV2) Reset()                    { *m = CricketMetadataV2{} }
func (m *CricketMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*CricketMetadataV2) ProtoMessage()               {}
func (*CricketMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CricketMetadataV2) GetDismissalsAway() string {
	if m != nil {
		return m.DismissalsAway
	}
	return ""
}

func (m *CricketMetadataV2) GetDismissalsHome() string {
	if m != nil {
		return m.DismissalsHome
	}
	return ""
}

func (m *CricketMetadataV2) GetOver() string {
	if m != nil {
		return m.Over
	}
	return ""
}

func (m *CricketMetadataV2) GetInnings() string {
	if m != nil {
		return m.Innings
	}
	return ""
}

func (m *CricketMetadataV2) GetPenaltyRunsHome() string {
	if m != nil {
		return m.PenaltyRunsHome
	}
	return ""
}

func (m *CricketMetadataV2) GetPenaltyRunsAway() string {
	if m != nil {
		return m.PenaltyRunsAway
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeRuns() string {
	if m != nil {
		return m.HomeRuns
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayRuns() string {
	if m != nil {
		return m.AwayRuns
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeWickets() string {
	if m != nil {
		return m.HomeWickets
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayWickets() string {
	if m != nil {
		return m.AwayWickets
	}
	return ""
}

func (m *CricketMetadataV2) GetTossTime() string {
	if m != nil {
		return m.TossTime
	}
	return ""
}

func (m *CricketMetadataV2) GetStartBattingTeam() string {
	if m != nil {
		return m.StartBattingTeam
	}
	return ""
}

func (m *CricketMetadataV2) GetCurrentBattingTeam() string {
	if m != nil {
		return m.CurrentBattingTeam
	}
	return ""
}

func (m *CricketMetadataV2) GetTossWinner() string {
	if m != nil {
		return m.TossWinner
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeTotalOvers() string {
	if m != nil {
		return m.HomeTotalOvers
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayTotalOvers() string {
	if m != nil {
		return m.AwayTotalOvers
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeOver() string {
	if m != nil {
		return m.HomeOver
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayOver() string {
	if m != nil {
		return m.AwayOver
	}
	return ""
}

func (m *CricketMetadataV2) GetHomeBalls() string {
	if m != nil {
		return m.HomeBalls
	}
	return ""
}

func (m *CricketMetadataV2) GetAwayBalls() string {
	if m != nil {
		return m.AwayBalls
	}
	return ""
}

func init() {
	proto.RegisterType((*EventMetadata)(nil), "resulted.EventMetadata")
	proto.RegisterType((*EventMetadata_Set)(nil), "resulted.EventMetadata.Set")
	proto.RegisterType((*EventMetadata_SummaryListing)(nil), "resulted.EventMetadata.SummaryListing")
	proto.RegisterType((*SoccerMetadata)(nil), "resulted.SoccerMetadata")
	proto.RegisterType((*SoccerMetadataV2)(nil), "resulted.SoccerMetadataV2")
	proto.RegisterType((*TennisMetadata)(nil), "resulted.TennisMetadata")
	proto.RegisterType((*TennisMetadataV2)(nil), "resulted.TennisMetadataV2")
	proto.RegisterType((*BasketballMetadata)(nil), "resulted.BasketballMetadata")
	proto.RegisterType((*BasketballMetadataV2)(nil), "resulted.BasketballMetadataV2")
	proto.RegisterType((*IceHockeyMetadata)(nil), "resulted.IceHockeyMetadata")
	proto.RegisterType((*IceHockeyMetadataV2)(nil), "resulted.IceHockeyMetadataV2")
	proto.RegisterType((*HandballMetadata)(nil), "resulted.HandballMetadata")
	proto.RegisterType((*HandballMetadataV2)(nil), "resulted.HandballMetadataV2")
	proto.RegisterType((*TableTennisMetadata)(nil), "resulted.TableTennisMetadata")
	proto.RegisterType((*TableTennisMetadataV2)(nil), "resulted.TableTennisMetadataV2")
	proto.RegisterType((*BaseballMetadata)(nil), "resulted.BaseballMetadata")
	proto.RegisterType((*BaseballMetadataV2)(nil), "resulted.BaseballMetadataV2")
	proto.RegisterType((*AmericanFootballMetadata)(nil), "resulted.AmericanFootballMetadata")
	proto.RegisterType((*AmericanFootballMetadataV2)(nil), "resulted.AmericanFootballMetadataV2")
	proto.RegisterType((*SnookerMetadata)(nil), "resulted.SnookerMetadata")
	proto.RegisterType((*SnookerMetadataV2)(nil), "resulted.SnookerMetadataV2")
	proto.RegisterType((*DartsMetadata)(nil), "resulted.DartsMetadata")
	proto.RegisterType((*DartsMetadataV2)(nil), "resulted.DartsMetadataV2")
	proto.RegisterType((*FutsalMetadata)(nil), "resulted.FutsalMetadata")
	proto.RegisterType((*FutsalMetadataV2)(nil), "resulted.FutsalMetadataV2")
	proto.RegisterType((*BowlsMetadata)(nil), "resulted.BowlsMetadata")
	proto.RegisterType((*BowlsMetadataV2)(nil), "resulted.BowlsMetadataV2")
	proto.RegisterType((*CricketMetadata)(nil), "resulted.CricketMetadata")
	proto.RegisterType((*CricketMetadataV2)(nil), "resulted.CricketMetadataV2")
}

func init() { proto.RegisterFile("sportsbook/api/resulted/sportsbook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0xdb, 0xca,
	0x11, 0xae, 0x62, 0xcb, 0xd6, 0x8e, 0x2c, 0x4b, 0x5e, 0xdb, 0xc7, 0x3c, 0x76, 0x1c, 0xfb, 0xf0,
	0x04, 0x8d, 0x5a, 0x04, 0x76, 0xc3, 0xa2, 0x45, 0x1b, 0x04, 0x2d, 0x22, 0x37, 0x81, 0x0c, 0xf4,
	0x97, 0x36, 0x94, 0xa0, 0x37, 0xc4, 0x8a, 0xda, 0xd8, 0x84, 0x29, 0x52, 0xe0, 0xd2, 0x36, 0xf4,
	0x06, 0x7d, 0xa9, 0x3e, 0x45, 0xd1, 0xfb, 0xa2, 0x4f, 0x72, 0x30, 0xb3, 0xa4, 0x48, 0xae, 0xe4,
	0x58, 0x06, 0x72, 0x17, 0xce, 0xf7, 0xcd, 0xcc, 0xee, 0xe8, 0x9b, 0x9d, 0x89, 0xa1, 0xab, 0x26,
	0x71, 0x92, 0xaa, 0x61, 0x1c, 0xdf, 0x9c, 0x8a, 0x49, 0x70, 0x9a, 0x48, 0x75, 0x1b, 0xa6, 0x72,
	0x74, 0x5a, 0xd8, 0x4f, 0x26, 0x49, 0x9c, 0xc6, 0xbc, 0x91, 0x43, 0xf6, 0xbf, 0xb7, 0xa0, 0xf5,
	0xe1, 0x4e, 0x46, 0xe9, 0x5f, 0x64, 0x2a, 0x46, 0x22, 0x15, 0xfc, 0x07, 0xd8, 0x90, 0x68, 0xf0,
	0x54, 0x2a, 0xd2, 0x5b, 0x65, 0xd5, 0x8e, 0x6b, 0x5d, 0xe6, 0x36, 0xc9, 0x76, 0x41, 0x26, 0xbe,
	0x03, 0x75, 0xe5, 0xc7, 0x89, 0xb4, 0x9e, 0x1d, 0xaf, 0x74, 0xeb, 0xae, 0xfe, 0xe0, 0x6f, 0x01,
	0x94, 0x4c, 0x3d, 0xfa, 0x50, 0xd6, 0xca, 0xf1, 0x4a, 0xb7, 0xe9, 0x1c, 0x9c, 0xe4, 0x99, 0x4e,
	0x2a, 0x59, 0x4e, 0x2e, 0x64, 0xea, 0x32, 0x25, 0xd3, 0x0b, 0x62, 0xf3, 0x1f, 0xa1, 0xe5, 0x87,
	0x52, 0x24, 0x72, 0xa4, 0xfd, 0xad, 0x55, 0x8a, 0xbc, 0x91, 0x19, 0x89, 0xc5, 0x3f, 0x00, 0x10,
	0xe8, 0x85, 0x81, 0x4a, 0xad, 0x75, 0x4a, 0xf0, 0xf3, 0x07, 0x13, 0xdc, 0x8e, 0xc7, 0x22, 0x99,
	0xfe, 0x39, 0x50, 0x69, 0x10, 0x5d, 0xb9, 0x8c, 0x3c, 0xf1, 0x8b, 0x9f, 0x01, 0xf3, 0x45, 0x32,
	0xd2, 0x51, 0x1a, 0x4f, 0x8a, 0xd2, 0x40, 0x47, 0x0a, 0xf2, 0x7b, 0x60, 0x2a, 0xf6, 0x7d, 0x99,
	0x78, 0x77, 0x8e, 0xb5, 0x77, 0x5c, 0xeb, 0x36, 0x9d, 0xfd, 0x22, 0xc8, 0x05, 0x41, 0x79, 0x94,
	0x81, 0xd3, 0xff, 0x99, 0xdb, 0xd0, 0xf4, 0x81, 0x83, 0xae, 0xa9, 0x8c, 0xa2, 0x40, 0xa1, 0xab,
	0x65, 0xba, 0x5e, 0x12, 0x54, 0x75, 0xd5, 0xf4, 0x81, 0xc3, 0x3f, 0x40, 0x6b, 0x28, 0xd4, 0x8d,
	0x4c, 0x87, 0x22, 0x0c, 0xd1, 0xfd, 0x7b, 0x72, 0x7f, 0x51, 0xb8, 0xf7, 0x66, 0x70, 0x25, 0xc4,
	0x46, 0xe1, 0x36, 0x70, 0xf8, 0x19, 0xb4, 0x02, 0x5f, 0x7a, 0xd7, 0xb1, 0x7f, 0x23, 0xa7, 0xde,
	0xc0, 0xb1, 0xf6, 0x29, 0xcc, 0x61, 0x11, 0xe6, 0xdc, 0x97, 0x7d, 0x42, 0x2b, 0x51, 0x9a, 0x41,
	0x6e, 0x1e, 0x38, 0xfc, 0x8f, 0xd0, 0xbc, 0x16, 0xd1, 0x28, 0x3f, 0xc9, 0x01, 0x85, 0x78, 0x5e,
	0x84, 0xe8, 0x67, 0x60, 0x25, 0x02, 0xe4, 0x2e, 0x03, 0x87, 0x9f, 0x43, 0x3b, 0x15, 0xc3, 0x50,
	0x7a, 0x45, 0x35, 0x9e, 0x53, 0x90, 0xa3, 0x52, 0x35, 0x90, 0xb0, 0xa0, 0x24, 0xad, 0xb4, 0x00,
	0xf4, 0x59, 0x86, 0x42, 0xc9, 0xfc, 0x2c, 0x87, 0xe6, 0x59, 0x7a, 0x19, 0x58, 0x3d, 0x4b, 0xee,
	0x32, 0x70, 0xf8, 0x67, 0xd8, 0x11, 0x63, 0x99, 0x04, 0xbe, 0x88, 0xbc, 0x2f, 0x71, 0x3c, 0xab,
	0xef, 0x0b, 0x8a, 0xf4, 0xb2, 0x88, 0xf4, 0x3e, 0x63, 0x7d, 0xcc, 0x48, 0x95, 0x88, 0x5c, 0x18,
	0xe8, 0xc0, 0xe1, 0xef, 0x00, 0x54, 0x14, 0xc7, 0x37, 0x5a, 0x29, 0x47, 0x14, 0xaf, 0xd4, 0x15,
	0x17, 0x1a, 0xab, 0x84, 0x61, 0x99, 0xc3, 0xc0, 0xe1, 0xbf, 0x85, 0xc6, 0x48, 0x24, 0x29, 0x15,
	0xe7, 0x98, 0x7c, 0xbf, 0x2f, 0x7c, 0xff, 0x84, 0x48, 0xc5, 0x73, 0x9d, 0xc8, 0x5a, 0x63, 0x5f,
	0x6e, 0x53, 0x25, 0xe8, 0x12, 0x3f, 0x98, 0x1a, 0xfb, 0x48, 0x50, 0x55, 0x63, 0x9a, 0xae, 0x53,
	0x0e, 0xe3, 0xfb, 0x90, 0x52, 0xda, 0x66, 0xca, 0x1e, 0x22, 0xd5, 0x94, 0x44, 0xd6, 0x17, 0xf5,
	0x93, 0xc0, 0xbf, 0x91, 0x29, 0x7a, 0xfe, 0x68, 0x5e, 0xf4, 0x4c, 0x63, 0xd5, 0x8b, 0x66, 0x0e,
	0x03, 0x87, 0x3b, 0xb0, 0xa6, 0x1b, 0xc4, 0x62, 0xe4, 0x69, 0x3d, 0xd4, 0x4c, 0xfd, 0x9a, 0x9b,
	0x31, 0xd1, 0x47, 0x4b, 0xc7, 0x02, 0xd3, 0xa7, 0x2a, 0x19, 0xf4, 0xd1, 0x4c, 0xfe, 0x07, 0x80,
	0xa2, 0x15, 0xac, 0xe6, 0x02, 0xa1, 0x18, 0xed, 0xd3, 0xaf, 0xb9, 0x25, 0x0f, 0xbc, 0x65, 0xd1,
	0x3a, 0xd6, 0x86, 0x79, 0xcb, 0xb9, 0xbe, 0xe9, 0xd7, 0x5c, 0x36, 0xeb, 0x1a, 0xfe, 0x3b, 0x68,
	0xe4, 0x0d, 0x60, 0xb5, 0xcc, 0x5f, 0xc5, 0x6c, 0x98, 0x7e, 0xcd, 0x9d, 0xb1, 0x79, 0x0f, 0x36,
	0xca, 0xcd, 0x62, 0x6d, 0x9a, 0x1d, 0xbb, 0xa0, 0x53, 0xfa, 0x35, 0xb7, 0x59, 0xea, 0x13, 0xcc,
	0x9e, 0x4b, 0xde, 0x6a, 0x9b, 0xd9, 0xcd, 0x16, 0xc1, 0xec, 0x39, 0x9b, 0xff, 0x03, 0xb6, 0xe6,
	0xda, 0xc3, 0xea, 0x50, 0x08, 0xfb, 0xf1, 0xde, 0xe8, 0xd7, 0xdc, 0x8e, 0xd9, 0x19, 0xfc, 0x37,
	0xb0, 0x9e, 0xc9, 0xdc, 0xda, 0x32, 0x55, 0x66, 0x34, 0x45, 0xbf, 0xe6, 0xe6, 0x5c, 0x7e, 0x0a,
	0x75, 0xd2, 0xb8, 0xc5, 0xc9, 0x69, 0xef, 0x81, 0x6e, 0xe8, 0xd7, 0x5c, 0xcd, 0x43, 0x91, 0x68,
	0x69, 0x5b, 0xdb, 0xa6, 0x48, 0xaa, 0x6d, 0x80, 0x22, 0xd1, 0x4c, 0x4c, 0x42, 0xaa, 0xb6, 0x76,
	0xcc, 0x24, 0x15, 0xfd, 0x63, 0x12, 0xe2, 0xe1, 0x65, 0x32, 0x29, 0x5b, 0xbb, 0xe6, 0x65, 0x0c,
	0xe1, 0xe3, 0x65, 0x32, 0xee, 0xfe, 0x01, 0xac, 0x5c, 0xc8, 0xb4, 0x18, 0xa7, 0xb5, 0xd2, 0x38,
	0xdd, 0xff, 0xd7, 0x33, 0xd8, 0xac, 0x8e, 0x1f, 0xfe, 0x1c, 0x27, 0x57, 0xe4, 0xcb, 0x30, 0x94,
	0xa3, 0x6c, 0x2e, 0x17, 0x06, 0x7e, 0x04, 0xcd, 0x49, 0x28, 0xa6, 0x32, 0xf1, 0x22, 0x31, 0xc6,
	0xd9, 0x8c, 0x38, 0x68, 0xd3, 0x5f, 0xc5, 0x58, 0xf2, 0x03, 0x60, 0x19, 0x21, 0x18, 0x59, 0x2b,
	0xc7, 0xb5, 0x6e, 0xcb, 0x6d, 0x68, 0xc3, 0xf9, 0x08, 0xc1, 0x54, 0x8a, 0xb1, 0xf6, 0x5d, 0x25,
	0xdf, 0x06, 0x1a, 0xc8, 0x73, 0x0f, 0xd6, 0x09, 0x0c, 0x46, 0x56, 0x9d, 0xfc, 0xd6, 0xf0, 0xf3,
	0x7c, 0xc4, 0x39, 0xac, 0xa6, 0xc1, 0x58, 0x5a, 0x6b, 0xe4, 0x40, 0xff, 0xe6, 0x87, 0x00, 0xd7,
	0xf1, 0x58, 0x66, 0x83, 0x7c, 0xfd, 0xb8, 0xd6, 0xad, 0xbb, 0x0c, 0x2d, 0x7a, 0x8a, 0x1f, 0x02,
	0x88, 0x7b, 0x31, 0xcd, 0xe0, 0x86, 0x86, 0xd1, 0xa2, 0x61, 0x8c, 0x38, 0x9d, 0x48, 0x7a, 0x06,
	0x30, 0xe2, 0x74, 0x22, 0x7b, 0x2d, 0x68, 0x8e, 0xb3, 0xf2, 0x79, 0x77, 0x4e, 0x0f, 0xa0, 0x91,
	0x7f, 0xda, 0xff, 0xc3, 0x2a, 0x55, 0x1e, 0x08, 0x5c, 0x60, 0xfc, 0x38, 0x89, 0x64, 0xa2, 0x3c,
	0x0c, 0x4b, 0x85, 0xaa, 0xbb, 0xcd, 0xcc, 0xf6, 0xfe, 0x5e, 0x4c, 0xcb, 0x14, 0x3c, 0x18, 0xd5,
	0xaa, 0xa0, 0xf4, 0xe3, 0xb1, 0xe4, 0x2f, 0x61, 0x13, 0xb7, 0x11, 0x1c, 0xf8, 0x59, 0x9c, 0x15,
	0x22, 0x6d, 0x24, 0x72, 0x74, 0x86, 0x46, 0x0a, 0x54, 0x61, 0x51, 0xa8, 0xd5, 0x2a, 0x8b, 0x62,
	0xfd, 0x12, 0xb6, 0xa6, 0x32, 0x0c, 0xe3, 0xfb, 0x72, 0xb8, 0x3a, 0x11, 0xdb, 0x1a, 0x28, 0x22,
	0x9a, 0x5c, 0x0a, 0xba, 0x36, 0xc7, 0xa5, 0xb8, 0x6f, 0x60, 0x37, 0xe3, 0x1a, 0x47, 0xd5, 0x45,
	0xe7, 0x1a, 0x74, 0xcb, 0x07, 0x5e, 0xe4, 0x42, 0x29, 0x1a, 0x8b, 0x5c, 0x30, 0x8b, 0xfd, 0xff,
	0x67, 0xd0, 0x31, 0x17, 0x9a, 0x85, 0x45, 0x66, 0x8f, 0x17, 0x99, 0x2d, 0x53, 0x64, 0xb6, 0x54,
	0x91, 0xd9, 0xb2, 0x45, 0x66, 0x4f, 0x28, 0x32, 0x7b, 0x62, 0x91, 0xd9, 0xd3, 0x8b, 0xcc, 0x16,
	0x16, 0xf9, 0x14, 0x36, 0xab, 0x8f, 0x37, 0xf6, 0xc9, 0x95, 0x98, 0xb5, 0x51, 0x9d, 0x9e, 0x06,
	0x86, 0x16, 0xea, 0x13, 0xfb, 0x0d, 0x74, 0xcc, 0xbd, 0x68, 0x81, 0x0b, 0x2b, 0xbb, 0xec, 0x00,
	0x9f, 0x9f, 0x6f, 0xf6, 0x77, 0xb0, 0xb3, 0x68, 0x69, 0xb4, 0xb7, 0x61, 0x6b, 0x6e, 0x9a, 0xd9,
	0xbb, 0xb0, 0xbd, 0x60, 0x35, 0xb4, 0x39, 0x74, 0xcc, 0xe9, 0x85, 0xd9, 0xe6, 0x57, 0x40, 0x0c,
	0xb0, 0x60, 0x52, 0xd9, 0x7b, 0xb0, 0xbb, 0x70, 0xd5, 0xb3, 0x3f, 0x43, 0xc7, 0x9c, 0x4c, 0x28,
	0x2c, 0x7a, 0x41, 0x26, 0x41, 0xea, 0x5f, 0xcb, 0x24, 0xfb, 0x21, 0x9a, 0x68, 0xfb, 0xbb, 0x36,
	0x21, 0x85, 0xde, 0xa0, 0x9c, 0xa2, 0x0b, 0xdf, 0x44, 0x5b, 0x46, 0xb1, 0xff, 0x49, 0xd5, 0x30,
	0xd6, 0xc2, 0x6f, 0x14, 0xfb, 0x2d, 0x58, 0x0f, 0x0d, 0x43, 0xfe, 0x02, 0x60, 0x12, 0x2b, 0x25,
	0x95, 0x0a, 0xe2, 0x28, 0x7b, 0x9c, 0x4a, 0x16, 0xfb, 0x1d, 0xec, 0x3f, 0xbc, 0x64, 0x2e, 0xf0,
	0x66, 0x15, 0xef, 0x2d, 0x68, 0x1b, 0xd3, 0x13, 0x7f, 0xc8, 0xb9, 0x2d, 0xd3, 0x7e, 0x0d, 0xad,
	0xca, 0xc0, 0xc4, 0xf7, 0x3f, 0x94, 0x57, 0x5e, 0x3e, 0x88, 0xf0, 0x54, 0x8d, 0x50, 0x5e, 0x69,
	0xe5, 0x9c, 0x40, 0xdb, 0x58, 0x36, 0xe7, 0xf9, 0xac, 0xc4, 0xef, 0xc0, 0x66, 0x75, 0xb8, 0xa2,
	0x42, 0xcc, 0xad, 0xd3, 0x6e, 0x43, 0xab, 0x32, 0x4f, 0xf1, 0xf0, 0xc6, 0x82, 0x69, 0xff, 0xa7,
	0x0e, 0x6d, 0x63, 0x82, 0xf2, 0x57, 0xd0, 0x1e, 0x05, 0x6a, 0x1c, 0x28, 0x25, 0xc2, 0xca, 0x1b,
	0xbf, 0x59, 0x98, 0xa9, 0x0f, 0xab, 0xc4, 0xd2, 0x4b, 0x5f, 0x22, 0x52, 0x8f, 0x73, 0x58, 0x8d,
	0xef, 0x64, 0x92, 0x3d, 0xf1, 0xf4, 0x6f, 0x6e, 0xc1, 0x7a, 0x10, 0x45, 0x41, 0x74, 0xa5, 0xb2,
	0x37, 0x3d, 0xff, 0xc4, 0xd7, 0x63, 0x22, 0x23, 0x11, 0xa6, 0x53, 0x2f, 0xb9, 0x8d, 0xb2, 0xc0,
	0xd9, 0x73, 0x9e, 0x01, 0xee, 0x6d, 0x34, 0x7b, 0x95, 0x2a, 0x5c, 0x3a, 0xed, 0xda, 0x1c, 0x97,
	0x8e, 0x7b, 0x00, 0x34, 0x26, 0x89, 0x48, 0xf3, 0xaf, 0xee, 0x36, 0xd0, 0x80, 0x04, 0x04, 0x49,
	0x98, 0x04, 0x82, 0x06, 0xd1, 0x40, 0x60, 0x2e, 0xc9, 0x7b, 0x2a, 0x94, 0xa2, 0xbd, 0xb6, 0xae,
	0x25, 0xf9, 0x49, 0x9b, 0x66, 0xc2, 0xce, 0x29, 0x1b, 0x9a, 0x82, 0xb6, 0x9c, 0x82, 0x2b, 0x40,
	0xac, 0x94, 0x47, 0x13, 0x1d, 0xd7, 0xd3, 0x15, 0xb7, 0x81, 0x86, 0x4b, 0x9c, 0xea, 0xaf, 0x81,
	0xab, 0x54, 0x24, 0xa9, 0x37, 0x14, 0x29, 0x2e, 0x23, 0x1e, 0x6e, 0x00, 0xb4, 0x86, 0xb6, 0xdc,
	0x0e, 0x21, 0x3d, 0x0d, 0x5c, 0x4a, 0x31, 0xe6, 0xbf, 0x82, 0x1d, 0xff, 0x36, 0x49, 0x64, 0x64,
	0xf0, 0xdb, 0xc4, 0xe7, 0x19, 0x56, 0xf6, 0x38, 0x82, 0x26, 0x25, 0xbf, 0x0f, 0xa2, 0x48, 0x26,
	0xb4, 0x5c, 0xb6, 0x5c, 0x40, 0xd3, 0x27, 0xb2, 0xf0, 0x2e, 0x74, 0xe8, 0x8e, 0x69, 0x9c, 0x8a,
	0xd0, 0xc3, 0x9f, 0x48, 0xd1, 0xe6, 0xd8, 0x72, 0x37, 0xd1, 0x7e, 0x89, 0xe6, 0xbf, 0xa1, 0x15,
	0x99, 0x74, 0xd5, 0x32, 0x93, 0x6b, 0x26, 0xda, 0x4b, 0xcc, 0xbc, 0xe2, 0xf4, 0xe3, 0x6f, 0xeb,
	0x8d, 0x08, 0x0d, 0x88, 0xce, 0x2a, 0x4e, 0xe0, 0x8e, 0x06, 0xd1, 0x40, 0x60, 0xbe, 0xe4, 0x60,
	0x7b, 0x2a, 0x5a, 0xfa, 0x98, 0x5e, 0x72, 0x7a, 0x68, 0x98, 0x2d, 0x39, 0x1a, 0xfe, 0x4e, 0xc3,
	0x68, 0x21, 0xd8, 0xfe, 0x6f, 0x1d, 0xb6, 0xe6, 0xfe, 0x43, 0xf4, 0x90, 0xae, 0xd9, 0xb2, 0xba,
	0x66, 0x5f, 0xd5, 0x35, 0x5b, 0xac, 0x6b, 0xb6, 0x84, 0xae, 0xd9, 0x13, 0x74, 0xcd, 0x96, 0xd0,
	0x35, 0xfb, 0x9a, 0xae, 0xd9, 0x23, 0xba, 0x66, 0x8f, 0xeb, 0x9a, 0x3d, 0xa2, 0x6b, 0xb6, 0x94,
	0xae, 0xd9, 0x13, 0x75, 0xcd, 0x96, 0xd5, 0x35, 0x5b, 0x4a, 0xd7, 0x6c, 0x69, 0x5d, 0xb3, 0xc7,
	0x75, 0xcd, 0xbe, 0xa6, 0x6b, 0xf6, 0xad, 0x74, 0xdd, 0xfb, 0x05, 0xbc, 0xf2, 0xe3, 0xf1, 0xc9,
	0x30, 0x48, 0x71, 0xeb, 0x08, 0xc5, 0x50, 0x9d, 0x94, 0xfe, 0xf6, 0x28, 0x26, 0xc1, 0xec, 0xbf,
	0x45, 0xc3, 0x35, 0xfa, 0x4b, 0xe4, 0xaf, 0x7f, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xf8, 0x8c,
	0x52, 0xb5, 0x14, 0x00, 0x00,
}

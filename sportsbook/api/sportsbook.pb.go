// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sportsbook/api/sportsbook.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	sportsbook/api/sportsbook.proto

It has these top-level messages:
	Entity
	EntityType
	EntitiesTypeArray
	Entities
	ProviderData
	SelectionStatusChange
	Generic
	Competition
	Competitor
	CancelledMarketList
	CancelledMarket
	MergedEntity
	MergedEntityList
	UnmatchedCompetition
	UnmatchedCompetitionList
	MatchedCompetition
	MatchedCompetitionList
	UnmatchedCompetitor
	UnmatchedCompetitorList
	MatchedCompetitor
	MatchedCompetitorList
	MatchedEvent
	UnmatchedEvent
	MatchedEventList
	UnmatchedEventList
	EventMedia
	Event
	EventMetadataOld
	Market
	Selection
	Outright
	OutrightSelection
	EventMetadata
	SoccerMetadataV2
	SoccerMetadata
	TennisMetadata
	BasketballMetadata
	IceHockeyMetadata
	HandballMetadata
	TableTennisMetadata
	BaseballMetadata
	AmericanFootballMetadata
	SnookerMetadata
	DartsMetadata
	FutsalMetadata
	BowlsMetadata
	CricketMetadata
	SportsTree
	SportsTreeEntity
	CompetitionTree
	EventList
	OutrightList
	CompetitionList
	SportList
	MultipleCompetitionListMetadata
	MultipleCompetitionLists
	MultipleCompetitionList
	GeoRestriction
	MatchCountByProvider
	MatchCountBySport
	MatchCountByCondition
	MatchingDetails
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Provider int32

const (
	Provider_BETRADAR  Provider = 0
	Provider_PINNACLE  Provider = 1
	Provider_IOSPORT   Provider = 2
	Provider_IMGGAMING Provider = 3
	Provider_BGL       Provider = 4
	Provider_BP        Provider = 5
	Provider_BG        Provider = 6
	Provider_TG        Provider = 7
)

var Provider_name = map[int32]string{
	0: "BETRADAR",
	1: "PINNACLE",
	2: "IOSPORT",
	3: "IMGGAMING",
	4: "BGL",
	5: "BP",
	6: "BG",
	7: "TG",
}
var Provider_value = map[string]int32{
	"BETRADAR":  0,
	"PINNACLE":  1,
	"IOSPORT":   2,
	"IMGGAMING": 3,
	"BGL":       4,
	"BP":        5,
	"BG":        6,
	"TG":        7,
}

func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}
func (Provider) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SportsEntityTypes int32

const (
	SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE SportsEntityTypes = 0
	SportsEntityTypes_SPORT                       SportsEntityTypes = 1
	SportsEntityTypes_COMPETITION                 SportsEntityTypes = 2
	SportsEntityTypes_GROUP                       SportsEntityTypes = 3
	SportsEntityTypes_EVENT                       SportsEntityTypes = 4
	SportsEntityTypes_OUTRIGHT                    SportsEntityTypes = 5
	SportsEntityTypes_COMPETITOR                  SportsEntityTypes = 6
	SportsEntityTypes_MARKET                      SportsEntityTypes = 7
)

var SportsEntityTypes_name = map[int32]string{
	0: "UNDEFINED_SPORT_ENTITY_TYPE",
	1: "SPORT",
	2: "COMPETITION",
	3: "GROUP",
	4: "EVENT",
	5: "OUTRIGHT",
	6: "COMPETITOR",
	7: "MARKET",
}
var SportsEntityTypes_value = map[string]int32{
	"UNDEFINED_SPORT_ENTITY_TYPE": 0,
	"SPORT":       1,
	"COMPETITION": 2,
	"GROUP":       3,
	"EVENT":       4,
	"OUTRIGHT":    5,
	"COMPETITOR":  6,
	"MARKET":      7,
}

func (x SportsEntityTypes) String() string {
	return proto.EnumName(SportsEntityTypes_name, int32(x))
}
func (SportsEntityTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Source int32

const (
	Source_LIVE     Source = 0
	Source_PREMATCH Source = 1
)

var Source_name = map[int32]string{
	0: "LIVE",
	1: "PREMATCH",
}
var Source_value = map[string]int32{
	"LIVE":     0,
	"PREMATCH": 1,
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}
func (Source) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type EventStatus int32

const (
	EventStatus_PRE_TRADING      EventStatus = 0
	EventStatus_TRADING          EventStatus = 1
	EventStatus_TRADING_LIVE     EventStatus = 2
	EventStatus_RESULTED         EventStatus = 3
	EventStatus_INTERRUPTED      EventStatus = 4
	EventStatus_AWAITING_RESULTS EventStatus = 5
	EventStatus_POST_TRADING     EventStatus = 6
	EventStatus_CANCELLED        EventStatus = 7
)

var EventStatus_name = map[int32]string{
	0: "PRE_TRADING",
	1: "TRADING",
	2: "TRADING_LIVE",
	3: "RESULTED",
	4: "INTERRUPTED",
	5: "AWAITING_RESULTS",
	6: "POST_TRADING",
	7: "CANCELLED",
}
var EventStatus_value = map[string]int32{
	"PRE_TRADING":      0,
	"TRADING":          1,
	"TRADING_LIVE":     2,
	"RESULTED":         3,
	"INTERRUPTED":      4,
	"AWAITING_RESULTS": 5,
	"POST_TRADING":     6,
	"CANCELLED":        7,
}

func (x EventStatus) String() string {
	return proto.EnumName(EventStatus_name, int32(x))
}
func (EventStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SelectionStatus int32

const (
	SelectionStatus_DISABLED           SelectionStatus = 0
	SelectionStatus_ENABLED            SelectionStatus = 1
	SelectionStatus_TEMPORARY_DISABLED SelectionStatus = 2
	SelectionStatus_REPLACED           SelectionStatus = 3
	SelectionStatus_RUNNING            SelectionStatus = 4
)

var SelectionStatus_name = map[int32]string{
	0: "DISABLED",
	1: "ENABLED",
	2: "TEMPORARY_DISABLED",
	3: "REPLACED",
	4: "RUNNING",
}
var SelectionStatus_value = map[string]int32{
	"DISABLED":           0,
	"ENABLED":            1,
	"TEMPORARY_DISABLED": 2,
	"REPLACED":           3,
	"RUNNING":            4,
}

func (x SelectionStatus) String() string {
	return proto.EnumName(SelectionStatus_name, int32(x))
}
func (SelectionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CompetitorType int32

const (
	CompetitorType_UNDEFINED_COMPETITOR_TYPE CompetitorType = 0
	CompetitorType_TEAM                      CompetitorType = 1
	CompetitorType_PLAYER                    CompetitorType = 2
)

var CompetitorType_name = map[int32]string{
	0: "UNDEFINED_COMPETITOR_TYPE",
	1: "TEAM",
	2: "PLAYER",
}
var CompetitorType_value = map[string]int32{
	"UNDEFINED_COMPETITOR_TYPE": 0,
	"TEAM":   1,
	"PLAYER": 2,
}

func (x CompetitorType) String() string {
	return proto.EnumName(CompetitorType_name, int32(x))
}
func (CompetitorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type MatchedCondition int32

const (
	MatchedCondition_AUTO_CREATED   MatchedCondition = 0
	MatchedCondition_AUTO_MATCHED   MatchedCondition = 1
	MatchedCondition_MANUAL_CREATED MatchedCondition = 2
	MatchedCondition_MANUAL_MATCHED MatchedCondition = 3
)

var MatchedCondition_name = map[int32]string{
	0: "AUTO_CREATED",
	1: "AUTO_MATCHED",
	2: "MANUAL_CREATED",
	3: "MANUAL_MATCHED",
}
var MatchedCondition_value = map[string]int32{
	"AUTO_CREATED":   0,
	"AUTO_MATCHED":   1,
	"MANUAL_CREATED": 2,
	"MANUAL_MATCHED": 3,
}

func (x MatchedCondition) String() string {
	return proto.EnumName(MatchedCondition_name, int32(x))
}
func (MatchedCondition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type EntityTag int32

const (
	EntityTag_NO_ENTITY_TAG EntityTag = 0
	EntityTag_JUNIOR        EntityTag = 1
	EntityTag_WOMEN         EntityTag = 2
	// Special for Tennis
	EntityTag_DOUBLE EntityTag = 4
	EntityTag_MIXED  EntityTag = 8
)

var EntityTag_name = map[int32]string{
	0: "NO_ENTITY_TAG",
	1: "JUNIOR",
	2: "WOMEN",
	4: "DOUBLE",
	8: "MIXED",
}
var EntityTag_value = map[string]int32{
	"NO_ENTITY_TAG": 0,
	"JUNIOR":        1,
	"WOMEN":         2,
	"DOUBLE":        4,
	"MIXED":         8,
}

func (x EntityTag) String() string {
	return proto.EnumName(EntityTag_name, int32(x))
}
func (EntityTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type AvailabilityFlags int32

const (
	AvailabilityFlags_UNAVAILABLE         AvailabilityFlags = 0
	AvailabilityFlags_LIVE_AVAILABLE      AvailabilityFlags = 1
	AvailabilityFlags_STREAMING_AVAILABLE AvailabilityFlags = 2
	AvailabilityFlags_SPECIALS_AVAILABLE  AvailabilityFlags = 4
)

var AvailabilityFlags_name = map[int32]string{
	0: "UNAVAILABLE",
	1: "LIVE_AVAILABLE",
	2: "STREAMING_AVAILABLE",
	4: "SPECIALS_AVAILABLE",
}
var AvailabilityFlags_value = map[string]int32{
	"UNAVAILABLE":         0,
	"LIVE_AVAILABLE":      1,
	"STREAMING_AVAILABLE": 2,
	"SPECIALS_AVAILABLE":  4,
}

func (x AvailabilityFlags) String() string {
	return proto.EnumName(AvailabilityFlags_name, int32(x))
}
func (AvailabilityFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// NOTE:
// groups example for tennis: "Set 1|Set 2|..."
type MarketTag int32

const (
	MarketTag_NO_TAGS                       MarketTag = 0
	MarketTag_WITHOUT_ALTERNATIVE_LINES     MarketTag = 1
	MarketTag_UNCOLLAPSED                   MarketTag = 2
	MarketTag_ON_ASIAN_PAGE                 MarketTag = 4
	MarketTag_ON_COMPETITION_PAGE           MarketTag = 8
	MarketTag_ON_LIVE_WIDGET                MarketTag = 16
	MarketTag_ON_POPULAR_EVENT_WIDGET       MarketTag = 32
	MarketTag_ON_POPULAR_COMPETITION_WIDGET MarketTag = 64
	MarketTag_LINE_FIXED_AT_1_5             MarketTag = 128
	MarketTag_GAME_LINES                    MarketTag = 256
)

var MarketTag_name = map[int32]string{
	0:   "NO_TAGS",
	1:   "WITHOUT_ALTERNATIVE_LINES",
	2:   "UNCOLLAPSED",
	4:   "ON_ASIAN_PAGE",
	8:   "ON_COMPETITION_PAGE",
	16:  "ON_LIVE_WIDGET",
	32:  "ON_POPULAR_EVENT_WIDGET",
	64:  "ON_POPULAR_COMPETITION_WIDGET",
	128: "LINE_FIXED_AT_1_5",
	256: "GAME_LINES",
}
var MarketTag_value = map[string]int32{
	"NO_TAGS":                       0,
	"WITHOUT_ALTERNATIVE_LINES":     1,
	"UNCOLLAPSED":                   2,
	"ON_ASIAN_PAGE":                 4,
	"ON_COMPETITION_PAGE":           8,
	"ON_LIVE_WIDGET":                16,
	"ON_POPULAR_EVENT_WIDGET":       32,
	"ON_POPULAR_COMPETITION_WIDGET": 64,
	"LINE_FIXED_AT_1_5":             128,
	"GAME_LINES":                    256,
}

func (x MarketTag) String() string {
	return proto.EnumName(MarketTag_name, int32(x))
}
func (MarketTag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Entity struct {
	Type SportsEntityTypes `protobuf:"varint,1,opt,name=type,enum=api.SportsEntityTypes" json:"type,omitempty"`
	Id   uint32            `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entity) GetType() SportsEntityTypes {
	if m != nil {
		return m.Type
	}
	return SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

func (m *Entity) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EntityType struct {
	Type SportsEntityTypes `protobuf:"varint,1,opt,name=type,enum=api.SportsEntityTypes" json:"type,omitempty"`
}

func (m *EntityType) Reset()                    { *m = EntityType{} }
func (m *EntityType) String() string            { return proto.CompactTextString(m) }
func (*EntityType) ProtoMessage()               {}
func (*EntityType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EntityType) GetType() SportsEntityTypes {
	if m != nil {
		return m.Type
	}
	return SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

type EntitiesTypeArray struct {
	Data []SportsEntityTypes `protobuf:"varint,1,rep,packed,name=data,enum=api.SportsEntityTypes" json:"data,omitempty"`
}

func (m *EntitiesTypeArray) Reset()                    { *m = EntitiesTypeArray{} }
func (m *EntitiesTypeArray) String() string            { return proto.CompactTextString(m) }
func (*EntitiesTypeArray) ProtoMessage()               {}
func (*EntitiesTypeArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EntitiesTypeArray) GetData() []SportsEntityTypes {
	if m != nil {
		return m.Data
	}
	return nil
}

type Entities struct {
	Events       []uint32 `protobuf:"varint,1,rep,packed,name=events" json:"events,omitempty"`
	Outrights    []uint32 `protobuf:"varint,2,rep,packed,name=outrights" json:"outrights,omitempty"`
	Competitors  []uint32 `protobuf:"varint,3,rep,packed,name=competitors" json:"competitors,omitempty"`
	Competitions []uint32 `protobuf:"varint,4,rep,packed,name=competitions" json:"competitions,omitempty"`
	Sports       []uint32 `protobuf:"varint,5,rep,packed,name=sports" json:"sports,omitempty"`
}

func (m *Entities) Reset()                    { *m = Entities{} }
func (m *Entities) String() string            { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()               {}
func (*Entities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Entities) GetEvents() []uint32 {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Entities) GetOutrights() []uint32 {
	if m != nil {
		return m.Outrights
	}
	return nil
}

func (m *Entities) GetCompetitors() []uint32 {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *Entities) GetCompetitions() []uint32 {
	if m != nil {
		return m.Competitions
	}
	return nil
}

func (m *Entities) GetSports() []uint32 {
	if m != nil {
		return m.Sports
	}
	return nil
}

type ProviderData struct {
	Keys        []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Provider    Provider `protobuf:"varint,6,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Source      Source   `protobuf:"varint,7,opt,name=source,enum=api.Source" json:"source,omitempty"`
	ProviderIds []string `protobuf:"bytes,8,rep,name=provider_ids,json=providerIds" json:"provider_ids,omitempty"`
	// Deprecate below
	Id      string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
	UniqId  string `protobuf:"bytes,5,opt,name=uniq_id,json=uniqId" json:"uniq_id,omitempty"`
	SportId uint32 `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ProviderData) Reset()                    { *m = ProviderData{} }
func (m *ProviderData) String() string            { return proto.CompactTextString(m) }
func (*ProviderData) ProtoMessage()               {}
func (*ProviderData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProviderData) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *ProviderData) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *ProviderData) GetSource() Source {
	if m != nil {
		return m.Source
	}
	return Source_LIVE
}

func (m *ProviderData) GetProviderIds() []string {
	if m != nil {
		return m.ProviderIds
	}
	return nil
}

func (m *ProviderData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProviderData) GetUniqId() string {
	if m != nil {
		return m.UniqId
	}
	return ""
}

func (m *ProviderData) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *ProviderData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SelectionStatusChange struct {
	Timestamp    int64                      `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventId      uint32                     `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Status       SelectionStatus            `protobuf:"varint,3,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	ProviderKey  string                     `protobuf:"bytes,4,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	Reason       string                     `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	ReasonId     uint32                     `protobuf:"varint,6,opt,name=reason_id,json=reasonId" json:"reason_id,omitempty"`
	MarketStatus map[uint32]SelectionStatus `protobuf:"bytes,7,rep,name=market_status,json=marketStatus" json:"market_status,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=api.SelectionStatus"`
}

func (m *SelectionStatusChange) Reset()                    { *m = SelectionStatusChange{} }
func (m *SelectionStatusChange) String() string            { return proto.CompactTextString(m) }
func (*SelectionStatusChange) ProtoMessage()               {}
func (*SelectionStatusChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SelectionStatusChange) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SelectionStatusChange) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *SelectionStatusChange) GetStatus() SelectionStatus {
	if m != nil {
		return m.Status
	}
	return SelectionStatus_DISABLED
}

func (m *SelectionStatusChange) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *SelectionStatusChange) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *SelectionStatusChange) GetReasonId() uint32 {
	if m != nil {
		return m.ReasonId
	}
	return 0
}

func (m *SelectionStatusChange) GetMarketStatus() map[uint32]SelectionStatus {
	if m != nil {
		return m.MarketStatus
	}
	return nil
}

// used for groups, and more?
type Generic struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Key  string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
}

func (m *Generic) Reset()                    { *m = Generic{} }
func (m *Generic) String() string            { return proto.CompactTextString(m) }
func (*Generic) ProtoMessage()               {}
func (*Generic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Generic) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Generic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Generic) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Generic) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Competition struct {
	Id     uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    string     `protobuf:"bytes,8,opt,name=key" json:"key,omitempty"`
	Groups []*Generic `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	// only used in api lists
	Sport *Generic `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	// replace score
	// will be strip off under pusher update and api
	Priority  uint32          `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
	Grade     uint32          `protobuf:"varint,6,opt,name=grade" json:"grade,omitempty"`
	Providers []*ProviderData `protobuf:"bytes,9,rep,name=providers" json:"providers,omitempty"`
}

func (m *Competition) Reset()                    { *m = Competition{} }
func (m *Competition) String() string            { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()               {}
func (*Competition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Competition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Competition) GetGroups() []*Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Competition) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Competition) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Competition) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *Competition) GetProviders() []*ProviderData {
	if m != nil {
		return m.Providers
	}
	return nil
}

type Competitor struct {
	Id             uint32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key            string          `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Type           uint32          `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Players        []*Competitor   `protobuf:"bytes,4,rep,name=players" json:"players,omitempty"`
	Providers      []*ProviderData `protobuf:"bytes,6,rep,name=providers" json:"providers,omitempty"`
	Sport          *Generic        `protobuf:"bytes,7,opt,name=sport" json:"sport,omitempty"`
	CompetitorType CompetitorType  `protobuf:"varint,8,opt,name=competitor_type,json=competitorType,enum=api.CompetitorType" json:"competitor_type,omitempty"`
}

func (m *Competitor) Reset()                    { *m = Competitor{} }
func (m *Competitor) String() string            { return proto.CompactTextString(m) }
func (*Competitor) ProtoMessage()               {}
func (*Competitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Competitor) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competitor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competitor) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Competitor) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Competitor) GetPlayers() []*Competitor {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Competitor) GetProviders() []*ProviderData {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *Competitor) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Competitor) GetCompetitorType() CompetitorType {
	if m != nil {
		return m.CompetitorType
	}
	return CompetitorType_UNDEFINED_COMPETITOR_TYPE
}

type CancelledMarketList struct {
	Markets []*CancelledMarket `protobuf:"bytes,1,rep,name=markets" json:"markets,omitempty"`
}

func (m *CancelledMarketList) Reset()                    { *m = CancelledMarketList{} }
func (m *CancelledMarketList) String() string            { return proto.CompactTextString(m) }
func (*CancelledMarketList) ProtoMessage()               {}
func (*CancelledMarketList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CancelledMarketList) GetMarkets() []*CancelledMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

type CancelledMarket struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	EventId     uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventName   string `protobuf:"bytes,4,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	CancelledAt int64  `protobuf:"varint,5,opt,name=cancelled_at,json=cancelledAt" json:"cancelled_at,omitempty"`
	StartsAt    int64  `protobuf:"varint,6,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	Reason      string `protobuf:"bytes,7,opt,name=reason" json:"reason,omitempty"`
}

func (m *CancelledMarket) Reset()                    { *m = CancelledMarket{} }
func (m *CancelledMarket) String() string            { return proto.CompactTextString(m) }
func (*CancelledMarket) ProtoMessage()               {}
func (*CancelledMarket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CancelledMarket) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelledMarket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelledMarket) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CancelledMarket) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *CancelledMarket) GetCancelledAt() int64 {
	if m != nil {
		return m.CancelledAt
	}
	return 0
}

func (m *CancelledMarket) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *CancelledMarket) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MergedEntity struct {
	SourceIds     []uint32 `protobuf:"varint,1,rep,packed,name=source_ids,json=sourceIds" json:"source_ids,omitempty"`
	DestinationId uint32   `protobuf:"varint,2,opt,name=destination_id,json=destinationId" json:"destination_id,omitempty"`
}

func (m *MergedEntity) Reset()                    { *m = MergedEntity{} }
func (m *MergedEntity) String() string            { return proto.CompactTextString(m) }
func (*MergedEntity) ProtoMessage()               {}
func (*MergedEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MergedEntity) GetSourceIds() []uint32 {
	if m != nil {
		return m.SourceIds
	}
	return nil
}

func (m *MergedEntity) GetDestinationId() uint32 {
	if m != nil {
		return m.DestinationId
	}
	return 0
}

type MergedEntityList struct {
	EntityType SportsEntityTypes `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
	Entities   []*MergedEntity   `protobuf:"bytes,2,rep,name=entities" json:"entities,omitempty"`
}

func (m *MergedEntityList) Reset()                    { *m = MergedEntityList{} }
func (m *MergedEntityList) String() string            { return proto.CompactTextString(m) }
func (*MergedEntityList) ProtoMessage()               {}
func (*MergedEntityList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MergedEntityList) GetEntityType() SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

func (m *MergedEntityList) GetEntities() []*MergedEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type UnmatchedCompetition struct {
	Provider          Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key               string   `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	SportId           uint32   `protobuf:"varint,4,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CategoryId        uint32   `protobuf:"varint,5,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	CreatedAt         int64    `protobuf:"varint,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ActiveEventsCount uint32   `protobuf:"varint,7,opt,name=active_events_count,json=activeEventsCount" json:"active_events_count,omitempty"`
}

func (m *UnmatchedCompetition) Reset()                    { *m = UnmatchedCompetition{} }
func (m *UnmatchedCompetition) String() string            { return proto.CompactTextString(m) }
func (*UnmatchedCompetition) ProtoMessage()               {}
func (*UnmatchedCompetition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UnmatchedCompetition) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *UnmatchedCompetition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnmatchedCompetition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UnmatchedCompetition) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *UnmatchedCompetition) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *UnmatchedCompetition) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *UnmatchedCompetition) GetActiveEventsCount() uint32 {
	if m != nil {
		return m.ActiveEventsCount
	}
	return 0
}

type UnmatchedCompetitionList struct {
	UnmatchedCompetitions []*UnmatchedCompetition `protobuf:"bytes,3,rep,name=unmatched_competitions,json=unmatchedCompetitions" json:"unmatched_competitions,omitempty"`
}

func (m *UnmatchedCompetitionList) Reset()                    { *m = UnmatchedCompetitionList{} }
func (m *UnmatchedCompetitionList) String() string            { return proto.CompactTextString(m) }
func (*UnmatchedCompetitionList) ProtoMessage()               {}
func (*UnmatchedCompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UnmatchedCompetitionList) GetUnmatchedCompetitions() []*UnmatchedCompetition {
	if m != nil {
		return m.UnmatchedCompetitions
	}
	return nil
}

type MatchedCompetition struct {
	Provider        Provider         `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey     string           `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	ProviderName    string           `protobuf:"bytes,3,opt,name=provider_name,json=providerName" json:"provider_name,omitempty"`
	CompetitionId   uint32           `protobuf:"varint,4,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	CompetitionName string           `protobuf:"bytes,5,opt,name=competition_name,json=competitionName" json:"competition_name,omitempty"`
	Condition       MatchedCondition `protobuf:"varint,6,opt,name=condition,enum=api.MatchedCondition" json:"condition,omitempty"`
}

func (m *MatchedCompetition) Reset()                    { *m = MatchedCompetition{} }
func (m *MatchedCompetition) String() string            { return proto.CompactTextString(m) }
func (*MatchedCompetition) ProtoMessage()               {}
func (*MatchedCompetition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MatchedCompetition) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *MatchedCompetition) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *MatchedCompetition) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *MatchedCompetition) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *MatchedCompetition) GetCompetitionName() string {
	if m != nil {
		return m.CompetitionName
	}
	return ""
}

func (m *MatchedCompetition) GetCondition() MatchedCondition {
	if m != nil {
		return m.Condition
	}
	return MatchedCondition_AUTO_CREATED
}

type MatchedCompetitionList struct {
	MatchedCompetitions []*MatchedCompetition `protobuf:"bytes,3,rep,name=matched_competitions,json=matchedCompetitions" json:"matched_competitions,omitempty"`
}

func (m *MatchedCompetitionList) Reset()                    { *m = MatchedCompetitionList{} }
func (m *MatchedCompetitionList) String() string            { return proto.CompactTextString(m) }
func (*MatchedCompetitionList) ProtoMessage()               {}
func (*MatchedCompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MatchedCompetitionList) GetMatchedCompetitions() []*MatchedCompetition {
	if m != nil {
		return m.MatchedCompetitions
	}
	return nil
}

type UnmatchedCompetitor struct {
	Provider     Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey  string   `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	ProviderName string   `protobuf:"bytes,3,opt,name=provider_name,json=providerName" json:"provider_name,omitempty"`
}

func (m *UnmatchedCompetitor) Reset()                    { *m = UnmatchedCompetitor{} }
func (m *UnmatchedCompetitor) String() string            { return proto.CompactTextString(m) }
func (*UnmatchedCompetitor) ProtoMessage()               {}
func (*UnmatchedCompetitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UnmatchedCompetitor) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *UnmatchedCompetitor) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *UnmatchedCompetitor) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

type UnmatchedCompetitorList struct {
	UnmatchedCompetitors []*UnmatchedCompetitor `protobuf:"bytes,1,rep,name=unmatched_competitors,json=unmatchedCompetitors" json:"unmatched_competitors,omitempty"`
}

func (m *UnmatchedCompetitorList) Reset()                    { *m = UnmatchedCompetitorList{} }
func (m *UnmatchedCompetitorList) String() string            { return proto.CompactTextString(m) }
func (*UnmatchedCompetitorList) ProtoMessage()               {}
func (*UnmatchedCompetitorList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UnmatchedCompetitorList) GetUnmatchedCompetitors() []*UnmatchedCompetitor {
	if m != nil {
		return m.UnmatchedCompetitors
	}
	return nil
}

type MatchedCompetitor struct {
	Provider       Provider         `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey    string           `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	ProviderName   string           `protobuf:"bytes,3,opt,name=provider_name,json=providerName" json:"provider_name,omitempty"`
	CompetitionIds []uint32         `protobuf:"varint,4,rep,packed,name=competition_ids,json=competitionIds" json:"competition_ids,omitempty"`
	CompetitorId   uint32           `protobuf:"varint,5,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	SportId        uint32           `protobuf:"varint,6,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	Condition      MatchedCondition `protobuf:"varint,7,opt,name=condition,enum=api.MatchedCondition" json:"condition,omitempty"`
}

func (m *MatchedCompetitor) Reset()                    { *m = MatchedCompetitor{} }
func (m *MatchedCompetitor) String() string            { return proto.CompactTextString(m) }
func (*MatchedCompetitor) ProtoMessage()               {}
func (*MatchedCompetitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MatchedCompetitor) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *MatchedCompetitor) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *MatchedCompetitor) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *MatchedCompetitor) GetCompetitionIds() []uint32 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *MatchedCompetitor) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

func (m *MatchedCompetitor) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *MatchedCompetitor) GetCondition() MatchedCondition {
	if m != nil {
		return m.Condition
	}
	return MatchedCondition_AUTO_CREATED
}

type MatchedCompetitorList struct {
	MatchedCompetitors []*MatchedCompetitor `protobuf:"bytes,1,rep,name=matched_competitors,json=matchedCompetitors" json:"matched_competitors,omitempty"`
}

func (m *MatchedCompetitorList) Reset()                    { *m = MatchedCompetitorList{} }
func (m *MatchedCompetitorList) String() string            { return proto.CompactTextString(m) }
func (*MatchedCompetitorList) ProtoMessage()               {}
func (*MatchedCompetitorList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MatchedCompetitorList) GetMatchedCompetitors() []*MatchedCompetitor {
	if m != nil {
		return m.MatchedCompetitors
	}
	return nil
}

type MatchedEvent struct {
	Provider    Provider         `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey string           `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	Source      Source           `protobuf:"varint,3,opt,name=source,enum=api.Source" json:"source,omitempty"`
	SportId     uint32           `protobuf:"varint,4,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	EventId     uint32           `protobuf:"varint,5,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventName   string           `protobuf:"bytes,6,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	StartsAt    int64            `protobuf:"varint,7,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	Condition   MatchedCondition `protobuf:"varint,8,opt,name=condition,enum=api.MatchedCondition" json:"condition,omitempty"`
}

func (m *MatchedEvent) Reset()                    { *m = MatchedEvent{} }
func (m *MatchedEvent) String() string            { return proto.CompactTextString(m) }
func (*MatchedEvent) ProtoMessage()               {}
func (*MatchedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *MatchedEvent) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *MatchedEvent) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *MatchedEvent) GetSource() Source {
	if m != nil {
		return m.Source
	}
	return Source_LIVE
}

func (m *MatchedEvent) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *MatchedEvent) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *MatchedEvent) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *MatchedEvent) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *MatchedEvent) GetCondition() MatchedCondition {
	if m != nil {
		return m.Condition
	}
	return MatchedCondition_AUTO_CREATED
}

type UnmatchedEvent struct {
	Id                         uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Provider                   Provider `protobuf:"varint,2,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderName               string   `protobuf:"bytes,3,opt,name=provider_name,json=providerName" json:"provider_name,omitempty"`
	ProviderKey                string   `protobuf:"bytes,4,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	ProviderCompetitionKey     string   `protobuf:"bytes,5,opt,name=provider_competition_key,json=providerCompetitionKey" json:"provider_competition_key,omitempty"`
	ProviderHomeCompetitorKeys []string `protobuf:"bytes,6,rep,name=provider_home_competitor_keys,json=providerHomeCompetitorKeys" json:"provider_home_competitor_keys,omitempty"`
	ProviderAwayCompetitorKeys []string `protobuf:"bytes,7,rep,name=provider_away_competitor_keys,json=providerAwayCompetitorKeys" json:"provider_away_competitor_keys,omitempty"`
	FailureReason              string   `protobuf:"bytes,8,opt,name=failure_reason,json=failureReason" json:"failure_reason,omitempty"`
	Source                     Source   `protobuf:"varint,9,opt,name=source,enum=api.Source" json:"source,omitempty"`
	SportId                    uint32   `protobuf:"varint,10,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	StartsAt                   int64    `protobuf:"varint,11,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
}

func (m *UnmatchedEvent) Reset()                    { *m = UnmatchedEvent{} }
func (m *UnmatchedEvent) String() string            { return proto.CompactTextString(m) }
func (*UnmatchedEvent) ProtoMessage()               {}
func (*UnmatchedEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *UnmatchedEvent) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UnmatchedEvent) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_BETRADAR
}

func (m *UnmatchedEvent) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *UnmatchedEvent) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *UnmatchedEvent) GetProviderCompetitionKey() string {
	if m != nil {
		return m.ProviderCompetitionKey
	}
	return ""
}

func (m *UnmatchedEvent) GetProviderHomeCompetitorKeys() []string {
	if m != nil {
		return m.ProviderHomeCompetitorKeys
	}
	return nil
}

func (m *UnmatchedEvent) GetProviderAwayCompetitorKeys() []string {
	if m != nil {
		return m.ProviderAwayCompetitorKeys
	}
	return nil
}

func (m *UnmatchedEvent) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *UnmatchedEvent) GetSource() Source {
	if m != nil {
		return m.Source
	}
	return Source_LIVE
}

func (m *UnmatchedEvent) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *UnmatchedEvent) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

type MatchedEventList struct {
	MatchedEvents []*MatchedEvent `protobuf:"bytes,1,rep,name=matched_events,json=matchedEvents" json:"matched_events,omitempty"`
}

func (m *MatchedEventList) Reset()                    { *m = MatchedEventList{} }
func (m *MatchedEventList) String() string            { return proto.CompactTextString(m) }
func (*MatchedEventList) ProtoMessage()               {}
func (*MatchedEventList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *MatchedEventList) GetMatchedEvents() []*MatchedEvent {
	if m != nil {
		return m.MatchedEvents
	}
	return nil
}

type UnmatchedEventList struct {
	UnmatchedEvents []*UnmatchedEvent `protobuf:"bytes,1,rep,name=unmatched_events,json=unmatchedEvents" json:"unmatched_events,omitempty"`
}

func (m *UnmatchedEventList) Reset()                    { *m = UnmatchedEventList{} }
func (m *UnmatchedEventList) String() string            { return proto.CompactTextString(m) }
func (*UnmatchedEventList) ProtoMessage()               {}
func (*UnmatchedEventList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UnmatchedEventList) GetUnmatchedEvents() []*UnmatchedEvent {
	if m != nil {
		return m.UnmatchedEvents
	}
	return nil
}

type EventMedia struct {
	Image          string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	VideoThumbnail string `protobuf:"bytes,2,opt,name=video_thumbnail,json=videoThumbnail" json:"video_thumbnail,omitempty"`
}

func (m *EventMedia) Reset()                    { *m = EventMedia{} }
func (m *EventMedia) String() string            { return proto.CompactTextString(m) }
func (*EventMedia) ProtoMessage()               {}
func (*EventMedia) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *EventMedia) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *EventMedia) GetVideoThumbnail() string {
	if m != nil {
		return m.VideoThumbnail
	}
	return ""
}

type Event struct {
	Timestamp     int64           `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id            uint32          `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name          string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StartsAt      int64           `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	Sport         *Generic        `protobuf:"bytes,5,opt,name=sport" json:"sport,omitempty"`
	Competition   *Competition    `protobuf:"bytes,6,opt,name=competition" json:"competition,omitempty"`
	Competitors   []*Competitor   `protobuf:"bytes,7,rep,name=competitors" json:"competitors,omitempty"`
	OpenMarkets   uint32          `protobuf:"varint,8,opt,name=open_markets,json=openMarkets" json:"open_markets,omitempty"`
	Markets       []*Market       `protobuf:"bytes,9,rep,name=markets" json:"markets,omitempty"`
	Status        EventStatus     `protobuf:"varint,10,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	ProvidersData []*ProviderData `protobuf:"bytes,21,rep,name=providers_data,json=providersData" json:"providers_data,omitempty"`
	// measure internal delay, don't expose
	InternalTimestamp int64  `protobuf:"varint,13,opt,name=internal_timestamp,json=internalTimestamp" json:"internal_timestamp,omitempty"`
	Score             uint32 `protobuf:"varint,14,opt,name=score" json:"score,omitempty"`
	// just strings of the surnames for now
	// we don't have any more info in the feed
	HomePitcher       string         `protobuf:"bytes,15,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
	AwayPitcher       string         `protobuf:"bytes,16,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	ParlayRestriction uint32         `protobuf:"varint,18,opt,name=parlay_restriction,json=parlayRestriction" json:"parlay_restriction,omitempty"`
	Metadata          *EventMetadata `protobuf:"bytes,22,opt,name=metadata" json:"metadata,omitempty"`
	Media             *EventMedia    `protobuf:"bytes,23,opt,name=media" json:"media,omitempty"`
	Availability      uint32         `protobuf:"varint,24,opt,name=availability" json:"availability,omitempty"`
	FinishesAt        int64          `protobuf:"varint,25,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
	// deprecate provider_id
	ProviderId string `protobuf:"bytes,12,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Should be deprecated: backwards compatible for API v2
	MetadataOld *EventMetadataOld `protobuf:"bytes,11,opt,name=metadata_old,json=metadataOld" json:"metadata_old,omitempty"`
	// deprecated, Please refer to availability.
	LiveAvailable bool `protobuf:"varint,17,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
	// deprecated, Please refer to media.
	Image string `protobuf:"bytes,19,opt,name=image" json:"image,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Event) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Event) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Event) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *Event) GetOpenMarkets() uint32 {
	if m != nil {
		return m.OpenMarkets
	}
	return 0
}

func (m *Event) GetMarkets() []*Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *Event) GetStatus() EventStatus {
	if m != nil {
		return m.Status
	}
	return EventStatus_PRE_TRADING
}

func (m *Event) GetProvidersData() []*ProviderData {
	if m != nil {
		return m.ProvidersData
	}
	return nil
}

func (m *Event) GetInternalTimestamp() int64 {
	if m != nil {
		return m.InternalTimestamp
	}
	return 0
}

func (m *Event) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Event) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

func (m *Event) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *Event) GetParlayRestriction() uint32 {
	if m != nil {
		return m.ParlayRestriction
	}
	return 0
}

func (m *Event) GetMetadata() *EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetMedia() *EventMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *Event) GetAvailability() uint32 {
	if m != nil {
		return m.Availability
	}
	return 0
}

func (m *Event) GetFinishesAt() int64 {
	if m != nil {
		return m.FinishesAt
	}
	return 0
}

func (m *Event) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *Event) GetMetadataOld() *EventMetadataOld {
	if m != nil {
		return m.MetadataOld
	}
	return nil
}

func (m *Event) GetLiveAvailable() bool {
	if m != nil {
		return m.LiveAvailable
	}
	return false
}

func (m *Event) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type EventMetadataOld struct {
	Timestamp         int64                   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventTime         string                  `protobuf:"bytes,2,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	EventTimeExtended string                  `protobuf:"bytes,3,opt,name=event_time_extended,json=eventTimeExtended" json:"event_time_extended,omitempty"`
	EventStatus       string                  `protobuf:"bytes,4,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
	BetStatus         string                  `protobuf:"bytes,5,opt,name=bet_status,json=betStatus" json:"bet_status,omitempty"`
	Score             []int32                 `protobuf:"varint,6,rep,packed,name=score" json:"score,omitempty"`
	GameScore         []int32                 `protobuf:"varint,7,rep,packed,name=game_score,json=gameScore" json:"game_score,omitempty"`
	ClearedScore      []int32                 `protobuf:"varint,8,rep,packed,name=cleared_score,json=clearedScore" json:"cleared_score,omitempty"`
	SetScores         []*EventMetadataOld_Set `protobuf:"bytes,9,rep,name=set_scores,json=setScores" json:"set_scores,omitempty"`
	// soccer
	CornersAway        int32 `protobuf:"varint,10,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        int32 `protobuf:"varint,11,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       int32 `protobuf:"varint,12,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       int32 `protobuf:"varint,13,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    int32 `protobuf:"varint,14,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    int32 `protobuf:"varint,15,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway int32 `protobuf:"varint,16,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome int32 `protobuf:"varint,17,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
	// tennis
	Server   int32 `protobuf:"varint,18,opt,name=server" json:"server,omitempty"`
	Tiebreak bool  `protobuf:"varint,19,opt,name=tiebreak" json:"tiebreak,omitempty"`
	// basketball
	ClockStopped          int32  `protobuf:"varint,20,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,21,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,22,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
	// ice hockey / handball
	SuspendHome int32 `protobuf:"varint,23,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway int32 `protobuf:"varint,24,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// table tennis
	Expedite int32 `protobuf:"varint,25,opt,name=expedite" json:"expedite,omitempty"`
	// baseball
	AwayBatter int32  `protobuf:"varint,26,opt,name=away_batter,json=awayBatter" json:"away_batter,omitempty"`
	HomeBatter int32  `protobuf:"varint,27,opt,name=home_batter,json=homeBatter" json:"home_batter,omitempty"`
	Balls      int32  `protobuf:"varint,28,opt,name=balls" json:"balls,omitempty"`
	Bases      string `protobuf:"bytes,29,opt,name=bases" json:"bases,omitempty"`
	Strikes    int32  `protobuf:"varint,30,opt,name=strikes" json:"strikes,omitempty"`
	Outs       int32  `protobuf:"varint,31,opt,name=outs" json:"outs,omitempty"`
	// football
	Possession int32 `protobuf:"varint,32,opt,name=possession" json:"possession,omitempty"`
	Position   int32 `protobuf:"varint,33,opt,name=position" json:"position,omitempty"`
	Try        int32 `protobuf:"varint,34,opt,name=try" json:"try,omitempty"`
	Yards      int32 `protobuf:"varint,35,opt,name=yards" json:"yards,omitempty"`
	// snooker
	RemainingReds int32 `protobuf:"varint,36,opt,name=remaining_reds,json=remainingReds" json:"remaining_reds,omitempty"`
	Visit         int32 `protobuf:"varint,37,opt,name=visit" json:"visit,omitempty"`
	// darts
	LegScore int32 `protobuf:"varint,38,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
	Throw    int32 `protobuf:"varint,39,opt,name=throw" json:"throw,omitempty"`
	// lawn bowls
	RemainingBowlsAway int32 `protobuf:"varint,40,opt,name=remaining_bowls_away,json=remainingBowlsAway" json:"remaining_bowls_away,omitempty"`
	RemainingBowlsHome int32 `protobuf:"varint,41,opt,name=remaining_bowls_home,json=remainingBowlsHome" json:"remaining_bowls_home,omitempty"`
	CurrentEnd         int32 `protobuf:"varint,42,opt,name=current_end,json=currentEnd" json:"current_end,omitempty"`
	Delivery           int32 `protobuf:"varint,43,opt,name=delivery" json:"delivery,omitempty"`
	// cricket
	DismissalsAway     int32                              `protobuf:"varint,44,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     int32                              `protobuf:"varint,45,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               int32                              `protobuf:"varint,46,opt,name=over" json:"over,omitempty"`
	Innings            int32                              `protobuf:"varint,47,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    int32                              `protobuf:"varint,48,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    int32                              `protobuf:"varint,49,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           int32                              `protobuf:"varint,56,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           int32                              `protobuf:"varint,57,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        int32                              `protobuf:"varint,58,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        int32                              `protobuf:"varint,59,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           int64                              `protobuf:"varint,60,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   uint32                             `protobuf:"varint,61,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam uint32                             `protobuf:"varint,62,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         uint32                             `protobuf:"varint,63,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	ScoreList          []*EventMetadataOld_SummaryListing `protobuf:"bytes,50,rep,name=score_list,json=scoreList" json:"score_list,omitempty"`
	CardList           []*EventMetadataOld_SummaryListing `protobuf:"bytes,51,rep,name=card_list,json=cardList" json:"card_list,omitempty"`
	// betstop
	BetstopReason string `protobuf:"bytes,52,opt,name=betstop_reason,json=betstopReason" json:"betstop_reason,omitempty"`
	BetstopId     uint32 `protobuf:"varint,53,opt,name=betstop_id,json=betstopId" json:"betstop_id,omitempty"`
}

func (m *EventMetadataOld) Reset()                    { *m = EventMetadataOld{} }
func (m *EventMetadataOld) String() string            { return proto.CompactTextString(m) }
func (*EventMetadataOld) ProtoMessage()               {}
func (*EventMetadataOld) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *EventMetadataOld) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EventMetadataOld) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *EventMetadataOld) GetEventTimeExtended() string {
	if m != nil {
		return m.EventTimeExtended
	}
	return ""
}

func (m *EventMetadataOld) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

func (m *EventMetadataOld) GetBetStatus() string {
	if m != nil {
		return m.BetStatus
	}
	return ""
}

func (m *EventMetadataOld) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *EventMetadataOld) GetGameScore() []int32 {
	if m != nil {
		return m.GameScore
	}
	return nil
}

func (m *EventMetadataOld) GetClearedScore() []int32 {
	if m != nil {
		return m.ClearedScore
	}
	return nil
}

func (m *EventMetadataOld) GetSetScores() []*EventMetadataOld_Set {
	if m != nil {
		return m.SetScores
	}
	return nil
}

func (m *EventMetadataOld) GetCornersAway() int32 {
	if m != nil {
		return m.CornersAway
	}
	return 0
}

func (m *EventMetadataOld) GetCornersHome() int32 {
	if m != nil {
		return m.CornersHome
	}
	return 0
}

func (m *EventMetadataOld) GetRedCardsAway() int32 {
	if m != nil {
		return m.RedCardsAway
	}
	return 0
}

func (m *EventMetadataOld) GetRedCardsHome() int32 {
	if m != nil {
		return m.RedCardsHome
	}
	return 0
}

func (m *EventMetadataOld) GetYellowCardsAway() int32 {
	if m != nil {
		return m.YellowCardsAway
	}
	return 0
}

func (m *EventMetadataOld) GetYellowCardsHome() int32 {
	if m != nil {
		return m.YellowCardsHome
	}
	return 0
}

func (m *EventMetadataOld) GetYellowRedCardsAway() int32 {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return 0
}

func (m *EventMetadataOld) GetYellowRedCardsHome() int32 {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return 0
}

func (m *EventMetadataOld) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *EventMetadataOld) GetTiebreak() bool {
	if m != nil {
		return m.Tiebreak
	}
	return false
}

func (m *EventMetadataOld) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *EventMetadataOld) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *EventMetadataOld) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

func (m *EventMetadataOld) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *EventMetadataOld) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

func (m *EventMetadataOld) GetExpedite() int32 {
	if m != nil {
		return m.Expedite
	}
	return 0
}

func (m *EventMetadataOld) GetAwayBatter() int32 {
	if m != nil {
		return m.AwayBatter
	}
	return 0
}

func (m *EventMetadataOld) GetHomeBatter() int32 {
	if m != nil {
		return m.HomeBatter
	}
	return 0
}

func (m *EventMetadataOld) GetBalls() int32 {
	if m != nil {
		return m.Balls
	}
	return 0
}

func (m *EventMetadataOld) GetBases() string {
	if m != nil {
		return m.Bases
	}
	return ""
}

func (m *EventMetadataOld) GetStrikes() int32 {
	if m != nil {
		return m.Strikes
	}
	return 0
}

func (m *EventMetadataOld) GetOuts() int32 {
	if m != nil {
		return m.Outs
	}
	return 0
}

func (m *EventMetadataOld) GetPossession() int32 {
	if m != nil {
		return m.Possession
	}
	return 0
}

func (m *EventMetadataOld) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *EventMetadataOld) GetTry() int32 {
	if m != nil {
		return m.Try
	}
	return 0
}

func (m *EventMetadataOld) GetYards() int32 {
	if m != nil {
		return m.Yards
	}
	return 0
}

func (m *EventMetadataOld) GetRemainingReds() int32 {
	if m != nil {
		return m.RemainingReds
	}
	return 0
}

func (m *EventMetadataOld) GetVisit() int32 {
	if m != nil {
		return m.Visit
	}
	return 0
}

func (m *EventMetadataOld) GetLegScore() int32 {
	if m != nil {
		return m.LegScore
	}
	return 0
}

func (m *EventMetadataOld) GetThrow() int32 {
	if m != nil {
		return m.Throw
	}
	return 0
}

func (m *EventMetadataOld) GetRemainingBowlsAway() int32 {
	if m != nil {
		return m.RemainingBowlsAway
	}
	return 0
}

func (m *EventMetadataOld) GetRemainingBowlsHome() int32 {
	if m != nil {
		return m.RemainingBowlsHome
	}
	return 0
}

func (m *EventMetadataOld) GetCurrentEnd() int32 {
	if m != nil {
		return m.CurrentEnd
	}
	return 0
}

func (m *EventMetadataOld) GetDelivery() int32 {
	if m != nil {
		return m.Delivery
	}
	return 0
}

func (m *EventMetadataOld) GetDismissalsAway() int32 {
	if m != nil {
		return m.DismissalsAway
	}
	return 0
}

func (m *EventMetadataOld) GetDismissalsHome() int32 {
	if m != nil {
		return m.DismissalsHome
	}
	return 0
}

func (m *EventMetadataOld) GetOver() int32 {
	if m != nil {
		return m.Over
	}
	return 0
}

func (m *EventMetadataOld) GetInnings() int32 {
	if m != nil {
		return m.Innings
	}
	return 0
}

func (m *EventMetadataOld) GetPenaltyRunsHome() int32 {
	if m != nil {
		return m.PenaltyRunsHome
	}
	return 0
}

func (m *EventMetadataOld) GetPenaltyRunsAway() int32 {
	if m != nil {
		return m.PenaltyRunsAway
	}
	return 0
}

func (m *EventMetadataOld) GetHomeRuns() int32 {
	if m != nil {
		return m.HomeRuns
	}
	return 0
}

func (m *EventMetadataOld) GetAwayRuns() int32 {
	if m != nil {
		return m.AwayRuns
	}
	return 0
}

func (m *EventMetadataOld) GetHomeWickets() int32 {
	if m != nil {
		return m.HomeWickets
	}
	return 0
}

func (m *EventMetadataOld) GetAwayWickets() int32 {
	if m != nil {
		return m.AwayWickets
	}
	return 0
}

func (m *EventMetadataOld) GetTossTime() int64 {
	if m != nil {
		return m.TossTime
	}
	return 0
}

func (m *EventMetadataOld) GetStartBattingTeam() uint32 {
	if m != nil {
		return m.StartBattingTeam
	}
	return 0
}

func (m *EventMetadataOld) GetCurrentBattingTeam() uint32 {
	if m != nil {
		return m.CurrentBattingTeam
	}
	return 0
}

func (m *EventMetadataOld) GetTossWinner() uint32 {
	if m != nil {
		return m.TossWinner
	}
	return 0
}

func (m *EventMetadataOld) GetScoreList() []*EventMetadataOld_SummaryListing {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *EventMetadataOld) GetCardList() []*EventMetadataOld_SummaryListing {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *EventMetadataOld) GetBetstopReason() string {
	if m != nil {
		return m.BetstopReason
	}
	return ""
}

func (m *EventMetadataOld) GetBetstopId() uint32 {
	if m != nil {
		return m.BetstopId
	}
	return 0
}

type EventMetadataOld_Set struct {
	Score []int32 `protobuf:"varint,1,rep,packed,name=score" json:"score,omitempty"`
}

func (m *EventMetadataOld_Set) Reset()                    { *m = EventMetadataOld_Set{} }
func (m *EventMetadataOld_Set) String() string            { return proto.CompactTextString(m) }
func (*EventMetadataOld_Set) ProtoMessage()               {}
func (*EventMetadataOld_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

func (m *EventMetadataOld_Set) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

type EventMetadataOld_SummaryListing struct {
	Cancelled  string `protobuf:"bytes,1,opt,name=cancelled" json:"cancelled,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerId   uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamName   string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamId     uint32 `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Time       string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	HomeScore  int32  `protobuf:"varint,7,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore  int32  `protobuf:"varint,8,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	Type       string `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
}

func (m *EventMetadataOld_SummaryListing) Reset()         { *m = EventMetadataOld_SummaryListing{} }
func (m *EventMetadataOld_SummaryListing) String() string { return proto.CompactTextString(m) }
func (*EventMetadataOld_SummaryListing) ProtoMessage()    {}
func (*EventMetadataOld_SummaryListing) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 1}
}

func (m *EventMetadataOld_SummaryListing) GetCancelled() string {
	if m != nil {
		return m.Cancelled
	}
	return ""
}

func (m *EventMetadataOld_SummaryListing) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *EventMetadataOld_SummaryListing) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *EventMetadataOld_SummaryListing) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *EventMetadataOld_SummaryListing) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *EventMetadataOld_SummaryListing) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *EventMetadataOld_SummaryListing) GetHomeScore() int32 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *EventMetadataOld_SummaryListing) GetAwayScore() int32 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *EventMetadataOld_SummaryListing) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Market struct {
	Id               uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Primary          bool         `protobuf:"varint,3,opt,name=primary" json:"primary,omitempty"`
	Groups           []string     `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	Type             string       `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Selections       []*Selection `protobuf:"bytes,6,rep,name=selections" json:"selections,omitempty"`
	SmvRegex         string       `protobuf:"bytes,7,opt,name=smv_regex,json=smvRegex" json:"smv_regex,omitempty"`
	SmvFields        string       `protobuf:"bytes,8,opt,name=smv_fields,json=smvFields" json:"smv_fields,omitempty"`
	ActiveSelections uint32       `protobuf:"varint,9,opt,name=active_selections,json=activeSelections" json:"active_selections,omitempty"`
	Priority         uint32       `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	Tags             uint64       `protobuf:"varint,13,opt,name=tags" json:"tags,omitempty"`
	// deprecated below
	Grade uint32 `protobuf:"varint,11,opt,name=grade" json:"grade,omitempty"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Market) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Market) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Market) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *Market) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Market) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Market) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Market) GetSmvRegex() string {
	if m != nil {
		return m.SmvRegex
	}
	return ""
}

func (m *Market) GetSmvFields() string {
	if m != nil {
		return m.SmvFields
	}
	return ""
}

func (m *Market) GetActiveSelections() uint32 {
	if m != nil {
		return m.ActiveSelections
	}
	return 0
}

func (m *Market) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Market) GetTags() uint64 {
	if m != nil {
		return m.Tags
	}
	return 0
}

func (m *Market) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

// NOTE:
// group_id is the index for the Market grouping names
type Selection struct {
	Timestamp       int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	GroupId         uint32  `protobuf:"varint,3,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	EventId         uint32  `protobuf:"varint,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32  `protobuf:"varint,5,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome         string  `protobuf:"bytes,6,opt,name=outcome" json:"outcome,omitempty"`
	SpecialBetValue string  `protobuf:"bytes,7,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	PlayerId        uint32  `protobuf:"varint,8,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamId          uint32  `protobuf:"varint,9,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Odds            float64 `protobuf:"fixed64,10,opt,name=odds" json:"odds,omitempty"`
	Probability     float64 `protobuf:"fixed64,11,opt,name=probability" json:"probability,omitempty"`
	MinStake        float64 `protobuf:"fixed64,12,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        float64 `protobuf:"fixed64,13,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	BackersOdds     float64 `protobuf:"fixed64,16,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
	// 0: locked
	// 1: trading
	// 2: temporary lock by provider
	// 3: replaced selection, hide in api
	// more states TBD
	Status SelectionStatus `protobuf:"varint,14,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	// internal use only (pricing engine state)
	ProviderKey string `protobuf:"bytes,15,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Selection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Selection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Selection) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *Selection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Selection) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Selection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *Selection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *Selection) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *Selection) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *Selection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *Selection) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *Selection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *Selection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *Selection) GetBackersOdds() float64 {
	if m != nil {
		return m.BackersOdds
	}
	return 0
}

func (m *Selection) GetStatus() SelectionStatus {
	if m != nil {
		return m.Status
	}
	return SelectionStatus_DISABLED
}

func (m *Selection) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

type Outright struct {
	Timestamp     int64                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id            uint32               `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Name          string               `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StartsAt      int64                `protobuf:"varint,4,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt        int64                `protobuf:"varint,5,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	Sport         *Generic             `protobuf:"bytes,6,opt,name=sport" json:"sport,omitempty"`
	Competition   *Competition         `protobuf:"bytes,7,opt,name=competition" json:"competition,omitempty"`
	Selections    []*OutrightSelection `protobuf:"bytes,9,rep,name=selections" json:"selections,omitempty"`
	Status        EventStatus          `protobuf:"varint,10,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	FinishesAt    int64                `protobuf:"varint,11,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
	MarketId      uint32               `protobuf:"varint,12,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	ProvidersData []*ProviderData      `protobuf:"bytes,15,rep,name=providers_data,json=providersData" json:"providers_data,omitempty"`
	Key           string               `protobuf:"bytes,14,opt,name=key" json:"key,omitempty"`
	// DEPRECATED
	MarketGrade uint32        `protobuf:"varint,13,opt,name=market_grade,json=marketGrade" json:"market_grade,omitempty"`
	Competitors []*Competitor `protobuf:"bytes,8,rep,name=competitors" json:"competitors,omitempty"`
}

func (m *Outright) Reset()                    { *m = Outright{} }
func (m *Outright) String() string            { return proto.CompactTextString(m) }
func (*Outright) ProtoMessage()               {}
func (*Outright) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Outright) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Outright) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Outright) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Outright) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *Outright) GetEndsAt() int64 {
	if m != nil {
		return m.EndsAt
	}
	return 0
}

func (m *Outright) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *Outright) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *Outright) GetSelections() []*OutrightSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func (m *Outright) GetStatus() EventStatus {
	if m != nil {
		return m.Status
	}
	return EventStatus_PRE_TRADING
}

func (m *Outright) GetFinishesAt() int64 {
	if m != nil {
		return m.FinishesAt
	}
	return 0
}

func (m *Outright) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Outright) GetProvidersData() []*ProviderData {
	if m != nil {
		return m.ProvidersData
	}
	return nil
}

func (m *Outright) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Outright) GetMarketGrade() uint32 {
	if m != nil {
		return m.MarketGrade
	}
	return 0
}

func (m *Outright) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

type OutrightSelection struct {
	Timestamp       int64           `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	EventId         uint32          `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CompetitorId    uint32          `protobuf:"varint,5,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	Odds            float64         `protobuf:"fixed64,6,opt,name=odds" json:"odds,omitempty"`
	Probability     float64         `protobuf:"fixed64,7,opt,name=probability" json:"probability,omitempty"`
	MinStake        float64         `protobuf:"fixed64,8,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake        float64         `protobuf:"fixed64,9,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	Status          SelectionStatus `protobuf:"varint,10,opt,name=status,enum=api.SelectionStatus" json:"status,omitempty"`
	SpecialBetValue string          `protobuf:"bytes,12,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Outcome         string          `protobuf:"bytes,13,opt,name=outcome" json:"outcome,omitempty"`
	// internal use only (pricing engine state)
	ProviderKey string `protobuf:"bytes,11,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	// DEPRECATED
	MarketId uint32 `protobuf:"varint,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *OutrightSelection) Reset()                    { *m = OutrightSelection{} }
func (m *OutrightSelection) String() string            { return proto.CompactTextString(m) }
func (*OutrightSelection) ProtoMessage()               {}
func (*OutrightSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *OutrightSelection) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OutrightSelection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OutrightSelection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *OutrightSelection) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

func (m *OutrightSelection) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *OutrightSelection) GetProbability() float64 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *OutrightSelection) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *OutrightSelection) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *OutrightSelection) GetStatus() SelectionStatus {
	if m != nil {
		return m.Status
	}
	return SelectionStatus_DISABLED
}

func (m *OutrightSelection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *OutrightSelection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *OutrightSelection) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *OutrightSelection) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

type EventMetadata struct {
	EventStatus       string                          `protobuf:"bytes,1,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
	Score             []int32                         `protobuf:"varint,2,rep,packed,name=score" json:"score,omitempty"`
	SetScores         []*EventMetadata_Set            `protobuf:"bytes,3,rep,name=set_scores,json=setScores" json:"set_scores,omitempty"`
	ClearedScore      []int32                         `protobuf:"varint,4,rep,packed,name=cleared_score,json=clearedScore" json:"cleared_score,omitempty"`
	EventTime         string                          `protobuf:"bytes,5,opt,name=event_time,json=eventTime" json:"event_time,omitempty"`
	EventTimeExtended string                          `protobuf:"bytes,6,opt,name=event_time_extended,json=eventTimeExtended" json:"event_time_extended,omitempty"`
	ScoreList         []*EventMetadata_SummaryListing `protobuf:"bytes,7,rep,name=score_list,json=scoreList" json:"score_list,omitempty"`
	CardList          []*EventMetadata_SummaryListing `protobuf:"bytes,8,rep,name=card_list,json=cardList" json:"card_list,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//	*EventMetadata_Soccer
	//	*EventMetadata_SoccerV2
	//	*EventMetadata_Tennis
	//	*EventMetadata_Basketball
	//	*EventMetadata_IceHockey
	//	*EventMetadata_Handball
	//	*EventMetadata_TableTennis
	//	*EventMetadata_Baseball
	//	*EventMetadata_AmericanFootball
	//	*EventMetadata_Snooker
	//	*EventMetadata_Darts
	//	*EventMetadata_Futsal
	//	*EventMetadata_Bowls
	//	*EventMetadata_Cricket
	Metadata      isEventMetadata_Metadata `protobuf_oneof:"metadata"`
	LiveAvailable bool                     `protobuf:"varint,22,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
}

func (m *EventMetadata) Reset()                    { *m = EventMetadata{} }
func (m *EventMetadata) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata) ProtoMessage()               {}
func (*EventMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type isEventMetadata_Metadata interface{ isEventMetadata_Metadata() }

type EventMetadata_Soccer struct {
	Soccer *SoccerMetadata `protobuf:"bytes,9,opt,name=soccer,oneof"`
}
type EventMetadata_SoccerV2 struct {
	SoccerV2 *SoccerMetadataV2 `protobuf:"bytes,23,opt,name=soccer_v2,json=soccerV2,oneof"`
}
type EventMetadata_Tennis struct {
	Tennis *TennisMetadata `protobuf:"bytes,10,opt,name=tennis,oneof"`
}
type EventMetadata_Basketball struct {
	Basketball *BasketballMetadata `protobuf:"bytes,11,opt,name=basketball,oneof"`
}
type EventMetadata_IceHockey struct {
	IceHockey *IceHockeyMetadata `protobuf:"bytes,12,opt,name=ice_hockey,json=iceHockey,oneof"`
}
type EventMetadata_Handball struct {
	Handball *HandballMetadata `protobuf:"bytes,13,opt,name=handball,oneof"`
}
type EventMetadata_TableTennis struct {
	TableTennis *TableTennisMetadata `protobuf:"bytes,14,opt,name=table_tennis,json=tableTennis,oneof"`
}
type EventMetadata_Baseball struct {
	Baseball *BaseballMetadata `protobuf:"bytes,15,opt,name=baseball,oneof"`
}
type EventMetadata_AmericanFootball struct {
	AmericanFootball *AmericanFootballMetadata `protobuf:"bytes,16,opt,name=american_football,json=americanFootball,oneof"`
}
type EventMetadata_Snooker struct {
	Snooker *SnookerMetadata `protobuf:"bytes,17,opt,name=snooker,oneof"`
}
type EventMetadata_Darts struct {
	Darts *DartsMetadata `protobuf:"bytes,18,opt,name=darts,oneof"`
}
type EventMetadata_Futsal struct {
	Futsal *FutsalMetadata `protobuf:"bytes,19,opt,name=futsal,oneof"`
}
type EventMetadata_Bowls struct {
	Bowls *BowlsMetadata `protobuf:"bytes,20,opt,name=bowls,oneof"`
}
type EventMetadata_Cricket struct {
	Cricket *CricketMetadata `protobuf:"bytes,21,opt,name=cricket,oneof"`
}

func (*EventMetadata_Soccer) isEventMetadata_Metadata()           {}
func (*EventMetadata_SoccerV2) isEventMetadata_Metadata()         {}
func (*EventMetadata_Tennis) isEventMetadata_Metadata()           {}
func (*EventMetadata_Basketball) isEventMetadata_Metadata()       {}
func (*EventMetadata_IceHockey) isEventMetadata_Metadata()        {}
func (*EventMetadata_Handball) isEventMetadata_Metadata()         {}
func (*EventMetadata_TableTennis) isEventMetadata_Metadata()      {}
func (*EventMetadata_Baseball) isEventMetadata_Metadata()         {}
func (*EventMetadata_AmericanFootball) isEventMetadata_Metadata() {}
func (*EventMetadata_Snooker) isEventMetadata_Metadata()          {}
func (*EventMetadata_Darts) isEventMetadata_Metadata()            {}
func (*EventMetadata_Futsal) isEventMetadata_Metadata()           {}
func (*EventMetadata_Bowls) isEventMetadata_Metadata()            {}
func (*EventMetadata_Cricket) isEventMetadata_Metadata()          {}

func (m *EventMetadata) GetMetadata() isEventMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventMetadata) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

func (m *EventMetadata) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *EventMetadata) GetSetScores() []*EventMetadata_Set {
	if m != nil {
		return m.SetScores
	}
	return nil
}

func (m *EventMetadata) GetClearedScore() []int32 {
	if m != nil {
		return m.ClearedScore
	}
	return nil
}

func (m *EventMetadata) GetEventTime() string {
	if m != nil {
		return m.EventTime
	}
	return ""
}

func (m *EventMetadata) GetEventTimeExtended() string {
	if m != nil {
		return m.EventTimeExtended
	}
	return ""
}

func (m *EventMetadata) GetScoreList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *EventMetadata) GetCardList() []*EventMetadata_SummaryListing {
	if m != nil {
		return m.CardList
	}
	return nil
}

func (m *EventMetadata) GetSoccer() *SoccerMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Soccer); ok {
		return x.Soccer
	}
	return nil
}

func (m *EventMetadata) GetSoccerV2() *SoccerMetadataV2 {
	if x, ok := m.GetMetadata().(*EventMetadata_SoccerV2); ok {
		return x.SoccerV2
	}
	return nil
}

func (m *EventMetadata) GetTennis() *TennisMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Tennis); ok {
		return x.Tennis
	}
	return nil
}

func (m *EventMetadata) GetBasketball() *BasketballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Basketball); ok {
		return x.Basketball
	}
	return nil
}

func (m *EventMetadata) GetIceHockey() *IceHockeyMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_IceHockey); ok {
		return x.IceHockey
	}
	return nil
}

func (m *EventMetadata) GetHandball() *HandballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Handball); ok {
		return x.Handball
	}
	return nil
}

func (m *EventMetadata) GetTableTennis() *TableTennisMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_TableTennis); ok {
		return x.TableTennis
	}
	return nil
}

func (m *EventMetadata) GetBaseball() *BaseballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Baseball); ok {
		return x.Baseball
	}
	return nil
}

func (m *EventMetadata) GetAmericanFootball() *AmericanFootballMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_AmericanFootball); ok {
		return x.AmericanFootball
	}
	return nil
}

func (m *EventMetadata) GetSnooker() *SnookerMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Snooker); ok {
		return x.Snooker
	}
	return nil
}

func (m *EventMetadata) GetDarts() *DartsMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Darts); ok {
		return x.Darts
	}
	return nil
}

func (m *EventMetadata) GetFutsal() *FutsalMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Futsal); ok {
		return x.Futsal
	}
	return nil
}

func (m *EventMetadata) GetBowls() *BowlsMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Bowls); ok {
		return x.Bowls
	}
	return nil
}

func (m *EventMetadata) GetCricket() *CricketMetadata {
	if x, ok := m.GetMetadata().(*EventMetadata_Cricket); ok {
		return x.Cricket
	}
	return nil
}

func (m *EventMetadata) GetLiveAvailable() bool {
	if m != nil {
		return m.LiveAvailable
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventMetadata_OneofMarshaler, _EventMetadata_OneofUnmarshaler, _EventMetadata_OneofSizer, []interface{}{
		(*EventMetadata_Soccer)(nil),
		(*EventMetadata_SoccerV2)(nil),
		(*EventMetadata_Tennis)(nil),
		(*EventMetadata_Basketball)(nil),
		(*EventMetadata_IceHockey)(nil),
		(*EventMetadata_Handball)(nil),
		(*EventMetadata_TableTennis)(nil),
		(*EventMetadata_Baseball)(nil),
		(*EventMetadata_AmericanFootball)(nil),
		(*EventMetadata_Snooker)(nil),
		(*EventMetadata_Darts)(nil),
		(*EventMetadata_Futsal)(nil),
		(*EventMetadata_Bowls)(nil),
		(*EventMetadata_Cricket)(nil),
	}
}

func _EventMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventMetadata)
	// metadata
	switch x := m.Metadata.(type) {
	case *EventMetadata_Soccer:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Soccer); err != nil {
			return err
		}
	case *EventMetadata_SoccerV2:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SoccerV2); err != nil {
			return err
		}
	case *EventMetadata_Tennis:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tennis); err != nil {
			return err
		}
	case *EventMetadata_Basketball:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Basketball); err != nil {
			return err
		}
	case *EventMetadata_IceHockey:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IceHockey); err != nil {
			return err
		}
	case *EventMetadata_Handball:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Handball); err != nil {
			return err
		}
	case *EventMetadata_TableTennis:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableTennis); err != nil {
			return err
		}
	case *EventMetadata_Baseball:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Baseball); err != nil {
			return err
		}
	case *EventMetadata_AmericanFootball:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmericanFootball); err != nil {
			return err
		}
	case *EventMetadata_Snooker:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Snooker); err != nil {
			return err
		}
	case *EventMetadata_Darts:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Darts); err != nil {
			return err
		}
	case *EventMetadata_Futsal:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Futsal); err != nil {
			return err
		}
	case *EventMetadata_Bowls:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bowls); err != nil {
			return err
		}
	case *EventMetadata_Cricket:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cricket); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventMetadata.Metadata has unexpected type %T", x)
	}
	return nil
}

func _EventMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventMetadata)
	switch tag {
	case 9: // metadata.soccer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoccerMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Soccer{msg}
		return true, err
	case 23: // metadata.soccer_v2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SoccerMetadataV2)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_SoccerV2{msg}
		return true, err
	case 10: // metadata.tennis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TennisMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Tennis{msg}
		return true, err
	case 11: // metadata.basketball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasketballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Basketball{msg}
		return true, err
	case 12: // metadata.ice_hockey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IceHockeyMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_IceHockey{msg}
		return true, err
	case 13: // metadata.handball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HandballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Handball{msg}
		return true, err
	case 14: // metadata.table_tennis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTennisMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_TableTennis{msg}
		return true, err
	case 15: // metadata.baseball
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BaseballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Baseball{msg}
		return true, err
	case 16: // metadata.american_football
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmericanFootballMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_AmericanFootball{msg}
		return true, err
	case 17: // metadata.snooker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SnookerMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Snooker{msg}
		return true, err
	case 18: // metadata.darts
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DartsMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Darts{msg}
		return true, err
	case 19: // metadata.futsal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FutsalMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Futsal{msg}
		return true, err
	case 20: // metadata.bowls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BowlsMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Bowls{msg}
		return true, err
	case 21: // metadata.cricket
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CricketMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &EventMetadata_Cricket{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventMetadata)
	// metadata
	switch x := m.Metadata.(type) {
	case *EventMetadata_Soccer:
		s := proto.Size(x.Soccer)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_SoccerV2:
		s := proto.Size(x.SoccerV2)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Tennis:
		s := proto.Size(x.Tennis)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Basketball:
		s := proto.Size(x.Basketball)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_IceHockey:
		s := proto.Size(x.IceHockey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Handball:
		s := proto.Size(x.Handball)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_TableTennis:
		s := proto.Size(x.TableTennis)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Baseball:
		s := proto.Size(x.Baseball)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_AmericanFootball:
		s := proto.Size(x.AmericanFootball)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Snooker:
		s := proto.Size(x.Snooker)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Darts:
		s := proto.Size(x.Darts)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Futsal:
		s := proto.Size(x.Futsal)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Bowls:
		s := proto.Size(x.Bowls)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMetadata_Cricket:
		s := proto.Size(x.Cricket)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventMetadata_Set struct {
	Score []int32 `protobuf:"varint,1,rep,packed,name=score" json:"score,omitempty"`
}

func (m *EventMetadata_Set) Reset()                    { *m = EventMetadata_Set{} }
func (m *EventMetadata_Set) String() string            { return proto.CompactTextString(m) }
func (*EventMetadata_Set) ProtoMessage()               {}
func (*EventMetadata_Set) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32, 0} }

func (m *EventMetadata_Set) GetScore() []int32 {
	if m != nil {
		return m.Score
	}
	return nil
}

type EventMetadata_SummaryListing struct {
	Cancelled  string `protobuf:"bytes,1,opt,name=cancelled" json:"cancelled,omitempty"`
	PlayerName string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PlayerId   uint32 `protobuf:"varint,3,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	TeamName   string `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamId     uint32 `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Time       string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	HomeScore  int32  `protobuf:"varint,7,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore  int32  `protobuf:"varint,8,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	Type       string `protobuf:"bytes,9,opt,name=type" json:"type,omitempty"`
}

func (m *EventMetadata_SummaryListing) Reset()         { *m = EventMetadata_SummaryListing{} }
func (m *EventMetadata_SummaryListing) String() string { return proto.CompactTextString(m) }
func (*EventMetadata_SummaryListing) ProtoMessage()    {}
func (*EventMetadata_SummaryListing) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 1}
}

func (m *EventMetadata_SummaryListing) GetCancelled() string {
	if m != nil {
		return m.Cancelled
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetTeamId() uint32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *EventMetadata_SummaryListing) GetHomeScore() int32 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetAwayScore() int32 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *EventMetadata_SummaryListing) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SoccerMetadataV2 struct {
	CornersAway        string `protobuf:"bytes,1,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        string `protobuf:"bytes,2,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       string `protobuf:"bytes,3,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       string `protobuf:"bytes,4,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    string `protobuf:"bytes,5,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    string `protobuf:"bytes,6,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway string `protobuf:"bytes,7,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome string `protobuf:"bytes,8,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
	HomeScore          string `protobuf:"bytes,9,opt,name=home_score,json=homeScore" json:"home_score,omitempty"`
	AwayScore          string `protobuf:"bytes,10,opt,name=away_score,json=awayScore" json:"away_score,omitempty"`
	// in the end this will be enum type specific to each sports
	// and generated from gaming static sports games yml definitions
	EventStatus string `protobuf:"bytes,11,opt,name=event_status,json=eventStatus" json:"event_status,omitempty"`
}

func (m *SoccerMetadataV2) Reset()                    { *m = SoccerMetadataV2{} }
func (m *SoccerMetadataV2) String() string            { return proto.CompactTextString(m) }
func (*SoccerMetadataV2) ProtoMessage()               {}
func (*SoccerMetadataV2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SoccerMetadataV2) GetCornersAway() string {
	if m != nil {
		return m.CornersAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetCornersHome() string {
	if m != nil {
		return m.CornersHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetRedCardsAway() string {
	if m != nil {
		return m.RedCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetRedCardsHome() string {
	if m != nil {
		return m.RedCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowCardsAway() string {
	if m != nil {
		return m.YellowCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowCardsHome() string {
	if m != nil {
		return m.YellowCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowRedCardsAway() string {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return ""
}

func (m *SoccerMetadataV2) GetYellowRedCardsHome() string {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return ""
}

func (m *SoccerMetadataV2) GetHomeScore() string {
	if m != nil {
		return m.HomeScore
	}
	return ""
}

func (m *SoccerMetadataV2) GetAwayScore() string {
	if m != nil {
		return m.AwayScore
	}
	return ""
}

func (m *SoccerMetadataV2) GetEventStatus() string {
	if m != nil {
		return m.EventStatus
	}
	return ""
}

type SoccerMetadata struct {
	CornersAway        int32 `protobuf:"varint,1,opt,name=corners_away,json=cornersAway" json:"corners_away,omitempty"`
	CornersHome        int32 `protobuf:"varint,2,opt,name=corners_home,json=cornersHome" json:"corners_home,omitempty"`
	RedCardsAway       int32 `protobuf:"varint,3,opt,name=red_cards_away,json=redCardsAway" json:"red_cards_away,omitempty"`
	RedCardsHome       int32 `protobuf:"varint,4,opt,name=red_cards_home,json=redCardsHome" json:"red_cards_home,omitempty"`
	YellowCardsAway    int32 `protobuf:"varint,5,opt,name=yellow_cards_away,json=yellowCardsAway" json:"yellow_cards_away,omitempty"`
	YellowCardsHome    int32 `protobuf:"varint,6,opt,name=yellow_cards_home,json=yellowCardsHome" json:"yellow_cards_home,omitempty"`
	YellowRedCardsAway int32 `protobuf:"varint,7,opt,name=yellow_red_cards_away,json=yellowRedCardsAway" json:"yellow_red_cards_away,omitempty"`
	YellowRedCardsHome int32 `protobuf:"varint,8,opt,name=yellow_red_cards_home,json=yellowRedCardsHome" json:"yellow_red_cards_home,omitempty"`
}

func (m *SoccerMetadata) Reset()                    { *m = SoccerMetadata{} }
func (m *SoccerMetadata) String() string            { return proto.CompactTextString(m) }
func (*SoccerMetadata) ProtoMessage()               {}
func (*SoccerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *SoccerMetadata) GetCornersAway() int32 {
	if m != nil {
		return m.CornersAway
	}
	return 0
}

func (m *SoccerMetadata) GetCornersHome() int32 {
	if m != nil {
		return m.CornersHome
	}
	return 0
}

func (m *SoccerMetadata) GetRedCardsAway() int32 {
	if m != nil {
		return m.RedCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetRedCardsHome() int32 {
	if m != nil {
		return m.RedCardsHome
	}
	return 0
}

func (m *SoccerMetadata) GetYellowCardsAway() int32 {
	if m != nil {
		return m.YellowCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetYellowCardsHome() int32 {
	if m != nil {
		return m.YellowCardsHome
	}
	return 0
}

func (m *SoccerMetadata) GetYellowRedCardsAway() int32 {
	if m != nil {
		return m.YellowRedCardsAway
	}
	return 0
}

func (m *SoccerMetadata) GetYellowRedCardsHome() int32 {
	if m != nil {
		return m.YellowRedCardsHome
	}
	return 0
}

type TennisMetadata struct {
	Server     int32   `protobuf:"varint,1,opt,name=server" json:"server,omitempty"`
	IsTiebreak bool    `protobuf:"varint,2,opt,name=is_tiebreak,json=isTiebreak" json:"is_tiebreak,omitempty"`
	GameScore  []int32 `protobuf:"varint,5,rep,packed,name=game_score,json=gameScore" json:"game_score,omitempty"`
}

func (m *TennisMetadata) Reset()                    { *m = TennisMetadata{} }
func (m *TennisMetadata) String() string            { return proto.CompactTextString(m) }
func (*TennisMetadata) ProtoMessage()               {}
func (*TennisMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *TennisMetadata) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *TennisMetadata) GetIsTiebreak() bool {
	if m != nil {
		return m.IsTiebreak
	}
	return false
}

func (m *TennisMetadata) GetGameScore() []int32 {
	if m != nil {
		return m.GameScore
	}
	return nil
}

type BasketballMetadata struct {
	ClockStopped          int32  `protobuf:"varint,1,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,2,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,3,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *BasketballMetadata) Reset()                    { *m = BasketballMetadata{} }
func (m *BasketballMetadata) String() string            { return proto.CompactTextString(m) }
func (*BasketballMetadata) ProtoMessage()               {}
func (*BasketballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *BasketballMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *BasketballMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *BasketballMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type IceHockeyMetadata struct {
	SuspendHome int32 `protobuf:"varint,1,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway int32 `protobuf:"varint,2,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// already in basketball
	ClockStopped          int32  `protobuf:"varint,3,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,4,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,5,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *IceHockeyMetadata) Reset()                    { *m = IceHockeyMetadata{} }
func (m *IceHockeyMetadata) String() string            { return proto.CompactTextString(m) }
func (*IceHockeyMetadata) ProtoMessage()               {}
func (*IceHockeyMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *IceHockeyMetadata) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *IceHockeyMetadata) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

func (m *IceHockeyMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *IceHockeyMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *IceHockeyMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type HandballMetadata struct {
	SuspendHome int32 `protobuf:"varint,1,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway int32 `protobuf:"varint,2,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
	// already in basketball
	ClockStopped          int32  `protobuf:"varint,3,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	RemainingTime         string `protobuf:"bytes,4,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,5,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *HandballMetadata) Reset()                    { *m = HandballMetadata{} }
func (m *HandballMetadata) String() string            { return proto.CompactTextString(m) }
func (*HandballMetadata) ProtoMessage()               {}
func (*HandballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *HandballMetadata) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *HandballMetadata) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

func (m *HandballMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *HandballMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *HandballMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type TableTennisMetadata struct {
	Expedite int32 `protobuf:"varint,1,opt,name=expedite" json:"expedite,omitempty"`
	// already in tennis
	Server int32 `protobuf:"varint,2,opt,name=server" json:"server,omitempty"`
}

func (m *TableTennisMetadata) Reset()                    { *m = TableTennisMetadata{} }
func (m *TableTennisMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableTennisMetadata) ProtoMessage()               {}
func (*TableTennisMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *TableTennisMetadata) GetExpedite() int32 {
	if m != nil {
		return m.Expedite
	}
	return 0
}

func (m *TableTennisMetadata) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

type BaseballMetadata struct {
	AwayBatter  int32  `protobuf:"varint,1,opt,name=away_batter,json=awayBatter" json:"away_batter,omitempty"`
	HomeBatter  int32  `protobuf:"varint,2,opt,name=home_batter,json=homeBatter" json:"home_batter,omitempty"`
	Balls       int32  `protobuf:"varint,3,opt,name=balls" json:"balls,omitempty"`
	Bases       string `protobuf:"bytes,4,opt,name=bases" json:"bases,omitempty"`
	Strikes     int32  `protobuf:"varint,5,opt,name=strikes" json:"strikes,omitempty"`
	Outs        int32  `protobuf:"varint,6,opt,name=outs" json:"outs,omitempty"`
	AwayPitcher string `protobuf:"bytes,7,opt,name=away_pitcher,json=awayPitcher" json:"away_pitcher,omitempty"`
	HomePitcher string `protobuf:"bytes,8,opt,name=home_pitcher,json=homePitcher" json:"home_pitcher,omitempty"`
}

func (m *BaseballMetadata) Reset()                    { *m = BaseballMetadata{} }
func (m *BaseballMetadata) String() string            { return proto.CompactTextString(m) }
func (*BaseballMetadata) ProtoMessage()               {}
func (*BaseballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *BaseballMetadata) GetAwayBatter() int32 {
	if m != nil {
		return m.AwayBatter
	}
	return 0
}

func (m *BaseballMetadata) GetHomeBatter() int32 {
	if m != nil {
		return m.HomeBatter
	}
	return 0
}

func (m *BaseballMetadata) GetBalls() int32 {
	if m != nil {
		return m.Balls
	}
	return 0
}

func (m *BaseballMetadata) GetBases() string {
	if m != nil {
		return m.Bases
	}
	return ""
}

func (m *BaseballMetadata) GetStrikes() int32 {
	if m != nil {
		return m.Strikes
	}
	return 0
}

func (m *BaseballMetadata) GetOuts() int32 {
	if m != nil {
		return m.Outs
	}
	return 0
}

func (m *BaseballMetadata) GetAwayPitcher() string {
	if m != nil {
		return m.AwayPitcher
	}
	return ""
}

func (m *BaseballMetadata) GetHomePitcher() string {
	if m != nil {
		return m.HomePitcher
	}
	return ""
}

type AmericanFootballMetadata struct {
	Possession int32 `protobuf:"varint,1,opt,name=possession" json:"possession,omitempty"`
	Position   int32 `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	Try        int32 `protobuf:"varint,3,opt,name=try" json:"try,omitempty"`
	Yards      int32 `protobuf:"varint,4,opt,name=yards" json:"yards,omitempty"`
	// already in basketball
	RemainingTime         string `protobuf:"bytes,5,opt,name=remaining_time,json=remainingTime" json:"remaining_time,omitempty"`
	RemainingTimeInPeriod string `protobuf:"bytes,6,opt,name=remaining_time_in_period,json=remainingTimeInPeriod" json:"remaining_time_in_period,omitempty"`
}

func (m *AmericanFootballMetadata) Reset()                    { *m = AmericanFootballMetadata{} }
func (m *AmericanFootballMetadata) String() string            { return proto.CompactTextString(m) }
func (*AmericanFootballMetadata) ProtoMessage()               {}
func (*AmericanFootballMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *AmericanFootballMetadata) GetPossession() int32 {
	if m != nil {
		return m.Possession
	}
	return 0
}

func (m *AmericanFootballMetadata) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *AmericanFootballMetadata) GetTry() int32 {
	if m != nil {
		return m.Try
	}
	return 0
}

func (m *AmericanFootballMetadata) GetYards() int32 {
	if m != nil {
		return m.Yards
	}
	return 0
}

func (m *AmericanFootballMetadata) GetRemainingTime() string {
	if m != nil {
		return m.RemainingTime
	}
	return ""
}

func (m *AmericanFootballMetadata) GetRemainingTimeInPeriod() string {
	if m != nil {
		return m.RemainingTimeInPeriod
	}
	return ""
}

type SnookerMetadata struct {
	RemainingReds int32 `protobuf:"varint,1,opt,name=remaining_reds,json=remainingReds" json:"remaining_reds,omitempty"`
	Visit         int32 `protobuf:"varint,2,opt,name=visit" json:"visit,omitempty"`
}

func (m *SnookerMetadata) Reset()                    { *m = SnookerMetadata{} }
func (m *SnookerMetadata) String() string            { return proto.CompactTextString(m) }
func (*SnookerMetadata) ProtoMessage()               {}
func (*SnookerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *SnookerMetadata) GetRemainingReds() int32 {
	if m != nil {
		return m.RemainingReds
	}
	return 0
}

func (m *SnookerMetadata) GetVisit() int32 {
	if m != nil {
		return m.Visit
	}
	return 0
}

type DartsMetadata struct {
	LegScore int32 `protobuf:"varint,1,opt,name=leg_score,json=legScore" json:"leg_score,omitempty"`
	Throw    int32 `protobuf:"varint,2,opt,name=throw" json:"throw,omitempty"`
	// already in snooker
	Visit int32 `protobuf:"varint,3,opt,name=visit" json:"visit,omitempty"`
}

func (m *DartsMetadata) Reset()                    { *m = DartsMetadata{} }
func (m *DartsMetadata) String() string            { return proto.CompactTextString(m) }
func (*DartsMetadata) ProtoMessage()               {}
func (*DartsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *DartsMetadata) GetLegScore() int32 {
	if m != nil {
		return m.LegScore
	}
	return 0
}

func (m *DartsMetadata) GetThrow() int32 {
	if m != nil {
		return m.Throw
	}
	return 0
}

func (m *DartsMetadata) GetVisit() int32 {
	if m != nil {
		return m.Visit
	}
	return 0
}

type FutsalMetadata struct {
	// already in ice hockey and handball
	ClockStopped int32 `protobuf:"varint,1,opt,name=clock_stopped,json=clockStopped" json:"clock_stopped,omitempty"`
	SuspendHome  int32 `protobuf:"varint,2,opt,name=suspend_home,json=suspendHome" json:"suspend_home,omitempty"`
	SuspendAway  int32 `protobuf:"varint,3,opt,name=suspend_away,json=suspendAway" json:"suspend_away,omitempty"`
}

func (m *FutsalMetadata) Reset()                    { *m = FutsalMetadata{} }
func (m *FutsalMetadata) String() string            { return proto.CompactTextString(m) }
func (*FutsalMetadata) ProtoMessage()               {}
func (*FutsalMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *FutsalMetadata) GetClockStopped() int32 {
	if m != nil {
		return m.ClockStopped
	}
	return 0
}

func (m *FutsalMetadata) GetSuspendHome() int32 {
	if m != nil {
		return m.SuspendHome
	}
	return 0
}

func (m *FutsalMetadata) GetSuspendAway() int32 {
	if m != nil {
		return m.SuspendAway
	}
	return 0
}

type BowlsMetadata struct {
	RemainingBowlsAway int32 `protobuf:"varint,1,opt,name=remaining_bowls_away,json=remainingBowlsAway" json:"remaining_bowls_away,omitempty"`
	RemainingBowlsHome int32 `protobuf:"varint,2,opt,name=remaining_bowls_home,json=remainingBowlsHome" json:"remaining_bowls_home,omitempty"`
	CurrentEnd         int32 `protobuf:"varint,3,opt,name=current_end,json=currentEnd" json:"current_end,omitempty"`
	Delivery           int32 `protobuf:"varint,4,opt,name=delivery" json:"delivery,omitempty"`
}

func (m *BowlsMetadata) Reset()                    { *m = BowlsMetadata{} }
func (m *BowlsMetadata) String() string            { return proto.CompactTextString(m) }
func (*BowlsMetadata) ProtoMessage()               {}
func (*BowlsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *BowlsMetadata) GetRemainingBowlsAway() int32 {
	if m != nil {
		return m.RemainingBowlsAway
	}
	return 0
}

func (m *BowlsMetadata) GetRemainingBowlsHome() int32 {
	if m != nil {
		return m.RemainingBowlsHome
	}
	return 0
}

func (m *BowlsMetadata) GetCurrentEnd() int32 {
	if m != nil {
		return m.CurrentEnd
	}
	return 0
}

func (m *BowlsMetadata) GetDelivery() int32 {
	if m != nil {
		return m.Delivery
	}
	return 0
}

type CricketMetadata struct {
	DismissalsAway     int32  `protobuf:"varint,1,opt,name=dismissals_away,json=dismissalsAway" json:"dismissals_away,omitempty"`
	DismissalsHome     int32  `protobuf:"varint,2,opt,name=dismissals_home,json=dismissalsHome" json:"dismissals_home,omitempty"`
	Over               int32  `protobuf:"varint,3,opt,name=over" json:"over,omitempty"`
	Innings            int32  `protobuf:"varint,4,opt,name=innings" json:"innings,omitempty"`
	PenaltyRunsHome    int32  `protobuf:"varint,5,opt,name=penalty_runs_home,json=penaltyRunsHome" json:"penalty_runs_home,omitempty"`
	PenaltyRunsAway    int32  `protobuf:"varint,6,opt,name=penalty_runs_away,json=penaltyRunsAway" json:"penalty_runs_away,omitempty"`
	HomeRuns           int32  `protobuf:"varint,9,opt,name=home_runs,json=homeRuns" json:"home_runs,omitempty"`
	AwayRuns           int32  `protobuf:"varint,10,opt,name=away_runs,json=awayRuns" json:"away_runs,omitempty"`
	HomeWickets        int32  `protobuf:"varint,11,opt,name=home_wickets,json=homeWickets" json:"home_wickets,omitempty"`
	AwayWickets        int32  `protobuf:"varint,12,opt,name=away_wickets,json=awayWickets" json:"away_wickets,omitempty"`
	TossTime           int64  `protobuf:"varint,13,opt,name=toss_time,json=tossTime" json:"toss_time,omitempty"`
	StartBattingTeam   uint32 `protobuf:"varint,14,opt,name=start_batting_team,json=startBattingTeam" json:"start_batting_team,omitempty"`
	CurrentBattingTeam uint32 `protobuf:"varint,15,opt,name=current_batting_team,json=currentBattingTeam" json:"current_batting_team,omitempty"`
	TossWinner         uint32 `protobuf:"varint,16,opt,name=toss_winner,json=tossWinner" json:"toss_winner,omitempty"`
	HomeTotalOvers     uint32 `protobuf:"varint,17,opt,name=home_total_overs,json=homeTotalOvers" json:"home_total_overs,omitempty"`
	AwayTotalOvers     uint32 `protobuf:"varint,18,opt,name=away_total_overs,json=awayTotalOvers" json:"away_total_overs,omitempty"`
	HomeOver           uint32 `protobuf:"varint,19,opt,name=home_over,json=homeOver" json:"home_over,omitempty"`
	AwayOver           uint32 `protobuf:"varint,20,opt,name=away_over,json=awayOver" json:"away_over,omitempty"`
	HomeBalls          string `protobuf:"bytes,21,opt,name=home_balls,json=homeBalls" json:"home_balls,omitempty"`
	AwayBalls          string `protobuf:"bytes,22,opt,name=away_balls,json=awayBalls" json:"away_balls,omitempty"`
}

func (m *CricketMetadata) Reset()                    { *m = CricketMetadata{} }
func (m *CricketMetadata) String() string            { return proto.CompactTextString(m) }
func (*CricketMetadata) ProtoMessage()               {}
func (*CricketMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CricketMetadata) GetDismissalsAway() int32 {
	if m != nil {
		return m.DismissalsAway
	}
	return 0
}

func (m *CricketMetadata) GetDismissalsHome() int32 {
	if m != nil {
		return m.DismissalsHome
	}
	return 0
}

func (m *CricketMetadata) GetOver() int32 {
	if m != nil {
		return m.Over
	}
	return 0
}

func (m *CricketMetadata) GetInnings() int32 {
	if m != nil {
		return m.Innings
	}
	return 0
}

func (m *CricketMetadata) GetPenaltyRunsHome() int32 {
	if m != nil {
		return m.PenaltyRunsHome
	}
	return 0
}

func (m *CricketMetadata) GetPenaltyRunsAway() int32 {
	if m != nil {
		return m.PenaltyRunsAway
	}
	return 0
}

func (m *CricketMetadata) GetHomeRuns() int32 {
	if m != nil {
		return m.HomeRuns
	}
	return 0
}

func (m *CricketMetadata) GetAwayRuns() int32 {
	if m != nil {
		return m.AwayRuns
	}
	return 0
}

func (m *CricketMetadata) GetHomeWickets() int32 {
	if m != nil {
		return m.HomeWickets
	}
	return 0
}

func (m *CricketMetadata) GetAwayWickets() int32 {
	if m != nil {
		return m.AwayWickets
	}
	return 0
}

func (m *CricketMetadata) GetTossTime() int64 {
	if m != nil {
		return m.TossTime
	}
	return 0
}

func (m *CricketMetadata) GetStartBattingTeam() uint32 {
	if m != nil {
		return m.StartBattingTeam
	}
	return 0
}

func (m *CricketMetadata) GetCurrentBattingTeam() uint32 {
	if m != nil {
		return m.CurrentBattingTeam
	}
	return 0
}

func (m *CricketMetadata) GetTossWinner() uint32 {
	if m != nil {
		return m.TossWinner
	}
	return 0
}

func (m *CricketMetadata) GetHomeTotalOvers() uint32 {
	if m != nil {
		return m.HomeTotalOvers
	}
	return 0
}

func (m *CricketMetadata) GetAwayTotalOvers() uint32 {
	if m != nil {
		return m.AwayTotalOvers
	}
	return 0
}

func (m *CricketMetadata) GetHomeOver() uint32 {
	if m != nil {
		return m.HomeOver
	}
	return 0
}

func (m *CricketMetadata) GetAwayOver() uint32 {
	if m != nil {
		return m.AwayOver
	}
	return 0
}

func (m *CricketMetadata) GetHomeBalls() string {
	if m != nil {
		return m.HomeBalls
	}
	return ""
}

func (m *CricketMetadata) GetAwayBalls() string {
	if m != nil {
		return m.AwayBalls
	}
	return ""
}

// Tree objects for the purpose of standardizing the api
type SportsTree struct {
	Sports []*SportsTreeEntity `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
}

func (m *SportsTree) Reset()                    { *m = SportsTree{} }
func (m *SportsTree) String() string            { return proto.CompactTextString(m) }
func (*SportsTree) ProtoMessage()               {}
func (*SportsTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *SportsTree) GetSports() []*SportsTreeEntity {
	if m != nil {
		return m.Sports
	}
	return nil
}

type SportsTreeEntity struct {
	Id           uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name         string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Competitions []*CompetitionTree `protobuf:"bytes,3,rep,name=competitions" json:"competitions,omitempty"`
	Key          string             `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
}

func (m *SportsTreeEntity) Reset()                    { *m = SportsTreeEntity{} }
func (m *SportsTreeEntity) String() string            { return proto.CompactTextString(m) }
func (*SportsTreeEntity) ProtoMessage()               {}
func (*SportsTreeEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *SportsTreeEntity) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SportsTreeEntity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SportsTreeEntity) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

func (m *SportsTreeEntity) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CompetitionTree struct {
	Id     uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    string     `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	Image  string     `protobuf:"bytes,11,opt,name=image" json:"image,omitempty"`
	Sport  *Generic   `protobuf:"bytes,3,opt,name=sport" json:"sport,omitempty"`
	Groups []*Generic `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// empty in top level event tree
	Events    []*Event    `protobuf:"bytes,5,rep,name=events" json:"events,omitempty"`
	Outrights []*Outright `protobuf:"bytes,6,rep,name=outrights" json:"outrights,omitempty"`
	// indicator of how many to expect
	EventCount    uint32 `protobuf:"varint,8,opt,name=event_count,json=eventCount" json:"event_count,omitempty"`
	OutrightCount uint32 `protobuf:"varint,9,opt,name=outright_count,json=outrightCount" json:"outright_count,omitempty"`
	// used for sorting
	Priority uint32 `protobuf:"varint,10,opt,name=priority" json:"priority,omitempty"`
	Grade    uint32 `protobuf:"varint,12,opt,name=grade" json:"grade,omitempty"`
	// deprecated in favor of priority
	Score uint32 `protobuf:"varint,7,opt,name=score" json:"score,omitempty"`
}

func (m *CompetitionTree) Reset()                    { *m = CompetitionTree{} }
func (m *CompetitionTree) String() string            { return proto.CompactTextString(m) }
func (*CompetitionTree) ProtoMessage()               {}
func (*CompetitionTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CompetitionTree) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionTree) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompetitionTree) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CompetitionTree) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CompetitionTree) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

func (m *CompetitionTree) GetGroups() []*Generic {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *CompetitionTree) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *CompetitionTree) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

func (m *CompetitionTree) GetEventCount() uint32 {
	if m != nil {
		return m.EventCount
	}
	return 0
}

func (m *CompetitionTree) GetOutrightCount() uint32 {
	if m != nil {
		return m.OutrightCount
	}
	return 0
}

func (m *CompetitionTree) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CompetitionTree) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *CompetitionTree) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type EventList struct {
	Events []*Event `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (m *EventList) Reset()                    { *m = EventList{} }
func (m *EventList) String() string            { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()               {}
func (*EventList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *EventList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type OutrightList struct {
	Outrights []*Outright `protobuf:"bytes,2,rep,name=outrights" json:"outrights,omitempty"`
}

func (m *OutrightList) Reset()                    { *m = OutrightList{} }
func (m *OutrightList) String() string            { return proto.CompactTextString(m) }
func (*OutrightList) ProtoMessage()               {}
func (*OutrightList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *OutrightList) GetOutrights() []*Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

type CompetitionList struct {
	Competitions []*CompetitionTree `protobuf:"bytes,1,rep,name=competitions" json:"competitions,omitempty"`
}

func (m *CompetitionList) Reset()                    { *m = CompetitionList{} }
func (m *CompetitionList) String() string            { return proto.CompactTextString(m) }
func (*CompetitionList) ProtoMessage()               {}
func (*CompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *CompetitionList) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

type SportList struct {
	Sports []*Generic `protobuf:"bytes,1,rep,name=sports" json:"sports,omitempty"`
}

func (m *SportList) Reset()                    { *m = SportList{} }
func (m *SportList) String() string            { return proto.CompactTextString(m) }
func (*SportList) ProtoMessage()               {}
func (*SportList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *SportList) GetSports() []*Generic {
	if m != nil {
		return m.Sports
	}
	return nil
}

type MultipleCompetitionListMetadata struct {
	Id    uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key   string   `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Name  string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Sport *Generic `protobuf:"bytes,4,opt,name=sport" json:"sport,omitempty"`
}

func (m *MultipleCompetitionListMetadata) Reset()         { *m = MultipleCompetitionListMetadata{} }
func (m *MultipleCompetitionListMetadata) String() string { return proto.CompactTextString(m) }
func (*MultipleCompetitionListMetadata) ProtoMessage()    {}
func (*MultipleCompetitionListMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{54}
}

func (m *MultipleCompetitionListMetadata) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MultipleCompetitionListMetadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MultipleCompetitionListMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MultipleCompetitionListMetadata) GetSport() *Generic {
	if m != nil {
		return m.Sport
	}
	return nil
}

type MultipleCompetitionLists struct {
	Lists []*MultipleCompetitionListMetadata `protobuf:"bytes,1,rep,name=lists" json:"lists,omitempty"`
}

func (m *MultipleCompetitionLists) Reset()                    { *m = MultipleCompetitionLists{} }
func (m *MultipleCompetitionLists) String() string            { return proto.CompactTextString(m) }
func (*MultipleCompetitionLists) ProtoMessage()               {}
func (*MultipleCompetitionLists) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *MultipleCompetitionLists) GetLists() []*MultipleCompetitionListMetadata {
	if m != nil {
		return m.Lists
	}
	return nil
}

type MultipleCompetitionList struct {
	Metadata     *MultipleCompetitionListMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Competitions []*CompetitionTree               `protobuf:"bytes,2,rep,name=competitions" json:"competitions,omitempty"`
}

func (m *MultipleCompetitionList) Reset()                    { *m = MultipleCompetitionList{} }
func (m *MultipleCompetitionList) String() string            { return proto.CompactTextString(m) }
func (*MultipleCompetitionList) ProtoMessage()               {}
func (*MultipleCompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *MultipleCompetitionList) GetMetadata() *MultipleCompetitionListMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MultipleCompetitionList) GetCompetitions() []*CompetitionTree {
	if m != nil {
		return m.Competitions
	}
	return nil
}

// Store blacklisted countries for different platforms
type GeoRestriction struct {
	Desktop []string `protobuf:"bytes,1,rep,name=desktop" json:"desktop,omitempty"`
	Mobile  []string `protobuf:"bytes,2,rep,name=mobile" json:"mobile,omitempty"`
}

func (m *GeoRestriction) Reset()                    { *m = GeoRestriction{} }
func (m *GeoRestriction) String() string            { return proto.CompactTextString(m) }
func (*GeoRestriction) ProtoMessage()               {}
func (*GeoRestriction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *GeoRestriction) GetDesktop() []string {
	if m != nil {
		return m.Desktop
	}
	return nil
}

func (m *GeoRestriction) GetMobile() []string {
	if m != nil {
		return m.Mobile
	}
	return nil
}

// for matching ratio api
type MatchCountByProvider struct {
	MatchDetails *MatchingDetails              `protobuf:"bytes,1,opt,name=match_details,json=matchDetails" json:"match_details,omitempty"`
	SportCount   map[uint32]*MatchCountBySport `protobuf:"bytes,2,rep,name=sport_count,json=sportCount" json:"sport_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MatchCountByProvider) Reset()                    { *m = MatchCountByProvider{} }
func (m *MatchCountByProvider) String() string            { return proto.CompactTextString(m) }
func (*MatchCountByProvider) ProtoMessage()               {}
func (*MatchCountByProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *MatchCountByProvider) GetMatchDetails() *MatchingDetails {
	if m != nil {
		return m.MatchDetails
	}
	return nil
}

func (m *MatchCountByProvider) GetSportCount() map[uint32]*MatchCountBySport {
	if m != nil {
		return m.SportCount
	}
	return nil
}

type MatchCountBySport struct {
	MatchDetails    *MatchingDetails         `protobuf:"bytes,1,opt,name=match_details,json=matchDetails" json:"match_details,omitempty"`
	MatchConditions []*MatchCountByCondition `protobuf:"bytes,2,rep,name=match_conditions,json=matchConditions" json:"match_conditions,omitempty"`
}

func (m *MatchCountBySport) Reset()                    { *m = MatchCountBySport{} }
func (m *MatchCountBySport) String() string            { return proto.CompactTextString(m) }
func (*MatchCountBySport) ProtoMessage()               {}
func (*MatchCountBySport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *MatchCountBySport) GetMatchDetails() *MatchingDetails {
	if m != nil {
		return m.MatchDetails
	}
	return nil
}

func (m *MatchCountBySport) GetMatchConditions() []*MatchCountByCondition {
	if m != nil {
		return m.MatchConditions
	}
	return nil
}

type MatchCountByCondition struct {
	Condition    MatchedCondition `protobuf:"varint,1,opt,name=condition,enum=api.MatchedCondition" json:"condition,omitempty"`
	MatchDetails *MatchingDetails `protobuf:"bytes,2,opt,name=match_details,json=matchDetails" json:"match_details,omitempty"`
}

func (m *MatchCountByCondition) Reset()                    { *m = MatchCountByCondition{} }
func (m *MatchCountByCondition) String() string            { return proto.CompactTextString(m) }
func (*MatchCountByCondition) ProtoMessage()               {}
func (*MatchCountByCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *MatchCountByCondition) GetCondition() MatchedCondition {
	if m != nil {
		return m.Condition
	}
	return MatchedCondition_AUTO_CREATED
}

func (m *MatchCountByCondition) GetMatchDetails() *MatchingDetails {
	if m != nil {
		return m.MatchDetails
	}
	return nil
}

type MatchingDetails struct {
	MatchedCount int64 `protobuf:"varint,1,opt,name=matched_count,json=matchedCount" json:"matched_count,omitempty"`
	TotalCount   int64 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
}

func (m *MatchingDetails) Reset()                    { *m = MatchingDetails{} }
func (m *MatchingDetails) String() string            { return proto.CompactTextString(m) }
func (*MatchingDetails) ProtoMessage()               {}
func (*MatchingDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *MatchingDetails) GetMatchedCount() int64 {
	if m != nil {
		return m.MatchedCount
	}
	return 0
}

func (m *MatchingDetails) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Entity)(nil), "api.Entity")
	proto.RegisterType((*EntityType)(nil), "api.EntityType")
	proto.RegisterType((*EntitiesTypeArray)(nil), "api.EntitiesTypeArray")
	proto.RegisterType((*Entities)(nil), "api.Entities")
	proto.RegisterType((*ProviderData)(nil), "api.ProviderData")
	proto.RegisterType((*SelectionStatusChange)(nil), "api.SelectionStatusChange")
	proto.RegisterType((*Generic)(nil), "api.Generic")
	proto.RegisterType((*Competition)(nil), "api.Competition")
	proto.RegisterType((*Competitor)(nil), "api.Competitor")
	proto.RegisterType((*CancelledMarketList)(nil), "api.CancelledMarketList")
	proto.RegisterType((*CancelledMarket)(nil), "api.CancelledMarket")
	proto.RegisterType((*MergedEntity)(nil), "api.MergedEntity")
	proto.RegisterType((*MergedEntityList)(nil), "api.MergedEntityList")
	proto.RegisterType((*UnmatchedCompetition)(nil), "api.UnmatchedCompetition")
	proto.RegisterType((*UnmatchedCompetitionList)(nil), "api.UnmatchedCompetitionList")
	proto.RegisterType((*MatchedCompetition)(nil), "api.MatchedCompetition")
	proto.RegisterType((*MatchedCompetitionList)(nil), "api.MatchedCompetitionList")
	proto.RegisterType((*UnmatchedCompetitor)(nil), "api.UnmatchedCompetitor")
	proto.RegisterType((*UnmatchedCompetitorList)(nil), "api.UnmatchedCompetitorList")
	proto.RegisterType((*MatchedCompetitor)(nil), "api.MatchedCompetitor")
	proto.RegisterType((*MatchedCompetitorList)(nil), "api.MatchedCompetitorList")
	proto.RegisterType((*MatchedEvent)(nil), "api.MatchedEvent")
	proto.RegisterType((*UnmatchedEvent)(nil), "api.UnmatchedEvent")
	proto.RegisterType((*MatchedEventList)(nil), "api.MatchedEventList")
	proto.RegisterType((*UnmatchedEventList)(nil), "api.UnmatchedEventList")
	proto.RegisterType((*EventMedia)(nil), "api.EventMedia")
	proto.RegisterType((*Event)(nil), "api.Event")
	proto.RegisterType((*EventMetadataOld)(nil), "api.EventMetadataOld")
	proto.RegisterType((*EventMetadataOld_Set)(nil), "api.EventMetadataOld.Set")
	proto.RegisterType((*EventMetadataOld_SummaryListing)(nil), "api.EventMetadataOld.SummaryListing")
	proto.RegisterType((*Market)(nil), "api.Market")
	proto.RegisterType((*Selection)(nil), "api.Selection")
	proto.RegisterType((*Outright)(nil), "api.Outright")
	proto.RegisterType((*OutrightSelection)(nil), "api.OutrightSelection")
	proto.RegisterType((*EventMetadata)(nil), "api.EventMetadata")
	proto.RegisterType((*EventMetadata_Set)(nil), "api.EventMetadata.Set")
	proto.RegisterType((*EventMetadata_SummaryListing)(nil), "api.EventMetadata.SummaryListing")
	proto.RegisterType((*SoccerMetadataV2)(nil), "api.SoccerMetadataV2")
	proto.RegisterType((*SoccerMetadata)(nil), "api.SoccerMetadata")
	proto.RegisterType((*TennisMetadata)(nil), "api.TennisMetadata")
	proto.RegisterType((*BasketballMetadata)(nil), "api.BasketballMetadata")
	proto.RegisterType((*IceHockeyMetadata)(nil), "api.IceHockeyMetadata")
	proto.RegisterType((*HandballMetadata)(nil), "api.HandballMetadata")
	proto.RegisterType((*TableTennisMetadata)(nil), "api.TableTennisMetadata")
	proto.RegisterType((*BaseballMetadata)(nil), "api.BaseballMetadata")
	proto.RegisterType((*AmericanFootballMetadata)(nil), "api.AmericanFootballMetadata")
	proto.RegisterType((*SnookerMetadata)(nil), "api.SnookerMetadata")
	proto.RegisterType((*DartsMetadata)(nil), "api.DartsMetadata")
	proto.RegisterType((*FutsalMetadata)(nil), "api.FutsalMetadata")
	proto.RegisterType((*BowlsMetadata)(nil), "api.BowlsMetadata")
	proto.RegisterType((*CricketMetadata)(nil), "api.CricketMetadata")
	proto.RegisterType((*SportsTree)(nil), "api.SportsTree")
	proto.RegisterType((*SportsTreeEntity)(nil), "api.SportsTreeEntity")
	proto.RegisterType((*CompetitionTree)(nil), "api.CompetitionTree")
	proto.RegisterType((*EventList)(nil), "api.EventList")
	proto.RegisterType((*OutrightList)(nil), "api.OutrightList")
	proto.RegisterType((*CompetitionList)(nil), "api.CompetitionList")
	proto.RegisterType((*SportList)(nil), "api.SportList")
	proto.RegisterType((*MultipleCompetitionListMetadata)(nil), "api.MultipleCompetitionListMetadata")
	proto.RegisterType((*MultipleCompetitionLists)(nil), "api.MultipleCompetitionLists")
	proto.RegisterType((*MultipleCompetitionList)(nil), "api.MultipleCompetitionList")
	proto.RegisterType((*GeoRestriction)(nil), "api.GeoRestriction")
	proto.RegisterType((*MatchCountByProvider)(nil), "api.MatchCountByProvider")
	proto.RegisterType((*MatchCountBySport)(nil), "api.MatchCountBySport")
	proto.RegisterType((*MatchCountByCondition)(nil), "api.MatchCountByCondition")
	proto.RegisterType((*MatchingDetails)(nil), "api.MatchingDetails")
	proto.RegisterEnum("api.Provider", Provider_name, Provider_value)
	proto.RegisterEnum("api.SportsEntityTypes", SportsEntityTypes_name, SportsEntityTypes_value)
	proto.RegisterEnum("api.Source", Source_name, Source_value)
	proto.RegisterEnum("api.EventStatus", EventStatus_name, EventStatus_value)
	proto.RegisterEnum("api.SelectionStatus", SelectionStatus_name, SelectionStatus_value)
	proto.RegisterEnum("api.CompetitorType", CompetitorType_name, CompetitorType_value)
	proto.RegisterEnum("api.MatchedCondition", MatchedCondition_name, MatchedCondition_value)
	proto.RegisterEnum("api.EntityTag", EntityTag_name, EntityTag_value)
	proto.RegisterEnum("api.AvailabilityFlags", AvailabilityFlags_name, AvailabilityFlags_value)
	proto.RegisterEnum("api.MarketTag", MarketTag_name, MarketTag_value)
}

func init() { proto.RegisterFile("sportsbook/api/sportsbook.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3c, 0x4d, 0x73, 0x1c, 0x59,
	0x52, 0xae, 0xfe, 0xee, 0xec, 0x0f, 0x95, 0x4a, 0x1f, 0xae, 0xb1, 0xd7, 0x6b, 0xb9, 0xd6, 0x66,
	0x3d, 0x1a, 0x8f, 0x67, 0xc7, 0xb3, 0xcb, 0x7a, 0x66, 0x76, 0x67, 0xa7, 0x25, 0xb5, 0xe5, 0x9e,
	0x91, 0xba, 0x45, 0x75, 0xcb, 0xde, 0xb9, 0x50, 0x94, 0xba, 0xde, 0xc8, 0x15, 0xea, 0xee, 0x6a,
	0xaa, 0x4a, 0xf6, 0x88, 0xbd, 0x4c, 0x70, 0x61, 0x2e, 0x10, 0x44, 0xc0, 0x1e, 0x88, 0x20, 0x38,
	0x71, 0x80, 0x1b, 0x67, 0x22, 0x38, 0x71, 0xe0, 0x4c, 0x70, 0xe0, 0x04, 0xc1, 0x1f, 0x20, 0x62,
	0x21, 0xf8, 0x01, 0x44, 0xe6, 0x7b, 0x55, 0xf5, 0xaa, 0xba, 0x5b, 0x6a, 0xed, 0x42, 0x6c, 0x04,
	0xc1, 0x49, 0xfd, 0x32, 0xf3, 0x7d, 0xe4, 0xcb, 0x8f, 0x97, 0x2f, 0xb3, 0x9e, 0xe0, 0x6e, 0x30,
	0xf5, 0xfc, 0x30, 0x38, 0xf1, 0xbc, 0xb3, 0xf7, 0xec, 0xa9, 0xfb, 0x5e, 0xd2, 0x7c, 0x3c, 0xf5,
	0xbd, 0xd0, 0xd3, 0xf2, 0xf6, 0xd4, 0x35, 0xf6, 0xa0, 0xd4, 0x9e, 0x84, 0x6e, 0x78, 0xa1, 0x6d,
	0x43, 0x21, 0xbc, 0x98, 0x32, 0x5d, 0xd9, 0x52, 0x1e, 0x36, 0x9f, 0x6c, 0x3e, 0xb6, 0xa7, 0xee,
	0xe3, 0x3e, 0xf5, 0xe1, 0x04, 0x83, 0x8b, 0x29, 0x0b, 0x4c, 0xa2, 0xd1, 0x9a, 0x90, 0x73, 0x1d,
	0x3d, 0xb7, 0xa5, 0x3c, 0x6c, 0x98, 0x39, 0xd7, 0x31, 0x9e, 0x02, 0x24, 0x44, 0xd7, 0x19, 0xc9,
	0xf8, 0x09, 0xac, 0x12, 0xd0, 0x65, 0x01, 0x82, 0x5b, 0xbe, 0x6f, 0xd3, 0x52, 0x1c, 0x3b, 0xb4,
	0x75, 0x65, 0x2b, 0x7f, 0xd9, 0x00, 0x48, 0x63, 0xfc, 0x85, 0x02, 0x95, 0x68, 0x04, 0x6d, 0x13,
	0x4a, 0xec, 0x35, 0x9b, 0x84, 0x01, 0x75, 0x6d, 0x98, 0xa2, 0xa5, 0x7d, 0x0b, 0xaa, 0xde, 0x79,
	0xe8, 0xbb, 0xa7, 0xaf, 0xc2, 0x40, 0xcf, 0x11, 0x2a, 0x01, 0x68, 0x5b, 0x50, 0x1b, 0x7a, 0xe3,
	0x29, 0x0b, 0xdd, 0xd0, 0xf3, 0x03, 0x3d, 0x4f, 0x78, 0x19, 0xa4, 0x19, 0x50, 0x8f, 0x9a, 0xae,
	0x37, 0x09, 0xf4, 0x02, 0x91, 0xa4, 0x60, 0x38, 0x37, 0xdf, 0x62, 0xbd, 0xc8, 0xe7, 0xe6, 0x2d,
	0xe3, 0xdf, 0x15, 0xa8, 0x1f, 0xf9, 0xde, 0x6b, 0xd7, 0x61, 0xfe, 0x9e, 0x1d, 0xda, 0x9a, 0x06,
	0x85, 0x33, 0x76, 0xc1, 0x97, 0x58, 0x35, 0xe9, 0xb7, 0xf6, 0x36, 0x54, 0xa6, 0x82, 0x46, 0x2f,
	0xd1, 0xb6, 0x35, 0x88, 0xeb, 0xa8, 0xa3, 0x19, 0xa3, 0xb5, 0xef, 0x40, 0x29, 0xf0, 0xce, 0xfd,
	0x21, 0xd3, 0xcb, 0x44, 0x58, 0xe3, 0xdb, 0x43, 0x20, 0x53, 0xa0, 0xb4, 0x7b, 0x50, 0x8f, 0x3a,
	0x58, 0xae, 0x13, 0xe8, 0x15, 0x9a, 0xab, 0x16, 0xc1, 0x3a, 0x4e, 0x20, 0x64, 0x58, 0xd8, 0x52,
	0x1e, 0x56, 0x51, 0x86, 0xda, 0x4d, 0x28, 0x9f, 0x4f, 0xdc, 0xdf, 0xb5, 0x5c, 0x47, 0x2f, 0x12,
	0xb0, 0x84, 0xcd, 0x8e, 0xa3, 0xbd, 0x05, 0x15, 0x62, 0x05, 0x31, 0x79, 0x12, 0x79, 0x99, 0xda,
	0x1d, 0x07, 0x59, 0x99, 0xd8, 0x63, 0x46, 0x9a, 0x50, 0x35, 0xe9, 0xb7, 0xf1, 0x75, 0x1e, 0x36,
	0xfa, 0x6c, 0xc4, 0x86, 0xb8, 0x2d, 0xfd, 0xd0, 0x0e, 0xcf, 0x83, 0xdd, 0x57, 0xf6, 0xe4, 0x94,
	0xa1, 0x14, 0x42, 0x77, 0xcc, 0x82, 0xd0, 0x1e, 0x4f, 0x49, 0x39, 0xf2, 0x66, 0x02, 0xc0, 0x69,
	0x48, 0x5a, 0x56, 0xac, 0x59, 0x65, 0x6a, 0x77, 0x1c, 0xed, 0x11, 0x94, 0x02, 0x1a, 0x88, 0xe6,
	0x6f, 0x3e, 0x59, 0xe7, 0x2c, 0xa7, 0x27, 0x31, 0x05, 0x4d, 0x8a, 0xf7, 0x33, 0x76, 0x21, 0x58,
	0x8c, 0x79, 0xff, 0x9c, 0x5d, 0xa0, 0xac, 0x7c, 0x66, 0x07, 0xde, 0x24, 0x62, 0x95, 0xb7, 0xb4,
	0xdb, 0x50, 0xe5, 0xbf, 0x70, 0x11, 0x25, 0x5a, 0x44, 0x85, 0x03, 0x3a, 0x8e, 0xf6, 0x5b, 0xd0,
	0x18, 0xdb, 0xfe, 0x19, 0x0b, 0x2d, 0xb1, 0x98, 0xf2, 0x56, 0xfe, 0x61, 0xed, 0xc9, 0xa3, 0x79,
	0x8b, 0xe1, 0x1c, 0x3f, 0x3e, 0x24, 0x7a, 0x0e, 0x6a, 0x4f, 0x42, 0xff, 0xc2, 0xac, 0x8f, 0x25,
	0xd0, 0xad, 0x63, 0x58, 0x9d, 0x21, 0xd1, 0x54, 0xc8, 0xe3, 0xb2, 0x15, 0x9a, 0x1e, 0x7f, 0x6a,
	0xdb, 0x50, 0x7c, 0x6d, 0x8f, 0xce, 0xf9, 0x3e, 0x2f, 0x62, 0x9f, 0x93, 0x7c, 0x94, 0x7b, 0xaa,
	0x18, 0x7d, 0x28, 0xef, 0xb3, 0x09, 0xf3, 0xdd, 0xa1, 0x90, 0xb2, 0x12, 0x59, 0xea, 0x3c, 0x89,
	0x21, 0x8c, 0xec, 0x35, 0xcf, 0x61, 0x64, 0xe1, 0x62, 0x11, 0x7c, 0xef, 0xf0, 0xa7, 0xf1, 0x0b,
	0x05, 0x6a, 0xbb, 0x89, 0xc2, 0x2f, 0x35, 0xb2, 0x18, 0xa5, 0x12, 0x8f, 0xa2, 0xdd, 0x87, 0xd2,
	0xa9, 0xef, 0x9d, 0x4f, 0xb9, 0x99, 0xd5, 0x9e, 0xd4, 0x89, 0x17, 0xb1, 0x5a, 0x53, 0xe0, 0x34,
	0x03, 0x8a, 0xa4, 0x62, 0x24, 0x9e, 0x2c, 0x11, 0x47, 0x69, 0xb7, 0xd0, 0x64, 0x5c, 0xcf, 0x77,
	0xc3, 0x0b, 0xb2, 0x84, 0x86, 0x19, 0xb7, 0xb5, 0x75, 0x28, 0x9e, 0xfa, 0xb6, 0xc3, 0x84, 0x0c,
	0x79, 0x43, 0x7b, 0x0f, 0xaa, 0x91, 0x12, 0x04, 0x7a, 0x95, 0xa6, 0x5f, 0x4d, 0x59, 0x19, 0x9a,
	0xa7, 0x99, 0xd0, 0x18, 0x7f, 0x9a, 0x03, 0xd8, 0x8d, 0xdd, 0xc0, 0x75, 0x38, 0x2e, 0x26, 0x1c,
	0xcb, 0xbb, 0xdb, 0x10, 0xbb, 0xfb, 0x36, 0x94, 0xa7, 0x23, 0xfb, 0x02, 0xd7, 0x51, 0xa0, 0x75,
	0xac, 0xd0, 0x3a, 0x92, 0xb9, 0xcc, 0x08, 0x9f, 0x5e, 0x74, 0xe9, 0xea, 0x45, 0x27, 0x7b, 0x57,
	0x5e, 0xbc, 0x77, 0x3f, 0x82, 0x95, 0xc4, 0xbd, 0x59, 0xb4, 0xbc, 0x0a, 0xa9, 0xd6, 0x5a, 0x66,
	0x1d, 0xe8, 0x69, 0xcd, 0xe6, 0x30, 0xd5, 0x36, 0xda, 0xb0, 0xb6, 0x6b, 0x4f, 0x86, 0x6c, 0x34,
	0x62, 0x0e, 0x57, 0xdf, 0x03, 0x37, 0x08, 0xb5, 0xc7, 0x50, 0xe6, 0xca, 0xcd, 0x5d, 0x5b, 0x4d,
	0xe8, 0x69, 0x86, 0xd4, 0x8c, 0x88, 0x8c, 0x7f, 0x50, 0x60, 0x25, 0x83, 0x5c, 0x6a, 0x8b, 0x65,
	0x47, 0x91, 0x4f, 0x3b, 0x8a, 0x3b, 0x00, 0x1c, 0x45, 0x9d, 0xb8, 0xf2, 0x56, 0x09, 0xd2, 0xc5,
	0x9e, 0xf7, 0xa0, 0x3e, 0x8c, 0x26, 0xb4, 0x6c, 0xae, 0x5d, 0x79, 0xb3, 0x16, 0xc3, 0x5a, 0x21,
	0x7a, 0x80, 0x20, 0xb4, 0xfd, 0x30, 0x40, 0x7c, 0x89, 0xf0, 0x15, 0x0e, 0x68, 0x85, 0x92, 0xdb,
	0x28, 0xcb, 0x6e, 0xc3, 0x18, 0x40, 0xfd, 0x90, 0xf9, 0xa7, 0xcc, 0x11, 0x47, 0xe9, 0x1d, 0x00,
	0xee, 0x87, 0xc9, 0xf7, 0xf2, 0xa3, 0xa8, 0xca, 0x21, 0xe8, 0x79, 0x1f, 0x40, 0xd3, 0x61, 0x41,
	0xe8, 0x4e, 0x6c, 0x34, 0xa4, 0xc4, 0xdf, 0x35, 0x24, 0x68, 0xc7, 0x31, 0x7e, 0x0f, 0x54, 0x79,
	0x54, 0xda, 0xe3, 0x1f, 0x42, 0x8d, 0x51, 0xcb, 0x5a, 0xe2, 0x84, 0x05, 0x96, 0x9c, 0xc9, 0xef,
	0x42, 0x85, 0x89, 0x53, 0x92, 0x0e, 0xc0, 0x48, 0x8b, 0xe4, 0x19, 0xcc, 0x98, 0xc4, 0xf8, 0x4f,
	0x05, 0xd6, 0x8f, 0x27, 0x63, 0x3b, 0x1c, 0xbe, 0x62, 0x8e, 0x6c, 0xf5, 0xf2, 0x41, 0xa5, 0x5c,
	0x7e, 0x50, 0x5d, 0x62, 0x1e, 0xf9, 0xc4, 0x3c, 0xe4, 0xd3, 0xa5, 0x90, 0x3e, 0x5d, 0xee, 0x42,
	0x6d, 0x68, 0x87, 0xec, 0xd4, 0xf3, 0x2f, 0xa2, 0x53, 0xa9, 0x61, 0x42, 0x04, 0xe2, 0xe2, 0x1e,
	0xfa, 0xcc, 0x0e, 0xb9, 0x34, 0xb9, 0xb4, 0xaa, 0x02, 0xd2, 0x42, 0x85, 0x5c, 0xb3, 0x87, 0xa1,
	0xfb, 0x9a, 0x59, 0x3c, 0x0c, 0xb0, 0x86, 0xde, 0xf9, 0x24, 0x14, 0xce, 0x62, 0x95, 0xa3, 0xda,
	0x84, 0xd9, 0x45, 0x84, 0x31, 0x02, 0x7d, 0x1e, 0xcf, 0xb4, 0xf1, 0x47, 0xb0, 0x79, 0x1e, 0xe1,
	0xac, 0x54, 0x2c, 0xc0, 0xfd, 0xd8, 0x5b, 0xb4, 0x0b, 0xf3, 0xba, 0x9b, 0x1b, 0xe7, 0x73, 0xa0,
	0x81, 0xf1, 0x47, 0x39, 0xd0, 0x0e, 0x7f, 0xa5, 0x0d, 0xce, 0x1e, 0x74, 0xb9, 0xd9, 0x83, 0xee,
	0x3b, 0xd0, 0x88, 0x49, 0x48, 0x18, 0x7c, 0xe7, 0xe3, 0x7e, 0x64, 0x16, 0x0f, 0xa0, 0x29, 0x71,
	0x94, 0x08, 0xa2, 0x21, 0x41, 0x3b, 0x8e, 0xf6, 0x36, 0xa8, 0x32, 0x19, 0x0d, 0xc7, 0xfd, 0xdc,
	0x8a, 0x04, 0xa7, 0x11, 0x3f, 0x80, 0xea, 0xd0, 0x9b, 0x38, 0x04, 0x10, 0xf1, 0xcc, 0x06, 0x57,
	0xb7, 0x88, 0x61, 0x81, 0x34, 0x13, 0x3a, 0xc3, 0x81, 0xcd, 0xc3, 0xf9, 0x9b, 0xff, 0x19, 0xac,
	0x5f, 0xb2, 0xf5, 0x37, 0xd3, 0x23, 0x27, 0x1b, 0xbf, 0x36, 0x6f, 0xdb, 0xbf, 0x51, 0x60, 0x6d,
	0x46, 0x4c, 0x9e, 0xff, 0x6b, 0xd8, 0x77, 0xe3, 0x15, 0xdc, 0x9c, 0xb3, 0x12, 0xe2, 0xf8, 0x10,
	0x36, 0x66, 0xd5, 0x0d, 0x83, 0x53, 0xee, 0x59, 0xf5, 0xf9, 0xda, 0xe6, 0xf9, 0xe6, 0xfa, 0xf9,
	0x2c, 0x30, 0x30, 0xfe, 0x32, 0x87, 0x81, 0xc6, 0xaf, 0x9f, 0x65, 0xed, 0xbb, 0xb0, 0x92, 0x56,
	0xb5, 0x28, 0x96, 0x6e, 0xa6, 0x74, 0x2d, 0xc0, 0xd1, 0xa4, 0x13, 0x2a, 0xb6, 0xfe, 0x7a, 0x02,
	0xcc, 0x44, 0xa6, 0xa5, 0xb4, 0xef, 0x48, 0x69, 0x60, 0x79, 0x49, 0x0d, 0xfc, 0x1d, 0xd8, 0x38,
	0x9c, 0x2b, 0x8e, 0x7d, 0x58, 0x5b, 0x2c, 0x8c, 0xcd, 0x79, 0xfa, 0xe7, 0xf9, 0xa6, 0x36, 0x47,
	0x10, 0x7f, 0x95, 0x83, 0xba, 0xa0, 0x24, 0xcf, 0xf3, 0x3f, 0x2e, 0x83, 0xe8, 0x6e, 0x90, 0x5f,
	0x7c, 0x37, 0xb8, 0xc4, 0xe3, 0xca, 0x47, 0x6b, 0xf1, 0xb2, 0xa3, 0xb5, 0x94, 0x3d, 0x5a, 0x53,
	0xe7, 0x66, 0x39, 0x73, 0x6e, 0xa6, 0x84, 0x51, 0x59, 0x52, 0x18, 0xff, 0x9c, 0x87, 0x66, 0xac,
	0xe1, 0x7c, 0xb3, 0xb2, 0xd1, 0x81, 0xbc, 0x79, 0xb9, 0xab, 0x6e, 0x4d, 0x4b, 0x68, 0xe7, 0x12,
	0x37, 0x87, 0xa7, 0xa0, 0xc7, 0x24, 0xb2, 0x26, 0x27, 0x41, 0xdf, 0x66, 0x84, 0x97, 0xdc, 0x0e,
	0xf6, 0x6c, 0xc1, 0x9d, 0xb8, 0xe7, 0x2b, 0x6f, 0xcc, 0x24, 0x4d, 0xb2, 0xe8, 0x3e, 0x58, 0xa2,
	0x3b, 0xda, 0xad, 0x88, 0xe8, 0xb9, 0x37, 0x66, 0x89, 0xea, 0x7c, 0x8e, 0xb7, 0x44, 0x79, 0x08,
	0xfb, 0x8d, 0x7d, 0x31, 0x33, 0x44, 0x39, 0x3d, 0x44, 0xeb, 0x8d, 0x7d, 0x91, 0x19, 0xe2, 0x01,
	0x34, 0xbf, 0xb4, 0xdd, 0xd1, 0xb9, 0xcf, 0x2c, 0x11, 0xca, 0xf0, 0xe0, 0xbc, 0x21, 0xa0, 0x26,
	0xbf, 0x08, 0x25, 0x8a, 0x54, 0x5d, 0x4e, 0x91, 0x20, 0xad, 0x48, 0x29, 0x75, 0xa8, 0xa5, 0xd5,
	0xc1, 0x38, 0x00, 0x55, 0xb6, 0x01, 0xb2, 0xb0, 0xa7, 0xd0, 0x8c, 0x2c, 0x4c, 0xba, 0xc1, 0xc7,
	0x51, 0x8a, 0x44, 0x6e, 0x36, 0x64, 0x9d, 0x08, 0x8c, 0x01, 0x68, 0x69, 0x35, 0xa1, 0xf1, 0x3e,
	0x01, 0x35, 0x71, 0xa0, 0xa9, 0x11, 0xd7, 0xd2, 0xbe, 0x93, 0x8f, 0xb9, 0x72, 0x3e, 0x49, 0x8f,
	0xfa, 0x39, 0x00, 0xfd, 0x3a, 0x64, 0x8e, 0x6b, 0xe3, 0x7d, 0xc2, 0x1d, 0xdb, 0xa7, 0x3c, 0xe0,
	0xaa, 0x9a, 0xbc, 0x81, 0xce, 0x0c, 0xb7, 0xd9, 0xb3, 0xc2, 0x57, 0xe7, 0xe3, 0x93, 0x89, 0xed,
	0x8e, 0x84, 0x4d, 0x36, 0x09, 0x3c, 0x88, 0xa0, 0xc6, 0x1f, 0x96, 0xa1, 0xc8, 0x35, 0xf8, 0xf2,
	0x2b, 0x70, 0x26, 0xad, 0x12, 0x47, 0x50, 0x79, 0x29, 0x82, 0x4a, 0xed, 0x6c, 0x21, 0x63, 0x68,
	0xcb, 0xdc, 0x9b, 0x9e, 0x24, 0xd9, 0x8e, 0xe8, 0x74, 0xae, 0x3d, 0x51, 0x53, 0x71, 0x3f, 0x5a,
	0xa2, 0x4c, 0xa4, 0xbd, 0x9f, 0xce, 0x90, 0x94, 0xe7, 0xdf, 0x59, 0x52, 0x29, 0x93, 0x7b, 0x50,
	0xf7, 0xa6, 0x6c, 0x62, 0x45, 0x57, 0x82, 0x0a, 0x71, 0x55, 0x43, 0x18, 0x8f, 0xf5, 0x51, 0x17,
	0xe3, 0x0b, 0x03, 0xbf, 0x8d, 0xd5, 0x84, 0xb0, 0x53, 0xf7, 0x04, 0xed, 0x61, 0x7c, 0xfb, 0x07,
	0xd2, 0x45, 0xbe, 0x56, 0xda, 0xcf, 0xcc, 0xcd, 0xff, 0x29, 0x34, 0xe3, 0x7b, 0x90, 0x45, 0x19,
	0xa4, 0x8d, 0x45, 0x17, 0xa6, 0xd8, 0x1b, 0x04, 0x94, 0x93, 0x79, 0x17, 0x34, 0x77, 0x12, 0x32,
	0x7f, 0x62, 0x8f, 0xac, 0x44, 0x40, 0x0d, 0xda, 0xde, 0xd5, 0x08, 0x33, 0x88, 0x05, 0xb5, 0x0e,
	0xc5, 0x60, 0xe8, 0xf9, 0x4c, 0x6f, 0xf2, 0xfb, 0x25, 0x35, 0x90, 0x65, 0x32, 0xec, 0xa9, 0x8b,
	0x9a, 0xe4, 0xeb, 0x2b, 0xdc, 0x7d, 0x20, 0xec, 0x88, 0x83, 0x90, 0x84, 0x0c, 0x37, 0x22, 0x51,
	0x39, 0x09, 0xc2, 0x22, 0x92, 0x77, 0x41, 0x9b, 0xda, 0xfe, 0xc8, 0xbe, 0xb0, 0x7c, 0x16, 0x84,
	0xbe, 0x4b, 0x77, 0x7c, 0x5d, 0xe3, 0x41, 0x2b, 0xc7, 0x98, 0x09, 0x42, 0x7b, 0x0c, 0x95, 0x31,
	0x0b, 0x6d, 0xe2, 0x76, 0x93, 0x64, 0xa9, 0x25, 0xfb, 0x73, 0x28, 0x30, 0x66, 0x4c, 0xa3, 0x3d,
	0x80, 0xe2, 0x18, 0x75, 0x5a, 0xbf, 0x49, 0xc4, 0x2b, 0x32, 0xb1, 0xe3, 0xda, 0x26, 0xc7, 0x6a,
	0x06, 0xd4, 0xed, 0xd7, 0xb6, 0x3b, 0xb2, 0x4f, 0xdc, 0x11, 0xde, 0xb0, 0x75, 0x7e, 0xfc, 0xca,
	0x30, 0x8c, 0xcf, 0xbf, 0x74, 0x27, 0x6e, 0xf0, 0x8a, 0x91, 0x32, 0xbe, 0x45, 0xbb, 0x05, 0x11,
	0xa8, 0x15, 0x22, 0x81, 0x94, 0x85, 0xd2, 0xeb, 0xc4, 0x2c, 0x24, 0x49, 0x28, 0xed, 0x29, 0xd4,
	0xa3, 0x85, 0x59, 0xde, 0xc8, 0x21, 0x4f, 0x51, 0x13, 0x67, 0x43, 0x8a, 0x81, 0xde, 0xc8, 0x31,
	0x6b, 0xe3, 0xa4, 0x81, 0x7e, 0x6c, 0x84, 0x91, 0xbd, 0x58, 0xd0, 0x88, 0xe9, 0xab, 0x5b, 0xca,
	0xc3, 0x8a, 0xd9, 0x40, 0x68, 0x2b, 0x02, 0x26, 0x86, 0xbb, 0x26, 0x19, 0xae, 0xf1, 0x77, 0x6b,
	0xa0, 0x66, 0x87, 0xbf, 0xc2, 0x34, 0xe3, 0xe3, 0x0f, 0x41, 0xc2, 0xcc, 0xf9, 0xf1, 0x87, 0x5a,
	0x81, 0x57, 0x8d, 0x04, 0x6d, 0xb1, 0xaf, 0x42, 0x36, 0x71, 0x98, 0x23, 0x0c, 0x77, 0x35, 0xa6,
	0x6b, 0x0b, 0x04, 0xea, 0x01, 0xa7, 0x17, 0x9a, 0x2d, 0x4e, 0x1a, 0x96, 0x28, 0x35, 0xce, 0x78,
	0x92, 0xe4, 0x9a, 0xf8, 0xd9, 0x52, 0x3d, 0x89, 0x52, 0x45, 0x89, 0x0a, 0xe2, 0xb1, 0x51, 0x8c,
	0x54, 0xf0, 0x0e, 0xc0, 0xa9, 0x3d, 0x66, 0x16, 0x47, 0x95, 0x09, 0x55, 0x45, 0x48, 0x9f, 0xd0,
	0x18, 0x55, 0x8d, 0x98, 0xed, 0x33, 0x47, 0x50, 0x54, 0x88, 0xa2, 0x2e, 0x80, 0x9c, 0xe8, 0x29,
	0x40, 0x80, 0x13, 0x63, 0x23, 0xb2, 0xcc, 0xb7, 0xe6, 0x8a, 0xe4, 0x71, 0x9f, 0x85, 0x66, 0x35,
	0x60, 0x21, 0x75, 0x24, 0x9b, 0x1f, 0x7a, 0xfe, 0x04, 0xad, 0x0f, 0x35, 0x9a, 0xec, 0xb5, 0x88,
	0x6e, 0x81, 0x60, 0x78, 0x1a, 0xc9, 0x24, 0x68, 0x17, 0x24, 0xf1, 0x84, 0x04, 0xcf, 0x3c, 0xed,
	0x3e, 0x34, 0x71, 0x81, 0x43, 0xdb, 0x77, 0xc4, 0x38, 0x75, 0x22, 0xaa, 0xfb, 0xcc, 0xd9, 0x45,
	0x20, 0x0d, 0x94, 0xa2, 0xa2, 0xa1, 0x1a, 0x69, 0x2a, 0x1a, 0x6b, 0x1b, 0x56, 0x2f, 0xd8, 0x68,
	0xe4, 0xbd, 0x91, 0x87, 0x6b, 0x12, 0xe1, 0x0a, 0x47, 0x24, 0x23, 0x66, 0x69, 0x69, 0xd0, 0x95,
	0x19, 0x5a, 0x1a, 0xf7, 0x7d, 0xd8, 0x10, 0xb4, 0x99, 0xa5, 0xaa, 0x44, 0xaf, 0x71, 0xa4, 0x29,
	0x2f, 0x78, 0x5e, 0x17, 0x9a, 0x62, 0x75, 0x5e, 0x17, 0x9a, 0x65, 0x13, 0x4a, 0x01, 0xf3, 0x5f,
	0x33, 0x9f, 0xcc, 0xbf, 0x68, 0x8a, 0x96, 0x76, 0x0b, 0x2a, 0xa1, 0xcb, 0x4e, 0x7c, 0x66, 0x9f,
	0x91, 0x62, 0x57, 0xcc, 0xb8, 0xcd, 0x45, 0xec, 0x0d, 0xcf, 0xac, 0x20, 0xf4, 0xa6, 0x53, 0xe6,
	0xe8, 0xeb, 0x7c, 0x5b, 0x08, 0xd8, 0xe7, 0x30, 0xb4, 0x1e, 0x9f, 0x8d, 0x6d, 0x77, 0xe2, 0x4e,
	0x4e, 0xb9, 0x46, 0x6f, 0xf0, 0x28, 0x20, 0x86, 0x92, 0x56, 0xff, 0x10, 0xf4, 0x34, 0x99, 0xe5,
	0x4e, 0xac, 0x29, 0xf3, 0x5d, 0xcf, 0x21, 0x5f, 0x53, 0x35, 0x37, 0x52, 0x1d, 0x3a, 0x93, 0x23,
	0x42, 0xa2, 0x94, 0x83, 0xf3, 0x60, 0xca, 0x26, 0x0e, 0x67, 0xf1, 0x26, 0x97, 0xb2, 0x80, 0x11,
	0x6f, 0x12, 0x09, 0x6d, 0x9c, 0x9e, 0x22, 0xa1, 0x1d, 0xbb, 0x05, 0x15, 0xf6, 0xd5, 0x94, 0x39,
	0x6e, 0xc8, 0xc8, 0xb9, 0x14, 0xcd, 0xb8, 0x8d, 0xae, 0x85, 0x1c, 0xe9, 0x89, 0x1d, 0x86, 0xcc,
	0xd7, 0x6f, 0x11, 0x1a, 0x10, 0xb4, 0x43, 0x10, 0x24, 0x20, 0x67, 0x2c, 0x08, 0x6e, 0x73, 0x02,
	0x04, 0x09, 0x82, 0x75, 0x28, 0x9e, 0xd8, 0xa3, 0x51, 0xa0, 0x7f, 0x8b, 0x50, 0xbc, 0xc1, 0xa1,
	0x01, 0x0b, 0xf4, 0x3b, 0xdc, 0x61, 0x50, 0x43, 0xd3, 0xa1, 0x8c, 0x1e, 0xf7, 0x8c, 0x05, 0xfa,
	0xb7, 0x89, 0x3a, 0x6a, 0xe2, 0x11, 0xed, 0x9d, 0x87, 0x81, 0x7e, 0x97, 0xc0, 0xf4, 0x5b, 0xfb,
	0x36, 0xc0, 0xd4, 0x0b, 0x02, 0x16, 0x04, 0xe8, 0xb9, 0xb7, 0xf8, 0xcc, 0x09, 0x84, 0x32, 0x97,
	0x5e, 0xc0, 0x8f, 0xdf, 0x7b, 0x9c, 0xaf, 0xa8, 0xad, 0xa9, 0x90, 0x0f, 0xfd, 0x0b, 0xdd, 0x20,
	0x30, 0xfe, 0xc4, 0x15, 0x5d, 0xa0, 0x46, 0xe8, 0xdf, 0xe1, 0xeb, 0xa4, 0x46, 0x5a, 0x82, 0x3e,
	0x73, 0x02, 0xfd, 0x3e, 0xa1, 0x13, 0x09, 0x9a, 0xcc, 0x21, 0x76, 0x5e, 0xbb, 0x81, 0x1b, 0xea,
	0x0f, 0x78, 0x67, 0x6a, 0x60, 0x0c, 0x31, 0x62, 0xa7, 0xc2, 0x05, 0xfc, 0x06, 0x5f, 0xc1, 0x88,
	0x9d, 0x72, 0xf3, 0x5f, 0x87, 0x62, 0xf8, 0xca, 0xf7, 0xde, 0xe8, 0xdf, 0xe5, 0x5d, 0xa8, 0xa1,
	0x7d, 0x0f, 0xd6, 0x93, 0xf9, 0x4e, 0xbc, 0x37, 0x23, 0xa1, 0xef, 0x0f, 0xb9, 0xf2, 0xc6, 0xb8,
	0x1d, 0x44, 0x91, 0xf4, 0xe6, 0xf4, 0x20, 0x5d, 0x78, 0x7b, 0x5e, 0x0f, 0x52, 0x89, 0xbb, 0x50,
	0x1b, 0x9e, 0xfb, 0x3e, 0xba, 0x45, 0x36, 0x71, 0xf4, 0x6d, 0xbe, 0x71, 0x02, 0xd4, 0x9e, 0x38,
	0xb8, 0x71, 0x0e, 0x43, 0x07, 0xef, 0x5f, 0xe8, 0xef, 0xf0, 0x65, 0x47, 0x6d, 0x0c, 0xc6, 0x1c,
	0x37, 0x18, 0xbb, 0x41, 0x60, 0x47, 0x6b, 0x7b, 0x44, 0x24, 0xcd, 0x04, 0x4c, 0xeb, 0x4a, 0x13,
	0xd2, 0x92, 0xde, 0xcd, 0x12, 0xd2, 0x72, 0x50, 0xb4, 0x68, 0x7b, 0x8f, 0x85, 0x68, 0xd1, 0xf2,
	0x74, 0x28, 0xbb, 0x13, 0x5c, 0x75, 0xa0, 0xbf, 0xc7, 0x15, 0x41, 0x34, 0xd1, 0x7b, 0x4c, 0xd9,
	0xc4, 0x1e, 0x85, 0x17, 0x96, 0x7f, 0x3e, 0x11, 0x03, 0x7f, 0x8f, 0x7b, 0x0f, 0x81, 0x30, 0xcf,
	0x27, 0xb1, 0x57, 0x4a, 0xd1, 0xd2, 0x6a, 0xdf, 0x9f, 0xa1, 0xa5, 0xe5, 0xde, 0x86, 0x2a, 0xe9,
	0x31, 0x12, 0xea, 0x4f, 0x39, 0xd3, 0x08, 0x40, 0x02, 0x44, 0x92, 0x15, 0x10, 0xf2, 0x43, 0x8e,
	0x44, 0x00, 0x21, 0xa3, 0x70, 0xe4, 0x8d, 0x3b, 0xa4, 0x18, 0xeb, 0x23, 0x6e, 0x61, 0x08, 0x7b,
	0xc9, 0x41, 0x71, 0x38, 0x12, 0x91, 0x7c, 0xcc, 0x49, 0x10, 0x16, 0x91, 0xdc, 0x86, 0x6a, 0xe8,
	0x05, 0x01, 0xf7, 0x12, 0x3f, 0xe2, 0xf1, 0x26, 0x02, 0xc8, 0x41, 0x3c, 0x02, 0x8d, 0x62, 0x4f,
	0xb2, 0x32, 0x72, 0x12, 0xcc, 0x1e, 0xeb, 0x3f, 0xa6, 0x58, 0x41, 0x25, 0xcc, 0x0e, 0x47, 0x0c,
	0x98, 0x3d, 0x46, 0x8d, 0x88, 0xe4, 0x9b, 0xa2, 0xff, 0x84, 0xe8, 0x35, 0x81, 0x93, 0x7b, 0xdc,
	0x85, 0x1a, 0x4d, 0xfe, 0xc6, 0x9d, 0x4c, 0x98, 0xaf, 0xff, 0x84, 0x67, 0x00, 0x11, 0xf4, 0x92,
	0x20, 0xda, 0x2e, 0x00, 0x69, 0xb1, 0x35, 0x72, 0x83, 0x50, 0x7f, 0x42, 0x67, 0xd5, 0xfd, 0x05,
	0x67, 0xd5, 0xf9, 0x78, 0x6c, 0xfb, 0x94, 0x46, 0x45, 0xeb, 0xa8, 0x52, 0x3f, 0xba, 0x2b, 0xb4,
	0xa0, 0x8a, 0xee, 0x98, 0x8f, 0xf1, 0xc1, 0x35, 0xc6, 0xa8, 0x60, 0x37, 0x1a, 0xe2, 0x01, 0x34,
	0x4f, 0x58, 0x88, 0x2e, 0x37, 0xba, 0x56, 0x7d, 0x9f, 0x3b, 0x54, 0x01, 0x15, 0xd7, 0x2a, 0x7e,
	0xa6, 0x13, 0x99, 0xeb, 0xe8, 0x3f, 0x20, 0x76, 0xaa, 0x02, 0xd2, 0x71, 0x6e, 0xdd, 0x86, 0x7c,
	0x9f, 0x85, 0xc9, 0xd1, 0xae, 0x48, 0x47, 0xfb, 0xad, 0x6f, 0x72, 0xd0, 0x4c, 0xcf, 0x8f, 0x21,
	0x4b, 0x9c, 0xbb, 0x16, 0x57, 0x93, 0x04, 0x40, 0xd1, 0x17, 0x15, 0x11, 0x2c, 0x29, 0x0d, 0x0b,
	0x1c, 0x14, 0xdd, 0xd9, 0x05, 0x41, 0x9c, 0x49, 0xaf, 0x70, 0x00, 0xbf, 0xc1, 0xa1, 0x70, 0xe4,
	0x4c, 0x7a, 0x05, 0x01, 0xd4, 0xf3, 0x26, 0x94, 0x09, 0x19, 0xa7, 0x09, 0x4a, 0xd8, 0xe4, 0x05,
	0x41, 0x52, 0x94, 0x92, 0x28, 0x25, 0xa1, 0x92, 0xdc, 0x01, 0x72, 0xbb, 0x71, 0x4c, 0x82, 0x2a,
	0x46, 0x3a, 0xdd, 0x8f, 0x42, 0x16, 0xd2, 0xc1, 0x28, 0x20, 0x21, 0x34, 0x42, 0x38, 0x3a, 0x2a,
	0x9f, 0x54, 0x93, 0xe2, 0x94, 0xf1, 0x8f, 0x39, 0x28, 0x5d, 0xa3, 0x60, 0xa0, 0x43, 0x79, 0xea,
	0xbb, 0xb8, 0x71, 0xc4, 0x65, 0xc5, 0x8c, 0x9a, 0x78, 0xc0, 0x8a, 0x6a, 0x54, 0x81, 0x6e, 0xce,
	0x51, 0xfd, 0x29, 0x9a, 0xb4, 0x28, 0x55, 0xc4, 0x1e, 0x63, 0x58, 0x24, 0x4a, 0x6e, 0x51, 0x25,
	0xa6, 0x99, 0xae, 0xc4, 0x99, 0x12, 0x05, 0x5d, 0xd4, 0xc6, 0xaf, 0x2d, 0x9f, 0x9d, 0xb2, 0xaf,
	0x44, 0xbd, 0xa0, 0x12, 0x8c, 0x5f, 0x9b, 0xd8, 0xa6, 0x0a, 0xc1, 0xf8, 0xb5, 0xf5, 0xa5, 0xcb,
	0x46, 0x4e, 0x20, 0xae, 0xe0, 0x48, 0xfe, 0x8c, 0x00, 0xda, 0x3b, 0x20, 0xd2, 0xd3, 0x96, 0x34,
	0x65, 0x95, 0x9b, 0x15, 0x47, 0xf4, 0x93, 0x89, 0xe4, 0x42, 0x18, 0x64, 0x0a, 0x61, 0xc8, 0x88,
	0x7d, 0x1a, 0x50, 0x6c, 0x54, 0x30, 0xe9, 0x77, 0x52, 0x1c, 0xab, 0x49, 0xc5, 0x31, 0xe3, 0x17,
	0x79, 0xa8, 0xc6, 0x83, 0x5e, 0x11, 0x0c, 0x2f, 0xa8, 0xca, 0xd0, 0xe6, 0x49, 0x55, 0x19, 0x6a,
	0x67, 0xb2, 0x4a, 0x85, 0x74, 0x56, 0xe9, 0x36, 0x54, 0x45, 0x4d, 0x35, 0x56, 0xa5, 0x0a, 0x07,
	0x74, 0x1c, 0x94, 0x9b, 0x77, 0x1e, 0x0e, 0xbd, 0x58, 0x9f, 0xa2, 0x26, 0x3a, 0xd0, 0x60, 0xca,
	0x86, 0xae, 0x3d, 0xb2, 0x30, 0x46, 0xe6, 0xc5, 0x51, 0xbe, 0xc7, 0x2b, 0x02, 0xb1, 0xc3, 0xc2,
	0x17, 0x08, 0x4e, 0x6b, 0x79, 0x25, 0xa3, 0xe5, 0x92, 0x22, 0x57, 0xb3, 0x8a, 0xec, 0x39, 0x0e,
	0xbf, 0x72, 0x2a, 0x26, 0xfd, 0xd6, 0xb6, 0xe8, 0x3a, 0x73, 0x12, 0x5d, 0x89, 0x6a, 0x84, 0x92,
	0x41, 0xc4, 0x8e, 0x3b, 0xc1, 0x98, 0xfd, 0x8c, 0x51, 0xd4, 0xaa, 0x98, 0x95, 0xb1, 0x3b, 0xe9,
	0x63, 0x9b, 0xf3, 0xfa, 0x95, 0x40, 0x36, 0x04, 0xd2, 0xfe, 0x8a, 0x23, 0xef, 0x41, 0xfd, 0xc4,
	0x1e, 0x9e, 0x61, 0x5c, 0x4c, 0xf3, 0xaa, 0x7c, 0x70, 0x01, 0xeb, 0xe1, 0xf4, 0x49, 0x15, 0xbc,
	0xf9, 0x4b, 0x54, 0xc1, 0x57, 0x66, 0x72, 0x59, 0xc6, 0x9f, 0x17, 0xa0, 0xd2, 0x13, 0x5f, 0x41,
	0xfc, 0x6f, 0x67, 0x26, 0x6e, 0x42, 0x99, 0x4d, 0x9c, 0x20, 0xa9, 0xba, 0x95, 0xb0, 0x29, 0xa7,
	0x2c, 0x4a, 0x4b, 0xa7, 0x2c, 0xca, 0xcb, 0xa4, 0x2c, 0x7e, 0x33, 0x65, 0xae, 0x55, 0x29, 0x53,
	0x1b, 0xb1, 0x3c, 0xdf, 0x6c, 0x97, 0xcf, 0x36, 0x64, 0xae, 0xbf, 0xb5, 0x99, 0xeb, 0x6f, 0x4a,
	0xb9, 0xeb, 0x19, 0xe5, 0x9e, 0xcd, 0x55, 0xac, 0x2c, 0x99, 0xab, 0x10, 0x35, 0xb4, 0x66, 0x52,
	0x43, 0xbb, 0x07, 0xe2, 0xb3, 0x02, 0x8b, 0x1b, 0x76, 0x83, 0xe7, 0x5a, 0x38, 0x6c, 0x9f, 0x6a,
	0xdf, 0x99, 0x0c, 0x4e, 0xe5, 0xea, 0x0c, 0x8e, 0xf1, 0xd7, 0x79, 0x58, 0x9d, 0xd9, 0xab, 0x5f,
	0xce, 0x33, 0x2c, 0xaa, 0xd7, 0x2e, 0x95, 0xe5, 0x8f, 0x4c, 0xb1, 0xb4, 0xd8, 0x14, 0xcb, 0x57,
	0x98, 0x62, 0xe5, 0x32, 0x53, 0xac, 0x66, 0x4c, 0xf1, 0x51, 0x46, 0x03, 0x2e, 0xb7, 0xb3, 0xb9,
	0xae, 0xa8, 0x3e, 0xdf, 0x15, 0x49, 0x0e, 0xad, 0x91, 0x76, 0x68, 0x59, 0x6b, 0xad, 0xcd, 0x66,
	0x9e, 0x53, 0xda, 0x54, 0x48, 0x6b, 0x93, 0xf1, 0xb7, 0x35, 0x68, 0xa4, 0xa2, 0x95, 0x99, 0x0c,
	0x83, 0x32, 0x9b, 0x61, 0x88, 0xe3, 0x8c, 0x9c, 0x9c, 0x42, 0xf8, 0x41, 0xea, 0xfa, 0x9f, 0x97,
	0x0c, 0x27, 0x35, 0x41, 0xf6, 0xee, 0x3f, 0x93, 0x5a, 0x28, 0xcc, 0x49, 0x2d, 0xa4, 0xb3, 0x28,
	0xc5, 0x25, 0xb3, 0x28, 0xa5, 0x45, 0x59, 0x94, 0x4f, 0x53, 0xd1, 0x1f, 0xcf, 0x4a, 0xde, 0x9b,
	0xb7, 0xd4, 0x85, 0xa1, 0xdf, 0x27, 0x72, 0xe8, 0x57, 0x59, 0x76, 0x80, 0x24, 0xee, 0x7b, 0x17,
	0x4a, 0x81, 0x37, 0x1c, 0x32, 0x9f, 0xb4, 0x28, 0x4a, 0x2e, 0xf7, 0x09, 0x14, 0xf5, 0x7e, 0x7e,
	0xc3, 0x14, 0x44, 0xda, 0xf7, 0xa1, 0xca, 0x7f, 0x59, 0xaf, 0x9f, 0x88, 0x04, 0xdc, 0xc6, 0x9c,
	0x1e, 0x2f, 0x9e, 0x3c, 0xbf, 0x61, 0x56, 0x38, 0xe5, 0x8b, 0x27, 0x38, 0x49, 0xc8, 0x26, 0x13,
	0x97, 0x2b, 0x64, 0x34, 0xc9, 0x80, 0x40, 0xf2, 0x24, 0x9c, 0x48, 0xfb, 0x10, 0xe0, 0xc4, 0x0e,
	0xce, 0x58, 0x88, 0x37, 0x5a, 0x91, 0x52, 0xe3, 0x35, 0xd2, 0x9d, 0x18, 0x2c, 0x75, 0x93, 0x88,
	0xb5, 0x1f, 0x02, 0xb8, 0x43, 0x66, 0xbd, 0xf2, 0x86, 0xa8, 0x84, 0x75, 0xea, 0xca, 0x65, 0xdf,
	0x19, 0xb2, 0xe7, 0x04, 0x95, 0x7a, 0x56, 0xdd, 0x08, 0xa8, 0x7d, 0x00, 0x95, 0x57, 0xf6, 0xc4,
	0xa1, 0x19, 0x1b, 0x12, 0x5f, 0xcf, 0x05, 0x50, 0xea, 0x15, 0x13, 0x6a, 0x3f, 0x86, 0x7a, 0x68,
	0x9f, 0x8c, 0x98, 0x25, 0xb8, 0x6b, 0x52, 0x47, 0x5e, 0xdb, 0x1c, 0x20, 0x62, 0x86, 0xc5, 0x5a,
	0x98, 0x80, 0x71, 0x4e, 0xbc, 0x9d, 0xd3, 0x9c, 0x2b, 0xd2, 0x9c, 0x3b, 0x02, 0x28, 0xcf, 0x19,
	0x11, 0x6a, 0x07, 0xb0, 0x6a, 0x8f, 0xf1, 0x6c, 0xb1, 0x27, 0xd6, 0x97, 0x9e, 0xc7, 0xf7, 0x48,
	0xa5, 0xde, 0x77, 0xa8, 0x77, 0x4b, 0x60, 0x9f, 0x09, 0xa4, 0x34, 0x8a, 0x6a, 0x67, 0x70, 0xda,
	0xf7, 0xa0, 0x1c, 0x4c, 0x3c, 0xef, 0x8c, 0xf9, 0x94, 0xc5, 0x89, 0x3e, 0x79, 0xe9, 0x73, 0x98,
	0xd4, 0x35, 0x22, 0xd3, 0xb6, 0xa1, 0xe8, 0xe0, 0x91, 0x48, 0x19, 0x9d, 0x28, 0x57, 0xbb, 0x87,
	0x10, 0x89, 0x9a, 0x93, 0xa0, 0xdc, 0xbf, 0x3c, 0x0f, 0x03, 0x7b, 0x44, 0x49, 0x9e, 0x48, 0xee,
	0xcf, 0x08, 0x24, 0xcb, 0x9d, 0x13, 0xe1, 0xd0, 0x74, 0xcd, 0xa6, 0x8c, 0x4f, 0x34, 0x34, 0xdd,
	0xae, 0xe5, 0xa1, 0x89, 0x04, 0x17, 0x3e, 0xf4, 0xe9, 0x86, 0x47, 0x99, 0x9f, 0xf8, 0x5b, 0x1d,
	0x0e, 0x93, 0x17, 0x2e, 0xc8, 0xe6, 0x24, 0x5c, 0x37, 0xe7, 0x24, 0x5c, 0xff, 0xff, 0x0a, 0xb3,
	0xdc, 0x15, 0x66, 0x07, 0x92, 0xb4, 0xbd, 0xf1, 0xf7, 0x79, 0x50, 0xb3, 0x0e, 0x60, 0x26, 0x97,
	0x2a, 0xfc, 0xf7, 0x65, 0xb9, 0xd4, 0x5c, 0x8a, 0x64, 0x41, 0x2e, 0x55, 0xd4, 0x3d, 0xaf, 0xc8,
	0xa5, 0x16, 0xd2, 0x54, 0x8b, 0x73, 0xa9, 0xe2, 0x03, 0x90, 0xa5, 0x72, 0xa9, 0xa5, 0x19, 0xda,
	0xcb, 0x73, 0xa9, 0x3c, 0xa0, 0xbf, 0x56, 0x2e, 0xb5, 0x32, 0xaf, 0x0b, 0xcd, 0x92, 0x16, 0x21,
	0x17, 0xc5, 0x42, 0x11, 0x02, 0x47, 0x27, 0x22, 0xcc, 0x9e, 0xa6, 0xb5, 0x99, 0xd3, 0xd4, 0xf8,
	0x37, 0x54, 0xee, 0x94, 0x14, 0xe7, 0xca, 0xb0, 0x78, 0xb5, 0x0c, 0x8b, 0xcb, 0xc8, 0xb0, 0xb8,
	0x94, 0x0c, 0x8b, 0xcb, 0xca, 0xb0, 0x78, 0x0d, 0x19, 0x16, 0xaf, 0x29, 0xc3, 0xe2, 0xf5, 0x65,
	0x38, 0x37, 0x1f, 0x6e, 0xbc, 0x82, 0x66, 0xfa, 0x48, 0x90, 0x32, 0xe4, 0x4a, 0x2a, 0x43, 0x7e,
	0x17, 0x6a, 0x6e, 0x60, 0xc5, 0x49, 0xf2, 0x1c, 0xb9, 0x2a, 0x70, 0x83, 0x41, 0x94, 0x26, 0x4f,
	0x17, 0x4a, 0x8a, 0x99, 0x42, 0x89, 0xf1, 0x67, 0x0a, 0x68, 0xb3, 0xa7, 0xe5, 0x6c, 0x72, 0x5d,
	0x59, 0x2a, 0xb9, 0x9e, 0xbb, 0x6e, 0x72, 0x3d, 0x7f, 0x49, 0x72, 0xdd, 0xf8, 0x57, 0x05, 0x56,
	0x67, 0x8e, 0xe3, 0x99, 0x94, 0xbb, 0x72, 0x75, 0xca, 0x3d, 0x37, 0x9b, 0x72, 0x9f, 0x61, 0x30,
	0xbf, 0x14, 0x83, 0x85, 0xeb, 0x32, 0x58, 0xbc, 0x8c, 0xc1, 0x7f, 0x51, 0x40, 0xcd, 0x06, 0x0e,
	0xff, 0x97, 0xf8, 0xeb, 0xc0, 0xda, 0x9c, 0xf0, 0x26, 0x55, 0xee, 0x50, 0x32, 0xe5, 0x8e, 0x44,
	0xcf, 0x73, 0xb2, 0x9e, 0x1b, 0xff, 0xa5, 0x80, 0x9a, 0x8d, 0x77, 0xb2, 0xb5, 0x11, 0xe5, 0xaa,
	0xda, 0x48, 0x6e, 0x71, 0x6d, 0x24, 0x3f, 0xb7, 0x36, 0x52, 0x58, 0x50, 0x1b, 0x29, 0xce, 0xaf,
	0x8d, 0x94, 0xa4, 0xda, 0x48, 0xb6, 0x00, 0x5e, 0x9e, 0x2d, 0x80, 0x67, 0xcb, 0xe8, 0x95, 0x99,
	0x32, 0x3a, 0x9a, 0x80, 0xbe, 0x28, 0x50, 0xcb, 0x94, 0x5f, 0x94, 0x4b, 0xcb, 0x2f, 0xb9, 0xf9,
	0xe5, 0x97, 0xfc, 0x9c, 0xf2, 0x4b, 0x61, 0x61, 0xf9, 0x45, 0xba, 0xcc, 0x5c, 0x43, 0x45, 0x4a,
	0x97, 0xa9, 0x48, 0x17, 0x56, 0x32, 0x41, 0xe4, 0x9c, 0x8a, 0x8f, 0x72, 0x69, 0xc5, 0x27, 0x27,
	0x55, 0x7c, 0x8c, 0x9f, 0x42, 0x23, 0x15, 0x64, 0xa6, 0x4b, 0x40, 0xca, 0xa2, 0x12, 0x50, 0x4e,
	0x2e, 0x01, 0xc5, 0x23, 0xe7, 0xe5, 0x91, 0x7f, 0x06, 0xcd, 0x74, 0x44, 0xba, 0x9c, 0x93, 0xcc,
	0x9a, 0x73, 0xee, 0x6a, 0x73, 0xce, 0xcf, 0x98, 0xb3, 0xf1, 0x37, 0x0a, 0x34, 0x52, 0x11, 0xee,
	0xc2, 0x3a, 0x95, 0x72, 0xed, 0x3a, 0x55, 0x6e, 0xd9, 0x3a, 0x55, 0xfe, 0xd2, 0x3a, 0x55, 0x21,
	0x5d, 0xa7, 0x32, 0xfe, 0xa9, 0x08, 0x2b, 0x99, 0x30, 0x7b, 0x5e, 0xed, 0x4a, 0x59, 0xb6, 0x76,
	0x95, 0xbb, 0xb4, 0x76, 0x95, 0x9f, 0x5f, 0xbb, 0x2a, 0x2c, 0x51, 0xbb, 0x2a, 0x5e, 0xa3, 0x76,
	0x55, 0x5a, 0xa2, 0x76, 0x55, 0xbd, 0xac, 0x76, 0x05, 0x57, 0xd4, 0xae, 0x6a, 0x57, 0xd7, 0xae,
	0xea, 0x57, 0xd4, 0xae, 0x1a, 0x4b, 0xd5, 0xae, 0x9a, 0xd7, 0xac, 0x5d, 0xad, 0x2c, 0x5b, 0xbb,
	0x52, 0x67, 0x6a, 0x57, 0x0f, 0x41, 0x25, 0x1e, 0x43, 0x2f, 0xb4, 0x47, 0x16, 0x8a, 0x28, 0xa0,
	0x5b, 0x64, 0xc3, 0x6c, 0x22, 0x7c, 0x80, 0xe0, 0x1e, 0x42, 0x91, 0x92, 0x58, 0x95, 0x29, 0xf9,
	0x07, 0x41, 0x4d, 0x84, 0x4b, 0x94, 0xd1, 0x8e, 0x93, 0xf0, 0xd7, 0xf8, 0x7d, 0x08, 0x01, 0x88,
	0x8d, 0x77, 0x9c, 0x90, 0xeb, 0x1c, 0x89, 0x00, 0x42, 0x46, 0xf1, 0x31, 0xf7, 0xfb, 0x1b, 0x49,
	0x7c, 0xbc, 0x43, 0xbe, 0x3f, 0x8a, 0x8f, 0x39, 0x7a, 0x33, 0x89, 0x8f, 0x09, 0x6d, 0x7c, 0x0c,
	0xc0, 0xdf, 0x1f, 0x0c, 0x7c, 0xc6, 0x28, 0x2b, 0xc2, 0x9f, 0xc2, 0xf1, 0x4f, 0xee, 0x36, 0xa4,
	0x07, 0x0a, 0x48, 0x20, 0x9e, 0x1b, 0x44, 0x2f, 0xe4, 0x7e, 0x5f, 0x01, 0x35, 0x8b, 0x5c, 0xaa,
	0xb0, 0xf3, 0x34, 0xf3, 0x2c, 0x2f, 0x2f, 0x3f, 0x3b, 0x49, 0x10, 0x38, 0x6a, 0xe6, 0xb1, 0xde,
	0xec, 0xf3, 0xa6, 0x6f, 0xf2, 0xb0, 0x92, 0xe9, 0x73, 0x9d, 0x07, 0x3f, 0x8d, 0x24, 0x1b, 0x1b,
	0x7f, 0x73, 0x54, 0x93, 0x3f, 0x16, 0x8c, 0xf3, 0xdc, 0xf9, 0xc5, 0x79, 0xee, 0xfb, 0xa9, 0x72,
	0xd4, 0xe2, 0xc7, 0x51, 0xd1, 0x23, 0xc7, 0x22, 0x51, 0x41, 0x92, 0xb0, 0x8a, 0x1f, 0x3c, 0xbe,
	0x23, 0x3f, 0x78, 0xe4, 0xb5, 0xaa, 0x46, 0x2a, 0xf9, 0x2d, 0xbf, 0x7f, 0xbc, 0x0b, 0xfc, 0x22,
	0x23, 0xde, 0x47, 0xf0, 0x1a, 0x09, 0x4f, 0xd4, 0xd1, 0xc3, 0x08, 0x3c, 0x7a, 0x22, 0x6a, 0x41,
	0xc3, 0x8b, 0x25, 0x8d, 0x08, 0xca, 0xc9, 0x2e, 0x2b, 0x44, 0xc5, 0x45, 0xa7, 0xba, 0xfc, 0x22,
	0x2b, 0x4e, 0x13, 0x94, 0xa5, 0xef, 0xe8, 0x8c, 0xf7, 0xa0, 0x9a, 0x7c, 0xc8, 0x99, 0x70, 0x9b,
	0x5b, 0xc4, 0xad, 0xf1, 0x31, 0xd4, 0x23, 0xbe, 0xa8, 0xcf, 0x3b, 0xd9, 0xe7, 0x9e, 0x97, 0x70,
	0x6f, 0x7c, 0x9e, 0x92, 0xbb, 0xf8, 0x18, 0x35, 0xad, 0x57, 0xca, 0xb2, 0x7a, 0x65, 0xbc, 0x0f,
	0x55, 0xd2, 0x64, 0x1a, 0xe6, 0x7e, 0xc6, 0x0c, 0x32, 0xe2, 0x14, 0xda, 0xff, 0x33, 0xb8, 0x7b,
	0x78, 0x3e, 0x0a, 0xdd, 0xe9, 0x88, 0x65, 0xd6, 0x11, 0x9f, 0x0f, 0x59, 0x3d, 0x14, 0x3a, 0x97,
	0x4b, 0x3d, 0x32, 0x9b, 0xa9, 0xc7, 0xc4, 0x1a, 0x57, 0x58, 0xa8, 0x71, 0xc6, 0x0b, 0xd0, 0x17,
	0x4c, 0x1e, 0x68, 0x1f, 0x41, 0x71, 0x84, 0x3f, 0xc4, 0xea, 0x79, 0x49, 0xfc, 0x8a, 0xa5, 0x9a,
	0xbc, 0x8b, 0xf1, 0x73, 0x05, 0x6e, 0x2e, 0x20, 0xd5, 0x3e, 0x95, 0xbe, 0x58, 0x54, 0x68, 0x69,
	0xcb, 0x0d, 0x9d, 0x7c, 0xc3, 0x98, 0x95, 0x4f, 0x6e, 0x69, 0xf9, 0xec, 0x40, 0x73, 0x9f, 0x79,
	0xf2, 0xf7, 0x93, 0x3a, 0x94, 0x1d, 0x16, 0x9c, 0x85, 0xde, 0x54, 0x3c, 0xc8, 0x8d, 0x9a, 0x18,
	0x73, 0x8f, 0xbd, 0x13, 0x77, 0xc4, 0xf3, 0xe3, 0x55, 0x53, 0xb4, 0x30, 0xe6, 0x5e, 0xa7, 0x0f,
	0x92, 0x49, 0xeb, 0x77, 0x2e, 0xa2, 0x5a, 0x8d, 0xf6, 0x21, 0xf0, 0x4f, 0x93, 0x2d, 0x87, 0x85,
	0xb6, 0x3b, 0x0a, 0x04, 0x77, 0xeb, 0xc9, 0x27, 0xcc, 0xee, 0xe4, 0x74, 0x8f, 0xe3, 0xcc, 0x3a,
	0x91, 0x8a, 0x96, 0xf6, 0x19, 0xd4, 0xf8, 0xa7, 0xd4, 0xdc, 0xbc, 0x38, 0x43, 0x6f, 0x27, 0x1d,
	0x33, 0x53, 0x71, 0x5f, 0x4a, 0x40, 0xfe, 0xac, 0x14, 0x82, 0x18, 0x70, 0xeb, 0x18, 0x56, 0x32,
	0xe8, 0x39, 0x4f, 0x4a, 0x1f, 0xc9, 0x4f, 0x4a, 0x53, 0x6f, 0x18, 0xc4, 0x54, 0x34, 0x84, 0xfc,
	0xa8, 0xf4, 0xe7, 0x8a, 0x78, 0x43, 0x22, 0x13, 0xfc, 0x2a, 0x3c, 0xb7, 0x41, 0xe5, 0x5d, 0xe3,
	0x6f, 0xfe, 0x23, 0x49, 0xde, 0x9a, 0x59, 0x4d, 0xf2, 0x42, 0x60, 0x65, 0xcc, 0xc1, 0x51, 0x17,
	0xe3, 0x0f, 0x14, 0xf1, 0x6a, 0x23, 0x4b, 0x9a, 0x7e, 0x76, 0xa0, 0x2c, 0xf7, 0xec, 0x60, 0x96,
	0xa1, 0xdc, 0xb2, 0x0c, 0x19, 0x2f, 0x61, 0x25, 0x43, 0x80, 0xb1, 0x70, 0xf2, 0x70, 0x04, 0x25,
	0xcb, 0x2b, 0x66, 0xf5, 0xf8, 0x69, 0x08, 0xfa, 0x4d, 0x8a, 0x14, 0xf0, 0x64, 0x8f, 0x84, 0x4f,
	0x85, 0x44, 0x02, 0x11, 0xc1, 0xf6, 0x10, 0x2a, 0xb1, 0x92, 0xd5, 0xa1, 0xb2, 0xd3, 0x1e, 0x98,
	0xad, 0xbd, 0x96, 0xa9, 0xde, 0xc0, 0xd6, 0x51, 0xa7, 0xdb, 0x6d, 0xed, 0x1e, 0xb4, 0x55, 0x45,
	0xab, 0x41, 0xb9, 0xd3, 0xeb, 0x1f, 0xf5, 0xcc, 0x81, 0x9a, 0xd3, 0x1a, 0x50, 0xed, 0x1c, 0xee,
	0xef, 0xb7, 0x0e, 0x3b, 0xdd, 0x7d, 0x35, 0xaf, 0x95, 0x21, 0xbf, 0xb3, 0x7f, 0xa0, 0x16, 0xb4,
	0x12, 0xe4, 0x76, 0x8e, 0xd4, 0x22, 0xfd, 0xdd, 0x57, 0x4b, 0xf8, 0x77, 0xb0, 0xaf, 0x96, 0xb7,
	0xff, 0x58, 0x81, 0xd5, 0x99, 0x37, 0x84, 0xda, 0x5d, 0xb8, 0x7d, 0xdc, 0xdd, 0x6b, 0x3f, 0xeb,
	0x74, 0xdb, 0x7b, 0x16, 0x0d, 0x6d, 0xb5, 0xbb, 0x83, 0xce, 0xe0, 0x0b, 0x6b, 0xf0, 0xc5, 0x51,
	0x5b, 0xbd, 0xa1, 0x55, 0xa1, 0xc8, 0x67, 0x54, 0xb4, 0x15, 0xa8, 0xed, 0xf6, 0x0e, 0x8f, 0xda,
	0x83, 0xce, 0xa0, 0xd3, 0xeb, 0xaa, 0x39, 0xc4, 0xed, 0x9b, 0xbd, 0xe3, 0x23, 0x35, 0x8f, 0x3f,
	0xdb, 0x2f, 0xda, 0xdd, 0x81, 0x5a, 0xc0, 0x35, 0xf7, 0x8e, 0x07, 0x66, 0x67, 0xff, 0xf9, 0x40,
	0x2d, 0x6a, 0x4d, 0x80, 0xa8, 0x53, 0xcf, 0x54, 0x4b, 0x1a, 0x40, 0xe9, 0xb0, 0x65, 0x7e, 0xde,
	0x1e, 0xa8, 0xe5, 0xed, 0x2d, 0x28, 0xf1, 0x27, 0x07, 0x5a, 0x05, 0x0a, 0x07, 0x9d, 0x17, 0x6d,
	0xc1, 0xb1, 0xd9, 0x3e, 0x6c, 0x0d, 0x76, 0x9f, 0xab, 0xca, 0xf6, 0x9f, 0x28, 0x50, 0x93, 0x6a,
	0xb3, 0xb8, 0x84, 0x23, 0xb3, 0x6d, 0xe1, 0xfe, 0x20, 0xdb, 0x37, 0x70, 0x4b, 0xa2, 0x86, 0xa2,
	0xa9, 0x50, 0x17, 0x0d, 0x8b, 0x46, 0xcb, 0xe1, 0x68, 0x66, 0xbb, 0x7f, 0x7c, 0x30, 0x68, 0xef,
	0xa9, 0x79, 0xec, 0xdd, 0xe9, 0x0e, 0xda, 0xa6, 0x79, 0x7c, 0x84, 0x80, 0x82, 0xb6, 0x0e, 0x6a,
	0xeb, 0x65, 0xab, 0x33, 0xc0, 0x1e, 0x9c, 0xae, 0xaf, 0x16, 0x71, 0x98, 0xa3, 0x5e, 0x7f, 0x10,
	0xcf, 0x52, 0xc2, 0xbd, 0xde, 0x6d, 0x75, 0x77, 0xdb, 0x07, 0x07, 0xed, 0x3d, 0xb5, 0xbc, 0x6d,
	0xc1, 0x4a, 0xa6, 0x5c, 0x88, 0x13, 0xed, 0x75, 0xfa, 0xad, 0x1d, 0x24, 0xa0, 0x55, 0xb5, 0xbb,
	0xbc, 0xa1, 0x68, 0x9b, 0xa0, 0x0d, 0xda, 0x87, 0x47, 0x3d, 0xb3, 0x65, 0x7e, 0x61, 0xc5, 0x44,
	0x62, 0x6d, 0x47, 0x07, 0xad, 0x5d, 0x5a, 0x5b, 0x0d, 0xca, 0xe6, 0x71, 0xb7, 0x8b, 0xf3, 0x15,
	0xb6, 0xdb, 0xd0, 0x4c, 0xbf, 0xd1, 0xd5, 0xee, 0xc0, 0x5b, 0x89, 0x9c, 0x92, 0x0d, 0x8d, 0xa4,
	0x54, 0x81, 0xc2, 0xa0, 0xdd, 0x3a, 0x54, 0x15, 0xdc, 0xdf, 0xa3, 0x83, 0xd6, 0x17, 0x6d, 0x53,
	0xcd, 0x6d, 0xff, 0x76, 0xfc, 0x10, 0x23, 0x31, 0x1a, 0x15, 0xea, 0xad, 0xe3, 0x41, 0xcf, 0xda,
	0x35, 0xdb, 0xad, 0x01, 0x2d, 0x36, 0x82, 0xd0, 0x9e, 0xd3, 0x8a, 0x35, 0x68, 0x1e, 0xb6, 0xba,
	0xc7, 0xad, 0x83, 0x98, 0x2a, 0x27, 0xc1, 0x22, 0xba, 0xfc, 0xf6, 0x01, 0x54, 0x85, 0x2e, 0xd9,
	0xa7, 0xda, 0x2a, 0x34, 0xba, 0xbd, 0x58, 0x79, 0x5a, 0x28, 0x1c, 0x80, 0xd2, 0x67, 0xc7, 0xdd,
	0x4e, 0xcf, 0x54, 0x15, 0x54, 0x90, 0x97, 0xbd, 0xc3, 0x36, 0xaa, 0x0d, 0x40, 0x69, 0xaf, 0x77,
	0xbc, 0x73, 0xd0, 0x56, 0x0b, 0x08, 0x3e, 0xec, 0xfc, 0xb4, 0xbd, 0xa7, 0x56, 0xb6, 0x5d, 0x58,
	0x6d, 0x49, 0x9f, 0x9f, 0x3f, 0x1b, 0xd9, 0xa7, 0x24, 0xf0, 0xe3, 0x6e, 0xeb, 0x45, 0xab, 0x73,
	0x80, 0xdb, 0xa6, 0xde, 0xc0, 0x75, 0xa0, 0x6c, 0xad, 0x04, 0xa6, 0x68, 0x37, 0x61, 0xad, 0x3f,
	0x30, 0xdb, 0x64, 0x0a, 0x12, 0x22, 0x87, 0x5b, 0xdf, 0x3f, 0x6a, 0xef, 0x76, 0x5a, 0x07, 0x7d,
	0x09, 0x5e, 0xd8, 0xfe, 0x0f, 0x05, 0xaa, 0xfc, 0x03, 0x23, 0x5c, 0x79, 0x0d, 0xca, 0xdd, 0x1e,
	0x2e, 0xb9, 0xaf, 0xde, 0xc0, 0x8d, 0x7e, 0xd9, 0x19, 0x3c, 0xef, 0x1d, 0x0f, 0xac, 0xd6, 0xc1,
	0xa0, 0x6d, 0x76, 0x5b, 0x03, 0x9c, 0xee, 0xa0, 0xd3, 0x6d, 0xf7, 0xb9, 0x0d, 0x1c, 0x77, 0x77,
	0x7b, 0x07, 0x07, 0xad, 0xa3, 0x3e, 0xed, 0xcb, 0x2a, 0x34, 0x7a, 0x5d, 0xab, 0xd5, 0xef, 0xb4,
	0xba, 0xd6, 0x51, 0x6b, 0x1f, 0x79, 0xba, 0x09, 0x6b, 0xbd, 0xae, 0x25, 0x99, 0x0a, 0x47, 0x54,
	0x70, 0xed, 0xbd, 0x2e, 0xa9, 0xa6, 0xf5, 0xb2, 0xb3, 0xb7, 0xdf, 0x1e, 0xa8, 0xaa, 0x76, 0x1b,
	0x6e, 0x22, 0x41, 0xef, 0xe8, 0xf8, 0xa0, 0x65, 0x5a, 0x64, 0x43, 0x11, 0x72, 0x4b, 0xbb, 0x07,
	0x77, 0x24, 0xa4, 0x3c, 0xa2, 0x20, 0xf9, 0x54, 0xdb, 0x84, 0x55, 0x5c, 0x9b, 0xf5, 0x0c, 0x77,
	0xd1, 0x6a, 0x0d, 0xac, 0xf7, 0xad, 0x1f, 0xa8, 0x5f, 0xe3, 0x42, 0x61, 0xbf, 0x75, 0x18, 0x2d,
	0xfc, 0xeb, 0xdc, 0xce, 0x16, 0x7c, 0x7b, 0xe8, 0x8d, 0x1f, 0x9f, 0xb8, 0xe1, 0xa9, 0x3d, 0x66,
	0x23, 0xfb, 0x24, 0x78, 0x2c, 0xfd, 0xcb, 0x10, 0x7b, 0xea, 0x9e, 0x94, 0xe8, 0xff, 0x86, 0x7c,
	0xf0, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x77, 0x7e, 0x39, 0x5a, 0x44, 0x00, 0x00,
}

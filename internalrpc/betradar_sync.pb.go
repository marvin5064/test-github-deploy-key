// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/betradar_sync.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StreamURLRequest struct {
	Ip       string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Platform string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	MatchId  uint32 `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (m *StreamURLRequest) Reset()                    { *m = StreamURLRequest{} }
func (m *StreamURLRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamURLRequest) ProtoMessage()               {}
func (*StreamURLRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *StreamURLRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *StreamURLRequest) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *StreamURLRequest) GetMatchId() uint32 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type StreamURLResponse struct {
	Url  string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *StreamURLResponse) Reset()                    { *m = StreamURLResponse{} }
func (m *StreamURLResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamURLResponse) ProtoMessage()               {}
func (*StreamURLResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *StreamURLResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *StreamURLResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamURLRequest)(nil), "internalrpc.StreamURLRequest")
	proto.RegisterType((*StreamURLResponse)(nil), "internalrpc.StreamURLResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BetradarSync service

type BetradarSyncClient interface {
	GetStreamURL(ctx context.Context, in *StreamURLRequest, opts ...grpc.CallOption) (*StreamURLResponse, error)
}

type betradarSyncClient struct {
	cc *grpc.ClientConn
}

func NewBetradarSyncClient(cc *grpc.ClientConn) BetradarSyncClient {
	return &betradarSyncClient{cc}
}

func (c *betradarSyncClient) GetStreamURL(ctx context.Context, in *StreamURLRequest, opts ...grpc.CallOption) (*StreamURLResponse, error) {
	out := new(StreamURLResponse)
	err := grpc.Invoke(ctx, "/internalrpc.BetradarSync/GetStreamURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BetradarSync service

type BetradarSyncServer interface {
	GetStreamURL(context.Context, *StreamURLRequest) (*StreamURLResponse, error)
}

func RegisterBetradarSyncServer(s *grpc.Server, srv BetradarSyncServer) {
	s.RegisterService(&_BetradarSync_serviceDesc, srv)
}

func _BetradarSync_GetStreamURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetradarSyncServer).GetStreamURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.BetradarSync/GetStreamURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetradarSyncServer).GetStreamURL(ctx, req.(*StreamURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BetradarSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.BetradarSync",
	HandlerType: (*BetradarSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStreamURL",
			Handler:    _BetradarSync_GetStreamURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/betradar_sync.proto",
}

func init() { proto.RegisterFile("internalrpc/betradar_sync.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0x2a, 0x5a, 0xc7, 0x2a, 0x75, 0x4e, 0xb1, 0x52, 0x2d, 0x39, 0xf5, 0x14, 0x41,
	0x4f, 0x5e, 0x7b, 0x11, 0x41, 0x10, 0x52, 0x3c, 0x78, 0x0a, 0x9b, 0xcd, 0xa8, 0x0b, 0xd9, 0x3f,
	0xce, 0x4e, 0x0f, 0xf9, 0xf6, 0x62, 0x0c, 0x25, 0x08, 0xde, 0xde, 0xdb, 0x9d, 0xf9, 0xf1, 0xde,
	0xc0, 0x8d, 0x71, 0x42, 0xec, 0x54, 0xcb, 0x41, 0xdf, 0xd6, 0x24, 0xac, 0x1a, 0xc5, 0x55, 0xec,
	0x9c, 0x2e, 0x02, 0x7b, 0xf1, 0x78, 0x3a, 0x1a, 0xc8, 0xdf, 0x60, 0xbe, 0x15, 0x26, 0x65, 0x5f,
	0xcb, 0xe7, 0x92, 0xbe, 0x76, 0x14, 0x05, 0xcf, 0x21, 0x35, 0x21, 0x4b, 0x56, 0xc9, 0xfa, 0xa4,
	0x4c, 0x4d, 0xc0, 0x05, 0x4c, 0x43, 0xab, 0xe4, 0xdd, 0xb3, 0xcd, 0xd2, 0xfe, 0x75, 0xef, 0xf1,
	0x12, 0xa6, 0x56, 0x89, 0xfe, 0xac, 0x4c, 0x93, 0x4d, 0x56, 0xc9, 0xfa, 0xac, 0x3c, 0xee, 0xfd,
	0x53, 0x93, 0x3f, 0xc0, 0xc5, 0x08, 0x1d, 0x83, 0x77, 0x91, 0x70, 0x0e, 0x93, 0x1d, 0xb7, 0x03,
	0xfc, 0x47, 0x22, 0xc2, 0xa1, 0x74, 0x81, 0x06, 0x72, 0xaf, 0xef, 0x2a, 0x98, 0x6d, 0x86, 0xe4,
	0xdb, 0xce, 0x69, 0x7c, 0x81, 0xd9, 0x23, 0xc9, 0x9e, 0x86, 0xcb, 0x62, 0xd4, 0xa1, 0xf8, 0x5b,
	0x60, 0x71, 0xfd, 0xdf, 0xf7, 0x6f, 0x88, 0xfc, 0x60, 0xb3, 0x84, 0x2b, 0xed, 0x6d, 0x51, 0x1b,
	0xf9, 0x50, 0x96, 0x5a, 0x55, 0xc7, 0xf1, 0x4a, 0x7d, 0xd4, 0x5f, 0xea, 0xfe, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x57, 0x8b, 0x41, 0x4c, 0x01, 0x00, 0x00,
}

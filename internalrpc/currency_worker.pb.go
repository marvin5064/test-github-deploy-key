// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/currency_worker.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CurrencyUnit int32

const (
	CurrencyUnit_BTC  CurrencyUnit = 0
	CurrencyUnit_BYTE CurrencyUnit = 1
)

var CurrencyUnit_name = map[int32]string{
	0: "BTC",
	1: "BYTE",
}
var CurrencyUnit_value = map[string]int32{
	"BTC":  0,
	"BYTE": 1,
}

func (x CurrencyUnit) String() string {
	return proto.EnumName(CurrencyUnit_name, int32(x))
}
func (CurrencyUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type FeeType int32

const (
	FeeType_FASTEST   FeeType = 0
	FeeType_HALF_HOUR FeeType = 1
	FeeType_HOUR      FeeType = 2
)

var FeeType_name = map[int32]string{
	0: "FASTEST",
	1: "HALF_HOUR",
	2: "HOUR",
}
var FeeType_value = map[string]int32{
	"FASTEST":   0,
	"HALF_HOUR": 1,
	"HOUR":      2,
}

func (x FeeType) String() string {
	return proto.EnumName(FeeType_name, int32(x))
}
func (FeeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ExchangeRateReply struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Rate      float64 `protobuf:"fixed64,2,opt,name=rate" json:"rate,omitempty"`
}

func (m *ExchangeRateReply) Reset()                    { *m = ExchangeRateReply{} }
func (m *ExchangeRateReply) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRateReply) ProtoMessage()               {}
func (*ExchangeRateReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ExchangeRateReply) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ExchangeRateReply) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type ExchangeRateRequest struct {
	Base  string `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Quote string `protobuf:"bytes,2,opt,name=quote" json:"quote,omitempty"`
}

func (m *ExchangeRateRequest) Reset()                    { *m = ExchangeRateRequest{} }
func (m *ExchangeRateRequest) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRateRequest) ProtoMessage()               {}
func (*ExchangeRateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ExchangeRateRequest) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *ExchangeRateRequest) GetQuote() string {
	if m != nil {
		return m.Quote
	}
	return ""
}

type BitcoinFeeRequest struct {
	Type FeeType `protobuf:"varint,1,opt,name=type,enum=internalrpc.FeeType" json:"type,omitempty"`
}

func (m *BitcoinFeeRequest) Reset()                    { *m = BitcoinFeeRequest{} }
func (m *BitcoinFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*BitcoinFeeRequest) ProtoMessage()               {}
func (*BitcoinFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *BitcoinFeeRequest) GetType() FeeType {
	if m != nil {
		return m.Type
	}
	return FeeType_FASTEST
}

type BitcoinFeeReply struct {
	Timestamp int64        `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Unit      CurrencyUnit `protobuf:"varint,2,opt,name=unit,enum=internalrpc.CurrencyUnit" json:"unit,omitempty"`
	Amount    float64      `protobuf:"fixed64,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *BitcoinFeeReply) Reset()                    { *m = BitcoinFeeReply{} }
func (m *BitcoinFeeReply) String() string            { return proto.CompactTextString(m) }
func (*BitcoinFeeReply) ProtoMessage()               {}
func (*BitcoinFeeReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *BitcoinFeeReply) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BitcoinFeeReply) GetUnit() CurrencyUnit {
	if m != nil {
		return m.Unit
	}
	return CurrencyUnit_BTC
}

func (m *BitcoinFeeReply) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*ExchangeRateReply)(nil), "internalrpc.ExchangeRateReply")
	proto.RegisterType((*ExchangeRateRequest)(nil), "internalrpc.ExchangeRateRequest")
	proto.RegisterType((*BitcoinFeeRequest)(nil), "internalrpc.BitcoinFeeRequest")
	proto.RegisterType((*BitcoinFeeReply)(nil), "internalrpc.BitcoinFeeReply")
	proto.RegisterEnum("internalrpc.CurrencyUnit", CurrencyUnit_name, CurrencyUnit_value)
	proto.RegisterEnum("internalrpc.FeeType", FeeType_name, FeeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CurrencyWorker service

type CurrencyWorkerClient interface {
	GetExchangeRate(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateReply, error)
	GetBitcoinFee(ctx context.Context, in *BitcoinFeeRequest, opts ...grpc.CallOption) (*BitcoinFeeReply, error)
}

type currencyWorkerClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyWorkerClient(cc *grpc.ClientConn) CurrencyWorkerClient {
	return &currencyWorkerClient{cc}
}

func (c *currencyWorkerClient) GetExchangeRate(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateReply, error) {
	out := new(ExchangeRateReply)
	err := grpc.Invoke(ctx, "/internalrpc.CurrencyWorker/GetExchangeRate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyWorkerClient) GetBitcoinFee(ctx context.Context, in *BitcoinFeeRequest, opts ...grpc.CallOption) (*BitcoinFeeReply, error) {
	out := new(BitcoinFeeReply)
	err := grpc.Invoke(ctx, "/internalrpc.CurrencyWorker/GetBitcoinFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyWorker service

type CurrencyWorkerServer interface {
	GetExchangeRate(context.Context, *ExchangeRateRequest) (*ExchangeRateReply, error)
	GetBitcoinFee(context.Context, *BitcoinFeeRequest) (*BitcoinFeeReply, error)
}

func RegisterCurrencyWorkerServer(s *grpc.Server, srv CurrencyWorkerServer) {
	s.RegisterService(&_CurrencyWorker_serviceDesc, srv)
}

func _CurrencyWorker_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyWorkerServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.CurrencyWorker/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyWorkerServer).GetExchangeRate(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyWorker_GetBitcoinFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BitcoinFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyWorkerServer).GetBitcoinFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.CurrencyWorker/GetBitcoinFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyWorkerServer).GetBitcoinFee(ctx, req.(*BitcoinFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.CurrencyWorker",
	HandlerType: (*CurrencyWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExchangeRate",
			Handler:    _CurrencyWorker_GetExchangeRate_Handler,
		},
		{
			MethodName: "GetBitcoinFee",
			Handler:    _CurrencyWorker_GetBitcoinFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/currency_worker.proto",
}

func init() { proto.RegisterFile("internalrpc/currency_worker.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0xaf, 0xd2, 0x40,
	0x14, 0xc5, 0xe9, 0xa3, 0x3e, 0xec, 0x7d, 0x3e, 0x5e, 0x19, 0x89, 0x41, 0x44, 0x03, 0x5d, 0x11,
	0x12, 0x4b, 0x82, 0x6b, 0x63, 0x28, 0x69, 0x61, 0x61, 0x42, 0x32, 0x94, 0x18, 0x57, 0x64, 0xda,
	0xdc, 0x60, 0x63, 0x3b, 0x2d, 0xd3, 0xa9, 0xda, 0x6f, 0xe6, 0xc7, 0x33, 0x0c, 0x55, 0xda, 0xf8,
	0x6f, 0x77, 0xa7, 0x3d, 0xbf, 0x93, 0x33, 0xe7, 0x0e, 0x4c, 0x22, 0x2e, 0x51, 0x70, 0x16, 0x8b,
	0x2c, 0x9c, 0x87, 0x85, 0x10, 0xc8, 0xc3, 0xf2, 0xf0, 0x35, 0x15, 0x9f, 0x51, 0xd8, 0x99, 0x48,
	0x65, 0x4a, 0xee, 0x6a, 0x12, 0xcb, 0x85, 0x9e, 0xfb, 0x2d, 0xfc, 0xc4, 0xf8, 0x11, 0x29, 0x93,
	0x48, 0x31, 0x8b, 0x4b, 0x32, 0x02, 0x43, 0x46, 0x09, 0xe6, 0x92, 0x25, 0xd9, 0x40, 0x1b, 0x6b,
	0xd3, 0x36, 0xbd, 0x7e, 0x20, 0x04, 0x74, 0xc1, 0x24, 0x0e, 0x6e, 0xc6, 0xda, 0x54, 0xa3, 0x6a,
	0xb6, 0xde, 0xc1, 0xd3, 0xa6, 0xcd, 0xa9, 0xc0, 0x5c, 0x9e, 0xa5, 0x01, 0xcb, 0x51, 0x79, 0x18,
	0x54, 0xcd, 0xa4, 0x0f, 0x8f, 0x4e, 0x45, 0x5a, 0xf1, 0x06, 0xbd, 0x1c, 0xac, 0xb7, 0xd0, 0x73,
	0x22, 0x19, 0xa6, 0x11, 0xf7, 0xf0, 0x17, 0x3e, 0x05, 0x5d, 0x96, 0xd9, 0x05, 0xef, 0x2e, 0xfa,
	0x76, 0x2d, 0xb8, 0xed, 0x21, 0xfa, 0x65, 0x86, 0x54, 0x29, 0xac, 0x2f, 0xf0, 0x50, 0xc7, 0xff,
	0x7f, 0x89, 0xd7, 0xa0, 0x17, 0x3c, 0x92, 0x2a, 0x44, 0x77, 0xf1, 0xbc, 0x61, 0xbd, 0xaa, 0x6a,
	0xdb, 0xf3, 0x48, 0x52, 0x25, 0x23, 0xcf, 0xe0, 0x96, 0x25, 0x69, 0xc1, 0xe5, 0xa0, 0xad, 0x6e,
	0x5d, 0x9d, 0x66, 0x13, 0x78, 0x52, 0x57, 0x93, 0x0e, 0xb4, 0x1d, 0x7f, 0x65, 0xb6, 0xc8, 0x63,
	0xd0, 0x9d, 0x8f, 0xbe, 0x6b, 0x6a, 0xb3, 0x39, 0x74, 0xaa, 0xac, 0xe4, 0x0e, 0x3a, 0xde, 0x72,
	0xe7, 0xbb, 0x3b, 0xdf, 0x6c, 0x91, 0x7b, 0x30, 0x36, 0xcb, 0xf7, 0xde, 0x61, 0xb3, 0xdd, 0x53,
	0x53, 0x3b, 0x03, 0x6a, 0xba, 0x59, 0x7c, 0xd7, 0xa0, 0xfb, 0xd3, 0xf4, 0x83, 0x5a, 0x1c, 0xd9,
	0xc3, 0xc3, 0x1a, 0x65, 0xbd, 0x61, 0x32, 0x6e, 0x44, 0xfe, 0x43, 0xf9, 0xc3, 0x57, 0xff, 0x50,
	0x64, 0x71, 0x69, 0xb5, 0xc8, 0x16, 0xee, 0xd7, 0x28, 0xaf, 0xc5, 0x91, 0x26, 0xf2, 0xdb, 0x42,
	0x86, 0xa3, 0xbf, 0xfe, 0x57, 0x86, 0xce, 0x4b, 0x78, 0x11, 0xa6, 0x89, 0x1d, 0x44, 0xf2, 0xc8,
	0x12, 0x8c, 0x59, 0x90, 0xd7, 0x81, 0xe0, 0x56, 0x3d, 0xc0, 0x37, 0x3f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x28, 0x11, 0xbf, 0x18, 0xa5, 0x02, 0x00, 0x00,
}

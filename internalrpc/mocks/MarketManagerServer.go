// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"
import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// MarketManagerServer is an autogenerated mock type for the MarketManagerServer type
type MarketManagerServer struct {
	mock.Mock
}

// DeleteCategorySetting provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) DeleteCategorySetting(_a0 context.Context, _a1 *internalrpc.CategorySettingRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CategorySettingRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CategorySettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompetitionSetting provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) DeleteCompetitionSetting(_a0 context.Context, _a1 *internalrpc.CompetitionSettingRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionSettingRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionSettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableEntity provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) DisableEntity(_a0 context.Context, _a1 *api.Entity) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableEntity provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) EnableEntity(_a0 context.Context, _a1 *api.Entity) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvictEntity provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) EvictEntity(_a0 context.Context, _a1 *api.Entity) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategorySettings provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetCategorySettings(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.CategorySettingList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CategorySettingList
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.CategorySettingList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CategorySettingList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionGrade provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetCompetitionGrade(_a0 context.Context, _a1 *internalrpc.GradeRequest) (*internalrpc.GradeReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GradeReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GradeRequest) *internalrpc.GradeReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GradeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionGrades provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetCompetitionGrades(_a0 context.Context, _a1 *internalrpc.Uint32List) (*internalrpc.MultipleGradesReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.MultipleGradesReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.Uint32List) *internalrpc.MultipleGradesReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.MultipleGradesReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.Uint32List) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionPriority provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetCompetitionPriority(_a0 context.Context, _a1 *internalrpc.PriorityRequest) (*internalrpc.PriorityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.PriorityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.PriorityRequest) *internalrpc.PriorityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.PriorityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.PriorityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionSettings provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetCompetitionSettings(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.CompetitionSettingList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitionSettingList
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.CompetitionSettingList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionSettingList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisabledEntities provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetDisabledEntities(_a0 context.Context, _a1 *api.EntitiesTypeArray) (*api.Entities, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Entities
	if rf, ok := ret.Get(0).(func(context.Context, *api.EntitiesTypeArray) *api.Entities); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Entities)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.EntitiesTypeArray) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLockingStatus provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetLockingStatus(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.LockingStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.LockingStatus
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.LockingStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.LockingStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarket provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetMarket(_a0 context.Context, _a1 *internalrpc.GetMarketRequest) (*internalrpc.Market, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.Market
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMarketRequest) *internalrpc.Market); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMarketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketGrade provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetMarketGrade(_a0 context.Context, _a1 *internalrpc.GradeRequest) (*internalrpc.GradeReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GradeReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GradeRequest) *internalrpc.GradeReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GradeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GradeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketLiability provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetMarketLiability(_a0 context.Context, _a1 *internalrpc.LiabilityRequest) (*internalrpc.LiabilityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.LiabilityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.LiabilityRequest) *internalrpc.LiabilityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.LiabilityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.LiabilityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketOutcomes provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetMarketOutcomes(_a0 context.Context, _a1 *internalrpc.OutcomesRequest) (*internalrpc.OutcomesReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.OutcomesReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.OutcomesRequest) *internalrpc.OutcomesReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OutcomesReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.OutcomesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketPriority provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetMarketPriority(_a0 context.Context, _a1 *internalrpc.PriorityRequest) (*internalrpc.PriorityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.PriorityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.PriorityRequest) *internalrpc.PriorityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.PriorityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.PriorityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverlayedCompetitionSettings provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetOverlayedCompetitionSettings(_a0 context.Context, _a1 *internalrpc.Uint32List) (*internalrpc.OverlayedCompetitionSettingsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.OverlayedCompetitionSettingsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.Uint32List) *internalrpc.OverlayedCompetitionSettingsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OverlayedCompetitionSettingsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.Uint32List) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakesAndOdds provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) GetStakesAndOdds(_a0 context.Context, _a1 *internalrpc.StakesAndOddsRequest) (*internalrpc.StakesAndOddsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.StakesAndOddsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.StakesAndOddsRequest) *internalrpc.StakesAndOddsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.StakesAndOddsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.StakesAndOddsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRestricted provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) IsRestricted(_a0 context.Context, _a1 *internalrpc.IsRestrictedRequest) (*internalrpc.IsRestrictedReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.IsRestrictedReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.IsRestrictedRequest) *internalrpc.IsRestrictedReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.IsRestrictedReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.IsRestrictedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCategorySetting provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) SetCategorySetting(_a0 context.Context, _a1 *internalrpc.CategorySettingRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CategorySettingRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CategorySettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCompetitionSetting provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) SetCompetitionSetting(_a0 context.Context, _a1 *internalrpc.CompetitionSettingRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionSettingRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionSettingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLockingStatus provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) SetLockingStatus(_a0 context.Context, _a1 *internalrpc.SetLockingStatusRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetLockingStatusRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetLockingStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMarket provides a mock function with given fields: _a0, _a1
func (_m *MarketManagerServer) SetMarket(_a0 context.Context, _a1 *internalrpc.SetMarketRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetMarketRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetMarketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

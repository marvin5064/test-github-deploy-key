// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// PinnacleWorkerServer is an autogenerated mock type for the PinnacleWorkerServer type
type PinnacleWorkerServer struct {
	mock.Mock
}

// BlockSpecialMarket provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) BlockSpecialMarket(_a0 context.Context, _a1 *internalrpc.SpecialMarketRequest) (*internalrpc.BlockedSpecialMarketsList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.BlockedSpecialMarketsList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SpecialMarketRequest) *internalrpc.BlockedSpecialMarketsList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.BlockedSpecialMarketsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SpecialMarketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockSpecialMarketsForEvent provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) BlockSpecialMarketsForEvent(_a0 context.Context, _a1 *internalrpc.SpecialMarketsForEventRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SpecialMarketsForEventRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SpecialMarketsForEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisablePinnacleLive provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) DisablePinnacleLive(_a0 context.Context, _a1 *empty.Empty) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnablePinnacleLive provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) EnablePinnacleLive(_a0 context.Context, _a1 *empty.Empty) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBlockedSpecialMarkets provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) GetAllBlockedSpecialMarkets(_a0 context.Context, _a1 *internalrpc.SpecialMarketsForEventRequest) (*internalrpc.BlockedSpecialMarketsList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.BlockedSpecialMarketsList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SpecialMarketsForEventRequest) *internalrpc.BlockedSpecialMarketsList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.BlockedSpecialMarketsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SpecialMarketsForEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PinnacleLiveStatus provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) PinnacleLiveStatus(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.PinnacleLiveStatusReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.PinnacleLiveStatusReply
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.PinnacleLiveStatusReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.PinnacleLiveStatusReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockSpecialMarket provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) UnblockSpecialMarket(_a0 context.Context, _a1 *internalrpc.SpecialMarketRequest) (*internalrpc.BlockedSpecialMarketsList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.BlockedSpecialMarketsList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SpecialMarketRequest) *internalrpc.BlockedSpecialMarketsList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.BlockedSpecialMarketsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SpecialMarketRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnblockSpecialMarketsForEvent provides a mock function with given fields: _a0, _a1
func (_m *PinnacleWorkerServer) UnblockSpecialMarketsForEvent(_a0 context.Context, _a1 *internalrpc.SpecialMarketsForEventRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SpecialMarketsForEventRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SpecialMarketsForEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// PricingEngineServer is an autogenerated mock type for the PricingEngineServer type
type PricingEngineServer struct {
	mock.Mock
}

// BatchGetSelections provides a mock function with given fields: _a0, _a1
func (_m *PricingEngineServer) BatchGetSelections(_a0 context.Context, _a1 *internalrpc.BatchGetSelectionsRequest) (*internalrpc.SelectionsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.SelectionsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.BatchGetSelectionsRequest) *internalrpc.SelectionsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SelectionsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.BatchGetSelectionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBetSelection provides a mock function with given fields: _a0, _a1
func (_m *PricingEngineServer) GetBetSelection(_a0 context.Context, _a1 *internalrpc.BetSelectionRequest) (*internalrpc.BetSelectionReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.BetSelectionReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.BetSelectionRequest) *internalrpc.BetSelectionReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.BetSelectionReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.BetSelectionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLockingStatus provides a mock function with given fields: _a0, _a1
func (_m *PricingEngineServer) GetLockingStatus(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.LockingStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.LockingStatus
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.LockingStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.LockingStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelection provides a mock function with given fields: _a0, _a1
func (_m *PricingEngineServer) GetSelection(_a0 context.Context, _a1 *internalrpc.GetSelectionRequest) (*internalrpc.SelectionReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.SelectionReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetSelectionRequest) *internalrpc.SelectionReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SelectionReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetSelectionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLockingStatus provides a mock function with given fields: _a0, _a1
func (_m *PricingEngineServer) SetLockingStatus(_a0 context.Context, _a1 *internalrpc.SetLockingStatusRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetLockingStatusRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetLockingStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"
import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import grpc "google.golang.org/grpc"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// MarketManagerClient is an autogenerated mock type for the MarketManagerClient type
type MarketManagerClient struct {
	mock.Mock
}

// DeleteCategorySetting provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) DeleteCategorySetting(ctx context.Context, in *internalrpc.CategorySettingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CategorySettingRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CategorySettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompetitionSetting provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) DeleteCompetitionSetting(ctx context.Context, in *internalrpc.CompetitionSettingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionSettingRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableEntity provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) DisableEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableEntity provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) EnableEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvictEntity provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) EvictEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategorySettings provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetCategorySettings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*internalrpc.CategorySettingList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.CategorySettingList
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) *internalrpc.CategorySettingList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CategorySettingList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionGrade provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetCompetitionGrade(ctx context.Context, in *internalrpc.GradeRequest, opts ...grpc.CallOption) (*internalrpc.GradeReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.GradeReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GradeRequest, ...grpc.CallOption) *internalrpc.GradeReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GradeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GradeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionGrades provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetCompetitionGrades(ctx context.Context, in *internalrpc.Uint32List, opts ...grpc.CallOption) (*internalrpc.MultipleGradesReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.MultipleGradesReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.Uint32List, ...grpc.CallOption) *internalrpc.MultipleGradesReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.MultipleGradesReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.Uint32List, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionPriority provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetCompetitionPriority(ctx context.Context, in *internalrpc.PriorityRequest, opts ...grpc.CallOption) (*internalrpc.PriorityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.PriorityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.PriorityRequest, ...grpc.CallOption) *internalrpc.PriorityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.PriorityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.PriorityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionSettings provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetCompetitionSettings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*internalrpc.CompetitionSettingList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.CompetitionSettingList
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) *internalrpc.CompetitionSettingList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionSettingList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisabledEntities provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetDisabledEntities(ctx context.Context, in *api.EntitiesTypeArray, opts ...grpc.CallOption) (*api.Entities, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.Entities
	if rf, ok := ret.Get(0).(func(context.Context, *api.EntitiesTypeArray, ...grpc.CallOption) *api.Entities); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Entities)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.EntitiesTypeArray, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLockingStatus provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetLockingStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*internalrpc.LockingStatus, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.LockingStatus
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) *internalrpc.LockingStatus); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.LockingStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarket provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetMarket(ctx context.Context, in *internalrpc.GetMarketRequest, opts ...grpc.CallOption) (*internalrpc.Market, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.Market
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMarketRequest, ...grpc.CallOption) *internalrpc.Market); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Market)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMarketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketGrade provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetMarketGrade(ctx context.Context, in *internalrpc.GradeRequest, opts ...grpc.CallOption) (*internalrpc.GradeReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.GradeReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GradeRequest, ...grpc.CallOption) *internalrpc.GradeReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GradeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GradeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketLiability provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetMarketLiability(ctx context.Context, in *internalrpc.LiabilityRequest, opts ...grpc.CallOption) (*internalrpc.LiabilityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.LiabilityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.LiabilityRequest, ...grpc.CallOption) *internalrpc.LiabilityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.LiabilityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.LiabilityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketOutcomes provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetMarketOutcomes(ctx context.Context, in *internalrpc.OutcomesRequest, opts ...grpc.CallOption) (*internalrpc.OutcomesReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.OutcomesReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.OutcomesRequest, ...grpc.CallOption) *internalrpc.OutcomesReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OutcomesReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.OutcomesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketPriority provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetMarketPriority(ctx context.Context, in *internalrpc.PriorityRequest, opts ...grpc.CallOption) (*internalrpc.PriorityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.PriorityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.PriorityRequest, ...grpc.CallOption) *internalrpc.PriorityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.PriorityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.PriorityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverlayedCompetitionSettings provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetOverlayedCompetitionSettings(ctx context.Context, in *internalrpc.Uint32List, opts ...grpc.CallOption) (*internalrpc.OverlayedCompetitionSettingsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.OverlayedCompetitionSettingsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.Uint32List, ...grpc.CallOption) *internalrpc.OverlayedCompetitionSettingsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OverlayedCompetitionSettingsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.Uint32List, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStakesAndOdds provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) GetStakesAndOdds(ctx context.Context, in *internalrpc.StakesAndOddsRequest, opts ...grpc.CallOption) (*internalrpc.StakesAndOddsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.StakesAndOddsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.StakesAndOddsRequest, ...grpc.CallOption) *internalrpc.StakesAndOddsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.StakesAndOddsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.StakesAndOddsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRestricted provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) IsRestricted(ctx context.Context, in *internalrpc.IsRestrictedRequest, opts ...grpc.CallOption) (*internalrpc.IsRestrictedReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.IsRestrictedReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.IsRestrictedRequest, ...grpc.CallOption) *internalrpc.IsRestrictedReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.IsRestrictedReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.IsRestrictedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCategorySetting provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) SetCategorySetting(ctx context.Context, in *internalrpc.CategorySettingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CategorySettingRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CategorySettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCompetitionSetting provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) SetCompetitionSetting(ctx context.Context, in *internalrpc.CompetitionSettingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionSettingRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLockingStatus provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) SetLockingStatus(ctx context.Context, in *internalrpc.SetLockingStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetLockingStatusRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetLockingStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMarket provides a mock function with given fields: ctx, in, opts
func (_m *MarketManagerClient) SetMarket(ctx context.Context, in *internalrpc.SetMarketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetMarketRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetMarketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

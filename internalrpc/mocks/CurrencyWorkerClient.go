// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// CurrencyWorkerClient is an autogenerated mock type for the CurrencyWorkerClient type
type CurrencyWorkerClient struct {
	mock.Mock
}

// GetBitcoinFee provides a mock function with given fields: ctx, in, opts
func (_m *CurrencyWorkerClient) GetBitcoinFee(ctx context.Context, in *internalrpc.BitcoinFeeRequest, opts ...grpc.CallOption) (*internalrpc.BitcoinFeeReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.BitcoinFeeReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.BitcoinFeeRequest, ...grpc.CallOption) *internalrpc.BitcoinFeeReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.BitcoinFeeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.BitcoinFeeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExchangeRate provides a mock function with given fields: ctx, in, opts
func (_m *CurrencyWorkerClient) GetExchangeRate(ctx context.Context, in *internalrpc.ExchangeRateRequest, opts ...grpc.CallOption) (*internalrpc.ExchangeRateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.ExchangeRateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ExchangeRateRequest, ...grpc.CallOption) *internalrpc.ExchangeRateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.ExchangeRateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ExchangeRateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

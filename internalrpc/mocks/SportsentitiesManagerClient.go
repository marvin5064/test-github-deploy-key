// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"
import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import grpc "google.golang.org/grpc"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// SportsentitiesManagerClient is an autogenerated mock type for the SportsentitiesManagerClient type
type SportsentitiesManagerClient struct {
	mock.Mock
}

// AddCategoryOnEntity provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) AddCategoryOnEntity(ctx context.Context, in *internalrpc.AddCategoryOnEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.AddCategoryOnEntityRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.AddCategoryOnEntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCompetitionProviderOutright provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) AddCompetitionProviderOutright(ctx context.Context, in *internalrpc.CompetitionProviderOutrightRequest, opts ...grpc.CallOption) (*internalrpc.CompetitionProviderOutrightReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.CompetitionProviderOutrightReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionProviderOutrightRequest, ...grpc.CallOption) *internalrpc.CompetitionProviderOutrightReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionProviderOutrightReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionProviderOutrightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelEvent provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) CancelEvent(ctx context.Context, in *internalrpc.CancelEventRequest, opts ...grpc.CallOption) (*internalrpc.EventStateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CancelEventRequest, ...grpc.CallOption) *internalrpc.EventStateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CancelEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateCompetition provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) FetchOrCreateCompetition(ctx context.Context, in *internalrpc.FetchOrCreateCompetitionRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateCompetitor provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) FetchOrCreateCompetitor(ctx context.Context, in *internalrpc.FetchOrCreateCompetitorRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateEvent provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) FetchOrCreateEvent(ctx context.Context, in *internalrpc.FetchOrCreateEventRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateEventRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateGroup provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) FetchOrCreateGroup(ctx context.Context, in *internalrpc.FetchOrCreateGroupRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateGroupRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateSport provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) FetchOrCreateSport(ctx context.Context, in *internalrpc.FetchOrCreateSportRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateSportRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateSportRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveEvents provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetActiveEvents(ctx context.Context, in *internalrpc.ActiveEventRequest, opts ...grpc.CallOption) (*internalrpc.Uint32List, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.Uint32List
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ActiveEventRequest, ...grpc.CallOption) *internalrpc.Uint32List); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Uint32List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ActiveEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCancelledMarkets provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCancelledMarkets(ctx context.Context, in *internalrpc.CancelledMarketListRequest, opts ...grpc.CallOption) (*api.CancelledMarketList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.CancelledMarketList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CancelledMarketListRequest, ...grpc.CallOption) *api.CancelledMarketList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CancelledMarketList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CancelledMarketListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetition provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetition(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.CompetitionReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.CompetitionReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.CompetitionReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionByTags provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitionByTags(ctx context.Context, in *internalrpc.GetCompetitionByTagsRequest, opts ...grpc.CallOption) (*internalrpc.GetCompetitionByTagsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.GetCompetitionByTagsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetCompetitionByTagsRequest, ...grpc.CallOption) *internalrpc.GetCompetitionByTagsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetCompetitionByTagsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetCompetitionByTagsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionDetails provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitionDetails(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*api.Competition, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.Competition
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *api.Competition); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Competition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitions provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (internalrpc.SportsentitiesManager_GetCompetitionsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 internalrpc.SportsentitiesManager_GetCompetitionsClient
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) internalrpc.SportsentitiesManager_GetCompetitionsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internalrpc.SportsentitiesManager_GetCompetitionsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionsRPC provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitionsRPC(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*internalrpc.GetCompetitionsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.GetCompetitionsReply
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) *internalrpc.GetCompetitionsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetCompetitionsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitor provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitor(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.CompetitorReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.CompetitorReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.CompetitorReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitorReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitorDetails provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitorDetails(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*api.Competitor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.Competitor
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *api.Competitor); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Competitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitors provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (internalrpc.SportsentitiesManager_GetCompetitorsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 internalrpc.SportsentitiesManager_GetCompetitorsClient
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) internalrpc.SportsentitiesManager_GetCompetitorsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internalrpc.SportsentitiesManager_GetCompetitorsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitorsRPC provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetCompetitorsRPC(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*internalrpc.GetCompetitorsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.GetCompetitorsReply
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) *internalrpc.GetCompetitorsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetCompetitorsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetEvent(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.EventReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EventReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.EventReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventCompetitors provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetEventCompetitors(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.Competitors, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.Competitors
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.Competitors); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Competitors)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventV2 provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetEventV2(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*api.Event, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.Event
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *api.Event); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsV2 provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetEventsV2(ctx context.Context, in *internalrpc.EntitiesRequest, opts ...grpc.CallOption) (*internalrpc.EventsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EventsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntitiesRequest, ...grpc.CallOption) *internalrpc.EventsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntitiesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetGroup(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.GroupReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.GroupReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.GroupReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GroupReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetList(ctx context.Context, in *internalrpc.ListRequest, opts ...grpc.CallOption) (*internalrpc.Uint32List, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.Uint32List
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ListRequest, ...grpc.CallOption) *internalrpc.Uint32List); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Uint32List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagingProvider provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetManagingProvider(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*internalrpc.ManagingProvider, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.ManagingProvider
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity, ...grpc.CallOption) *internalrpc.ManagingProvider); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.ManagingProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedCompetitions provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetMatchedCompetitions(ctx context.Context, in *internalrpc.GetMatchedCompetitionsRequest, opts ...grpc.CallOption) (*api.MatchedCompetitionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MatchedCompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMatchedCompetitionsRequest, ...grpc.CallOption) *api.MatchedCompetitionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMatchedCompetitionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedCompetitors provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetMatchedCompetitors(ctx context.Context, in *internalrpc.GetMatchedCompetitorsRequest, opts ...grpc.CallOption) (*api.MatchedCompetitorList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MatchedCompetitorList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMatchedCompetitorsRequest, ...grpc.CallOption) *api.MatchedCompetitorList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetitorList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMatchedCompetitorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedEvents provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetMatchedEvents(ctx context.Context, in *internalrpc.GetMatchedEventsRequest, opts ...grpc.CallOption) (*api.MatchedEventList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MatchedEventList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMatchedEventsRequest, ...grpc.CallOption) *api.MatchedEventList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedEventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMatchedEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchingOverview provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetMatchingOverview(ctx context.Context, in *internalrpc.MatchingOverviewRequest, opts ...grpc.CallOption) (*internalrpc.MatchingOverviewReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.MatchingOverviewReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchingOverviewRequest, ...grpc.CallOption) *internalrpc.MatchingOverviewReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.MatchingOverviewReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchingOverviewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchingOverviewV2 provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetMatchingOverviewV2(ctx context.Context, in *internalrpc.MatchingOverviewRequest, opts ...grpc.CallOption) (*internalrpc.MatchingOverviewReplyV2, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.MatchingOverviewReplyV2
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchingOverviewRequest, ...grpc.CallOption) *internalrpc.MatchingOverviewReplyV2); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.MatchingOverviewReplyV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchingOverviewRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMergedEntities provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetMergedEntities(ctx context.Context, in *internalrpc.GetMergedEntitiesRequest, opts ...grpc.CallOption) (*api.MergedEntityList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MergedEntityList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMergedEntitiesRequest, ...grpc.CallOption) *api.MergedEntityList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MergedEntityList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMergedEntitiesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutright provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetOutright(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.OutrightReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.OutrightReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.OutrightReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OutrightReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutrightV2 provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetOutrightV2(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*api.Outright, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.Outright
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *api.Outright); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Outright)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutrightsV2 provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetOutrightsV2(ctx context.Context, in *internalrpc.EntitiesRequest, opts ...grpc.CallOption) (*internalrpc.OutrightsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.OutrightsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntitiesRequest, ...grpc.CallOption) *internalrpc.OutrightsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OutrightsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntitiesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSport provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetSport(ctx context.Context, in *internalrpc.EntityRequest, opts ...grpc.CallOption) (*internalrpc.SportReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.SportReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) *internalrpc.SportReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SportReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetStatus(ctx context.Context, in *internalrpc.StatusRequest, opts ...grpc.CallOption) (*internalrpc.EventStateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.StatusRequest, ...grpc.CallOption) *internalrpc.EventStateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.StatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTranslation provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetTranslation(ctx context.Context, in *internalrpc.TranslationRequest, opts ...grpc.CallOption) (*internalrpc.TranslationReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.TranslationReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationRequest, ...grpc.CallOption) *internalrpc.TranslationReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.TranslationReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTranslationMap provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetTranslationMap(ctx context.Context, in *internalrpc.TranslationRequest, opts ...grpc.CallOption) (*internalrpc.TranslationMap, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.TranslationMap
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationRequest, ...grpc.CallOption) *internalrpc.TranslationMap); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.TranslationMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnmatchedCompetitions provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetUnmatchedCompetitions(ctx context.Context, in *internalrpc.GetUnmatchedCompetitionsRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.UnmatchedCompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetUnmatchedCompetitionsRequest, ...grpc.CallOption) *api.UnmatchedCompetitionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetUnmatchedCompetitionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnmatchedCompetitors provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetUnmatchedCompetitors(ctx context.Context, in *internalrpc.GetUnmatchedCompetitorsRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitorList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.UnmatchedCompetitorList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetUnmatchedCompetitorsRequest, ...grpc.CallOption) *api.UnmatchedCompetitorList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetitorList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetUnmatchedCompetitorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnmatchedEvents provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetUnmatchedEvents(ctx context.Context, in *internalrpc.GetUnmatchedEventsRequest, opts ...grpc.CallOption) (*api.UnmatchedEventList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.UnmatchedEventList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetUnmatchedEventsRequest, ...grpc.CallOption) *api.UnmatchedEventList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedEventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetUnmatchedEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingEvents provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) GetUpcomingEvents(ctx context.Context, in *internalrpc.UpcomingEventsRequest, opts ...grpc.CallOption) (*internalrpc.UpcomingEventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.UpcomingEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpcomingEventsRequest, ...grpc.CallOption) *internalrpc.UpcomingEventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.UpcomingEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpcomingEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) HealthCheck(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*internalrpc.HealthCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.HealthCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty, ...grpc.CallOption) *internalrpc.HealthCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.HealthCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchCompetition provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) MatchCompetition(ctx context.Context, in *internalrpc.MatchCompetitionRequest, opts ...grpc.CallOption) (*api.MatchedCompetition, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MatchedCompetition
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchCompetitionRequest, ...grpc.CallOption) *api.MatchedCompetition); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchCompetitionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchCompetitor provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) MatchCompetitor(ctx context.Context, in *internalrpc.MatchCompetitorRequest, opts ...grpc.CallOption) (*api.MatchedCompetitor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MatchedCompetitor
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchCompetitorRequest, ...grpc.CallOption) *api.MatchedCompetitor); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchCompetitorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchEvent provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) MatchEvent(ctx context.Context, in *internalrpc.MatchEventRequest, opts ...grpc.CallOption) (*api.MatchedEvent, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.MatchedEvent
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchEventRequest, ...grpc.CallOption) *api.MatchedEvent); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchOrCreateCompetition provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) MatchOrCreateCompetition(ctx context.Context, in *internalrpc.FetchOrCreateCompetitionRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchOrCreateCompetitor provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) MatchOrCreateCompetitor(ctx context.Context, in *internalrpc.FetchOrCreateCompetitorRequest, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Merge provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) Merge(ctx context.Context, in *internalrpc.MergeRequest, opts ...grpc.CallOption) (*internalrpc.SingleId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.SingleId
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MergeRequest, ...grpc.CallOption) *internalrpc.SingleId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SingleId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MergeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyGroupsOnEntity provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) ModifyGroupsOnEntity(ctx context.Context, in *internalrpc.ModifyGroupsOnEntityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ModifyGroupsOnEntityRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ModifyGroupsOnEntityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultEvent provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) ResultEvent(ctx context.Context, in *internalrpc.EventStateUpdateRequest, opts ...grpc.CallOption) (*internalrpc.EventStateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EventStateUpdateRequest, ...grpc.CallOption) *internalrpc.EventStateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EventStateUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCompetitions provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) SearchCompetitions(ctx context.Context, in *internalrpc.SearchCompetitionsRequest, opts ...grpc.CallOption) (*api.CompetitionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.CompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SearchCompetitionsRequest, ...grpc.CallOption) *api.CompetitionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SearchCompetitionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEventFeatureAvailability provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) SetEventFeatureAvailability(ctx context.Context, in *internalrpc.EventFeatureAvailabilityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EventFeatureAvailabilityRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EventFeatureAvailabilityRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetManagingProvider provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) SetManagingProvider(ctx context.Context, in *internalrpc.SetManagingProviderRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetManagingProviderRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetManagingProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTranslation provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) SetTranslation(ctx context.Context, in *internalrpc.TranslationRequest, opts ...grpc.CallOption) (*internalrpc.TranslationReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.TranslationReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationRequest, ...grpc.CallOption) *internalrpc.TranslationReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.TranslationReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmatchCompetition provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UnmatchCompetition(ctx context.Context, in *internalrpc.UnmatchCompetitionRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetition, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.UnmatchedCompetition
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmatchCompetitionRequest, ...grpc.CallOption) *api.UnmatchedCompetition); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmatchCompetitionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmatchCompetitor provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UnmatchCompetitor(ctx context.Context, in *internalrpc.UnmatchCompetitorRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *api.UnmatchedCompetitor
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmatchCompetitorRequest, ...grpc.CallOption) *api.UnmatchedCompetitor); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmatchCompetitorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmerge provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) Unmerge(ctx context.Context, in *internalrpc.UnmergeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmergeRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmergeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmergeSourceID provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UnmergeSourceID(ctx context.Context, in *internalrpc.UnmergeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmergeRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmergeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UpdateEvent(ctx context.Context, in *internalrpc.UpdateEventRequest, opts ...grpc.CallOption) (*internalrpc.UpdateEventReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.UpdateEventReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateEventRequest, ...grpc.CallOption) *internalrpc.UpdateEventReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.UpdateEventReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventStatus provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UpdateEventStatus(ctx context.Context, in *internalrpc.EventStateUpdateRequest, opts ...grpc.CallOption) (*internalrpc.EventStateReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EventStateUpdateRequest, ...grpc.CallOption) *internalrpc.EventStateReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EventStateUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventV2 provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UpdateEventV2(ctx context.Context, in *internalrpc.UpdateEventRequestV2, opts ...grpc.CallOption) (*internalrpc.FetchOrCreateEntityReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateEventRequestV2, ...grpc.CallOption) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateEventRequestV2, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetadata provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UpdateMetadata(ctx context.Context, in *internalrpc.UpdateMetadataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateMetadataRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateMetadataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrCreateOutright provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UpdateOrCreateOutright(ctx context.Context, in *internalrpc.UpdateOrCreateOutrightRequest, opts ...grpc.CallOption) (*internalrpc.UpdateOrCreateOutrightResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.UpdateOrCreateOutrightResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateOrCreateOutrightRequest, ...grpc.CallOption) *internalrpc.UpdateOrCreateOutrightResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.UpdateOrCreateOutrightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateOrCreateOutrightRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTranslations provides a mock function with given fields: ctx, opts
func (_m *SportsentitiesManagerClient) UpdateTranslations(ctx context.Context, opts ...grpc.CallOption) (internalrpc.SportsentitiesManager_UpdateTranslationsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 internalrpc.SportsentitiesManager_UpdateTranslationsClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) internalrpc.SportsentitiesManager_UpdateTranslationsClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(internalrpc.SportsentitiesManager_UpdateTranslationsClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTranslationsRPC provides a mock function with given fields: ctx, in, opts
func (_m *SportsentitiesManagerClient) UpdateTranslationsRPC(ctx context.Context, in *internalrpc.TranslationMaps, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationMaps, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationMaps, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

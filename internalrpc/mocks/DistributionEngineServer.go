// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// DistributionEngineServer is an autogenerated mock type for the DistributionEngineServer type
type DistributionEngineServer struct {
	mock.Mock
}

// CreateMultipleCompetitionList provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) CreateMultipleCompetitionList(_a0 context.Context, _a1 *internalrpc.CompetitionList) (*internalrpc.CompetitionList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionList) *internalrpc.CompetitionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionList) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultipleCompetitionList provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) DeleteMultipleCompetitionList(_a0 context.Context, _a1 *internalrpc.SingleId) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SingleId) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SingleId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Evict provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) Evict(_a0 context.Context, _a1 *internalrpc.EvictionRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EvictionRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EvictionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultipleCompetitionListKey provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) GetMultipleCompetitionListKey(_a0 context.Context, _a1 *internalrpc.GetMultipleCompetitionListKeyRequest) (*internalrpc.GetMultipleCompetitionListKeyReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GetMultipleCompetitionListKeyReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMultipleCompetitionListKeyRequest) *internalrpc.GetMultipleCompetitionListKeyReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetMultipleCompetitionListKeyReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMultipleCompetitionListKeyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMultipleCompetitionLists provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) ReadMultipleCompetitionLists(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.CompetitionLists, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitionLists
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.CompetitionLists); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionLists)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMultipleCompetitionListTranslation provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) SetMultipleCompetitionListTranslation(_a0 context.Context, _a1 *internalrpc.SetMultipleCompetitionListTranslationRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetMultipleCompetitionListTranslationRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetMultipleCompetitionListTranslationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMultipleCompetitionList provides a mock function with given fields: _a0, _a1
func (_m *DistributionEngineServer) UpdateMultipleCompetitionList(_a0 context.Context, _a1 *internalrpc.CompetitionList) (*internalrpc.CompetitionList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionList) *internalrpc.CompetitionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionList) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

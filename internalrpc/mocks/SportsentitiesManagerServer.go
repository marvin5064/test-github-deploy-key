// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"
import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// SportsentitiesManagerServer is an autogenerated mock type for the SportsentitiesManagerServer type
type SportsentitiesManagerServer struct {
	mock.Mock
}

// AddCategoryOnEntity provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) AddCategoryOnEntity(_a0 context.Context, _a1 *internalrpc.AddCategoryOnEntityRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.AddCategoryOnEntityRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.AddCategoryOnEntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCompetitionProviderOutright provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) AddCompetitionProviderOutright(_a0 context.Context, _a1 *internalrpc.CompetitionProviderOutrightRequest) (*internalrpc.CompetitionProviderOutrightReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitionProviderOutrightReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CompetitionProviderOutrightRequest) *internalrpc.CompetitionProviderOutrightReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionProviderOutrightReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CompetitionProviderOutrightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelEvent provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) CancelEvent(_a0 context.Context, _a1 *internalrpc.CancelEventRequest) (*internalrpc.EventStateReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CancelEventRequest) *internalrpc.EventStateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CancelEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateCompetition provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) FetchOrCreateCompetition(_a0 context.Context, _a1 *internalrpc.FetchOrCreateCompetitionRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateCompetitor provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) FetchOrCreateCompetitor(_a0 context.Context, _a1 *internalrpc.FetchOrCreateCompetitorRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateEvent provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) FetchOrCreateEvent(_a0 context.Context, _a1 *internalrpc.FetchOrCreateEventRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateEventRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateGroup provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) FetchOrCreateGroup(_a0 context.Context, _a1 *internalrpc.FetchOrCreateGroupRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateGroupRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateGroupRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOrCreateSport provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) FetchOrCreateSport(_a0 context.Context, _a1 *internalrpc.FetchOrCreateSportRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateSportRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateSportRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveEvents provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetActiveEvents(_a0 context.Context, _a1 *internalrpc.ActiveEventRequest) (*internalrpc.Uint32List, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.Uint32List
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ActiveEventRequest) *internalrpc.Uint32List); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Uint32List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ActiveEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCancelledMarkets provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCancelledMarkets(_a0 context.Context, _a1 *internalrpc.CancelledMarketListRequest) (*api.CancelledMarketList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.CancelledMarketList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.CancelledMarketListRequest) *api.CancelledMarketList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CancelledMarketList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.CancelledMarketListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetition provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetition(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.CompetitionReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitionReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.CompetitionReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitionReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionByTags provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitionByTags(_a0 context.Context, _a1 *internalrpc.GetCompetitionByTagsRequest) (*internalrpc.GetCompetitionByTagsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GetCompetitionByTagsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetCompetitionByTagsRequest) *internalrpc.GetCompetitionByTagsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetCompetitionByTagsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetCompetitionByTagsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitionDetails provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitionDetails(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*api.Competition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Competition
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *api.Competition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Competition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitions provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitions(_a0 *empty.Empty, _a1 internalrpc.SportsentitiesManager_GetCompetitionsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*empty.Empty, internalrpc.SportsentitiesManager_GetCompetitionsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompetitionsRPC provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitionsRPC(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.GetCompetitionsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GetCompetitionsReply
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.GetCompetitionsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetCompetitionsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitor provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitor(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.CompetitorReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.CompetitorReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.CompetitorReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.CompetitorReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitorDetails provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitorDetails(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*api.Competitor, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Competitor
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *api.Competitor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Competitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompetitors provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitors(_a0 *empty.Empty, _a1 internalrpc.SportsentitiesManager_GetCompetitorsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*empty.Empty, internalrpc.SportsentitiesManager_GetCompetitorsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompetitorsRPC provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetCompetitorsRPC(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.GetCompetitorsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GetCompetitorsReply
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.GetCompetitorsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GetCompetitorsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetEvent(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.EventReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.EventReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.EventReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventCompetitors provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetEventCompetitors(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.Competitors, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.Competitors
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.Competitors); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Competitors)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventV2 provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetEventV2(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*api.Event, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Event
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *api.Event); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsV2 provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetEventsV2(_a0 context.Context, _a1 *internalrpc.EntitiesRequest) (*internalrpc.EventsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.EventsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntitiesRequest) *internalrpc.EventsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetGroup(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.GroupReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.GroupReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.GroupReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.GroupReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetList(_a0 context.Context, _a1 *internalrpc.ListRequest) (*internalrpc.Uint32List, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.Uint32List
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ListRequest) *internalrpc.Uint32List); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.Uint32List)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagingProvider provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetManagingProvider(_a0 context.Context, _a1 *api.Entity) (*internalrpc.ManagingProvider, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.ManagingProvider
	if rf, ok := ret.Get(0).(func(context.Context, *api.Entity) *internalrpc.ManagingProvider); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.ManagingProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *api.Entity) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedCompetitions provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetMatchedCompetitions(_a0 context.Context, _a1 *internalrpc.GetMatchedCompetitionsRequest) (*api.MatchedCompetitionList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MatchedCompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMatchedCompetitionsRequest) *api.MatchedCompetitionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMatchedCompetitionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedCompetitors provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetMatchedCompetitors(_a0 context.Context, _a1 *internalrpc.GetMatchedCompetitorsRequest) (*api.MatchedCompetitorList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MatchedCompetitorList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMatchedCompetitorsRequest) *api.MatchedCompetitorList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetitorList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMatchedCompetitorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchedEvents provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetMatchedEvents(_a0 context.Context, _a1 *internalrpc.GetMatchedEventsRequest) (*api.MatchedEventList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MatchedEventList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMatchedEventsRequest) *api.MatchedEventList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedEventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMatchedEventsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchingOverview provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetMatchingOverview(_a0 context.Context, _a1 *internalrpc.MatchingOverviewRequest) (*internalrpc.MatchingOverviewReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.MatchingOverviewReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchingOverviewRequest) *internalrpc.MatchingOverviewReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.MatchingOverviewReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchingOverviewRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchingOverviewV2 provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetMatchingOverviewV2(_a0 context.Context, _a1 *internalrpc.MatchingOverviewRequest) (*internalrpc.MatchingOverviewReplyV2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.MatchingOverviewReplyV2
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchingOverviewRequest) *internalrpc.MatchingOverviewReplyV2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.MatchingOverviewReplyV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchingOverviewRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMergedEntities provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetMergedEntities(_a0 context.Context, _a1 *internalrpc.GetMergedEntitiesRequest) (*api.MergedEntityList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MergedEntityList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetMergedEntitiesRequest) *api.MergedEntityList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MergedEntityList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetMergedEntitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutright provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetOutright(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.OutrightReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.OutrightReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.OutrightReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OutrightReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutrightV2 provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetOutrightV2(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*api.Outright, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.Outright
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *api.Outright); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Outright)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutrightsV2 provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetOutrightsV2(_a0 context.Context, _a1 *internalrpc.EntitiesRequest) (*internalrpc.OutrightsReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.OutrightsReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntitiesRequest) *internalrpc.OutrightsReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.OutrightsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntitiesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSport provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetSport(_a0 context.Context, _a1 *internalrpc.EntityRequest) (*internalrpc.SportReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.SportReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EntityRequest) *internalrpc.SportReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SportReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetStatus(_a0 context.Context, _a1 *internalrpc.StatusRequest) (*internalrpc.EventStateReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.StatusRequest) *internalrpc.EventStateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTranslation provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetTranslation(_a0 context.Context, _a1 *internalrpc.TranslationRequest) (*internalrpc.TranslationReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.TranslationReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationRequest) *internalrpc.TranslationReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.TranslationReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTranslationMap provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetTranslationMap(_a0 context.Context, _a1 *internalrpc.TranslationRequest) (*internalrpc.TranslationMap, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.TranslationMap
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationRequest) *internalrpc.TranslationMap); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.TranslationMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnmatchedCompetitions provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetUnmatchedCompetitions(_a0 context.Context, _a1 *internalrpc.GetUnmatchedCompetitionsRequest) (*api.UnmatchedCompetitionList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.UnmatchedCompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetUnmatchedCompetitionsRequest) *api.UnmatchedCompetitionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetUnmatchedCompetitionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnmatchedCompetitors provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetUnmatchedCompetitors(_a0 context.Context, _a1 *internalrpc.GetUnmatchedCompetitorsRequest) (*api.UnmatchedCompetitorList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.UnmatchedCompetitorList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetUnmatchedCompetitorsRequest) *api.UnmatchedCompetitorList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetitorList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetUnmatchedCompetitorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnmatchedEvents provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetUnmatchedEvents(_a0 context.Context, _a1 *internalrpc.GetUnmatchedEventsRequest) (*api.UnmatchedEventList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.UnmatchedEventList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetUnmatchedEventsRequest) *api.UnmatchedEventList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedEventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetUnmatchedEventsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingEvents provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) GetUpcomingEvents(_a0 context.Context, _a1 *internalrpc.UpcomingEventsRequest) (*internalrpc.UpcomingEventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.UpcomingEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpcomingEventsRequest) *internalrpc.UpcomingEventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.UpcomingEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpcomingEventsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) HealthCheck(_a0 context.Context, _a1 *empty.Empty) (*internalrpc.HealthCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.HealthCheckResponse
	if rf, ok := ret.Get(0).(func(context.Context, *empty.Empty) *internalrpc.HealthCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.HealthCheckResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *empty.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchCompetition provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) MatchCompetition(_a0 context.Context, _a1 *internalrpc.MatchCompetitionRequest) (*api.MatchedCompetition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MatchedCompetition
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchCompetitionRequest) *api.MatchedCompetition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchCompetitionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchCompetitor provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) MatchCompetitor(_a0 context.Context, _a1 *internalrpc.MatchCompetitorRequest) (*api.MatchedCompetitor, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MatchedCompetitor
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchCompetitorRequest) *api.MatchedCompetitor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedCompetitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchCompetitorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchEvent provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) MatchEvent(_a0 context.Context, _a1 *internalrpc.MatchEventRequest) (*api.MatchedEvent, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.MatchedEvent
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MatchEventRequest) *api.MatchedEvent); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MatchedEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MatchEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchOrCreateCompetition provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) MatchOrCreateCompetition(_a0 context.Context, _a1 *internalrpc.FetchOrCreateCompetitionRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MatchOrCreateCompetitor provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) MatchOrCreateCompetitor(_a0 context.Context, _a1 *internalrpc.FetchOrCreateCompetitorRequest) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.FetchOrCreateCompetitorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Merge provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) Merge(_a0 context.Context, _a1 *internalrpc.MergeRequest) (*internalrpc.SingleId, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.SingleId
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.MergeRequest) *internalrpc.SingleId); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SingleId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.MergeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyGroupsOnEntity provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) ModifyGroupsOnEntity(_a0 context.Context, _a1 *internalrpc.ModifyGroupsOnEntityRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.ModifyGroupsOnEntityRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.ModifyGroupsOnEntityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultEvent provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) ResultEvent(_a0 context.Context, _a1 *internalrpc.EventStateUpdateRequest) (*internalrpc.EventStateReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EventStateUpdateRequest) *internalrpc.EventStateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EventStateUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCompetitions provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) SearchCompetitions(_a0 context.Context, _a1 *internalrpc.SearchCompetitionsRequest) (*api.CompetitionList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.CompetitionList
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SearchCompetitionsRequest) *api.CompetitionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CompetitionList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SearchCompetitionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEventFeatureAvailability provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) SetEventFeatureAvailability(_a0 context.Context, _a1 *internalrpc.EventFeatureAvailabilityRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EventFeatureAvailabilityRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EventFeatureAvailabilityRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetManagingProvider provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) SetManagingProvider(_a0 context.Context, _a1 *internalrpc.SetManagingProviderRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.SetManagingProviderRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.SetManagingProviderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTranslation provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) SetTranslation(_a0 context.Context, _a1 *internalrpc.TranslationRequest) (*internalrpc.TranslationReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.TranslationReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationRequest) *internalrpc.TranslationReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.TranslationReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmatchCompetition provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UnmatchCompetition(_a0 context.Context, _a1 *internalrpc.UnmatchCompetitionRequest) (*api.UnmatchedCompetition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.UnmatchedCompetition
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmatchCompetitionRequest) *api.UnmatchedCompetition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmatchCompetitionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmatchCompetitor provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UnmatchCompetitor(_a0 context.Context, _a1 *internalrpc.UnmatchCompetitorRequest) (*api.UnmatchedCompetitor, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *api.UnmatchedCompetitor
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmatchCompetitorRequest) *api.UnmatchedCompetitor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UnmatchedCompetitor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmatchCompetitorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmerge provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) Unmerge(_a0 context.Context, _a1 *internalrpc.UnmergeRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmergeRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmergeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmergeSourceID provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UnmergeSourceID(_a0 context.Context, _a1 *internalrpc.UnmergeRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UnmergeRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UnmergeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UpdateEvent(_a0 context.Context, _a1 *internalrpc.UpdateEventRequest) (*internalrpc.UpdateEventReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.UpdateEventReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateEventRequest) *internalrpc.UpdateEventReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.UpdateEventReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventStatus provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UpdateEventStatus(_a0 context.Context, _a1 *internalrpc.EventStateUpdateRequest) (*internalrpc.EventStateReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.EventStateReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.EventStateUpdateRequest) *internalrpc.EventStateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EventStateReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.EventStateUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventV2 provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UpdateEventV2(_a0 context.Context, _a1 *internalrpc.UpdateEventRequestV2) (*internalrpc.FetchOrCreateEntityReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.FetchOrCreateEntityReply
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateEventRequestV2) *internalrpc.FetchOrCreateEntityReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.FetchOrCreateEntityReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateEventRequestV2) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetadata provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UpdateMetadata(_a0 context.Context, _a1 *internalrpc.UpdateMetadataRequest) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateMetadataRequest) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateMetadataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrCreateOutright provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UpdateOrCreateOutright(_a0 context.Context, _a1 *internalrpc.UpdateOrCreateOutrightRequest) (*internalrpc.UpdateOrCreateOutrightResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *internalrpc.UpdateOrCreateOutrightResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.UpdateOrCreateOutrightRequest) *internalrpc.UpdateOrCreateOutrightResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.UpdateOrCreateOutrightResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.UpdateOrCreateOutrightRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTranslations provides a mock function with given fields: _a0
func (_m *SportsentitiesManagerServer) UpdateTranslations(_a0 internalrpc.SportsentitiesManager_UpdateTranslationsServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(internalrpc.SportsentitiesManager_UpdateTranslationsServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTranslationsRPC provides a mock function with given fields: _a0, _a1
func (_m *SportsentitiesManagerServer) UpdateTranslationsRPC(_a0 context.Context, _a1 *internalrpc.TranslationMaps) (*empty.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.TranslationMaps) *empty.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.TranslationMaps) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "golang.org/x/net/context"
import empty "github.com/golang/protobuf/ptypes/empty"
import grpc "google.golang.org/grpc"
import internalrpc "github.com/bitgaming/go-protobuf-schema/internalrpc"
import mock "github.com/stretchr/testify/mock"

// RiskManagerClient is an autogenerated mock type for the RiskManagerClient type
type RiskManagerClient struct {
	mock.Mock
}

// GetAgentBettingOverlay provides a mock function with given fields: ctx, in, opts
func (_m *RiskManagerClient) GetAgentBettingOverlay(ctx context.Context, in *internalrpc.GetBettingOverlayRequest, opts ...grpc.CallOption) (*internalrpc.EntityBettingOverlays, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EntityBettingOverlays
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetBettingOverlayRequest, ...grpc.CallOption) *internalrpc.EntityBettingOverlays); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EntityBettingOverlays)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetBettingOverlayRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectChildrenBettingOverlays provides a mock function with given fields: ctx, in, opts
func (_m *RiskManagerClient) GetDirectChildrenBettingOverlays(ctx context.Context, in *internalrpc.GetBettingOverlayRequest, opts ...grpc.CallOption) (*internalrpc.BettingOverlays, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.BettingOverlays
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetBettingOverlayRequest, ...grpc.CallOption) *internalrpc.BettingOverlays); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.BettingOverlays)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetBettingOverlayRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlayerBettingOverlay provides a mock function with given fields: ctx, in, opts
func (_m *RiskManagerClient) GetPlayerBettingOverlay(ctx context.Context, in *internalrpc.GetBettingOverlayRequest, opts ...grpc.CallOption) (*internalrpc.EntityBettingOverlays, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.EntityBettingOverlays
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.GetBettingOverlayRequest, ...grpc.CallOption) *internalrpc.EntityBettingOverlays); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.EntityBettingOverlays)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.GetBettingOverlayRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBettingOverlay provides a mock function with given fields: ctx, in, opts
func (_m *RiskManagerClient) RemoveBettingOverlay(ctx context.Context, in *internalrpc.RemoveBettingOverlayRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *empty.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.RemoveBettingOverlayRequest, ...grpc.CallOption) *empty.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*empty.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.RemoveBettingOverlayRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBettingOverlay provides a mock function with given fields: ctx, in, opts
func (_m *RiskManagerClient) SetBettingOverlay(ctx context.Context, in *internalrpc.BettingOverlay, opts ...grpc.CallOption) (*internalrpc.SingleId, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalrpc.SingleId
	if rf, ok := ret.Get(0).(func(context.Context, *internalrpc.BettingOverlay, ...grpc.CallOption) *internalrpc.SingleId); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalrpc.SingleId)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalrpc.BettingOverlay, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

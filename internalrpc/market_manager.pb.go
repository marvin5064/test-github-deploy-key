// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/market_manager.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StakesAndOddsRequest struct {
	Provider        api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	CompetitionId   uint32       `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	EventId         uint32       `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SportId         uint32       `protobuf:"varint,11,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	MarketId        uint32       `protobuf:"varint,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome         string       `protobuf:"bytes,5,opt,name=outcome" json:"outcome,omitempty"`
	SpecialBetValue string       `protobuf:"bytes,6,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	Odds            float64      `protobuf:"fixed64,7,opt,name=odds" json:"odds,omitempty"`
	IsLive          bool         `protobuf:"varint,8,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	CurrencyPair    string       `protobuf:"bytes,9,opt,name=currency_pair,json=currencyPair" json:"currency_pair,omitempty"`
	StakeFactor     float64      `protobuf:"fixed64,10,opt,name=stake_factor,json=stakeFactor" json:"stake_factor,omitempty"`
	PlayerId        uint32       `protobuf:"varint,12,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	IsOutright      bool         `protobuf:"varint,13,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
	CategoryId      uint32       `protobuf:"varint,14,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *StakesAndOddsRequest) Reset()                    { *m = StakesAndOddsRequest{} }
func (m *StakesAndOddsRequest) String() string            { return proto.CompactTextString(m) }
func (*StakesAndOddsRequest) ProtoMessage()               {}
func (*StakesAndOddsRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *StakesAndOddsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *StakesAndOddsRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *StakesAndOddsRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *StakesAndOddsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *StakesAndOddsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *StakesAndOddsRequest) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *StakesAndOddsRequest) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *StakesAndOddsRequest) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *StakesAndOddsRequest) GetIsLive() bool {
	if m != nil {
		return m.IsLive
	}
	return false
}

func (m *StakesAndOddsRequest) GetCurrencyPair() string {
	if m != nil {
		return m.CurrencyPair
	}
	return ""
}

func (m *StakesAndOddsRequest) GetStakeFactor() float64 {
	if m != nil {
		return m.StakeFactor
	}
	return 0
}

func (m *StakesAndOddsRequest) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *StakesAndOddsRequest) GetIsOutright() bool {
	if m != nil {
		return m.IsOutright
	}
	return false
}

func (m *StakesAndOddsRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type LiabilityRequest struct {
	PlayerCurrency string `protobuf:"bytes,1,opt,name=player_currency,json=playerCurrency" json:"player_currency,omitempty"`
	CompetitionId  uint32 `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	MarketId       uint32 `protobuf:"varint,3,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	CategoryId     uint32 `protobuf:"varint,4,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *LiabilityRequest) Reset()                    { *m = LiabilityRequest{} }
func (m *LiabilityRequest) String() string            { return proto.CompactTextString(m) }
func (*LiabilityRequest) ProtoMessage()               {}
func (*LiabilityRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *LiabilityRequest) GetPlayerCurrency() string {
	if m != nil {
		return m.PlayerCurrency
	}
	return ""
}

func (m *LiabilityRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *LiabilityRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *LiabilityRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type LiabilityReply struct {
	Amount float64 `protobuf:"fixed64,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *LiabilityReply) Reset()                    { *m = LiabilityReply{} }
func (m *LiabilityReply) String() string            { return proto.CompactTextString(m) }
func (*LiabilityReply) ProtoMessage()               {}
func (*LiabilityReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *LiabilityReply) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type StakesAndOddsReply struct {
	MinStake     float64 `protobuf:"fixed64,1,opt,name=min_stake,json=minStake" json:"min_stake,omitempty"`
	MaxStake     float64 `protobuf:"fixed64,2,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	Odds         float64 `protobuf:"fixed64,3,opt,name=odds" json:"odds,omitempty"`
	IsDisabled   bool    `protobuf:"varint,4,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	IsRestricted bool    `protobuf:"varint,5,opt,name=is_restricted,json=isRestricted" json:"is_restricted,omitempty"`
}

func (m *StakesAndOddsReply) Reset()                    { *m = StakesAndOddsReply{} }
func (m *StakesAndOddsReply) String() string            { return proto.CompactTextString(m) }
func (*StakesAndOddsReply) ProtoMessage()               {}
func (*StakesAndOddsReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *StakesAndOddsReply) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *StakesAndOddsReply) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *StakesAndOddsReply) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *StakesAndOddsReply) GetIsDisabled() bool {
	if m != nil {
		return m.IsDisabled
	}
	return false
}

func (m *StakesAndOddsReply) GetIsRestricted() bool {
	if m != nil {
		return m.IsRestricted
	}
	return false
}

type IsRestrictedRequest struct {
	PlayerId   uint32 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	IsOutright bool   `protobuf:"varint,2,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
	EventId    uint32 `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId   uint32 `protobuf:"varint,4,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
}

func (m *IsRestrictedRequest) Reset()                    { *m = IsRestrictedRequest{} }
func (m *IsRestrictedRequest) String() string            { return proto.CompactTextString(m) }
func (*IsRestrictedRequest) ProtoMessage()               {}
func (*IsRestrictedRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *IsRestrictedRequest) GetPlayerId() uint32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *IsRestrictedRequest) GetIsOutright() bool {
	if m != nil {
		return m.IsOutright
	}
	return false
}

func (m *IsRestrictedRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *IsRestrictedRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

type IsRestrictedReply struct {
	IsRestricted bool `protobuf:"varint,1,opt,name=is_restricted,json=isRestricted" json:"is_restricted,omitempty"`
}

func (m *IsRestrictedReply) Reset()                    { *m = IsRestrictedReply{} }
func (m *IsRestrictedReply) String() string            { return proto.CompactTextString(m) }
func (*IsRestrictedReply) ProtoMessage()               {}
func (*IsRestrictedReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *IsRestrictedReply) GetIsRestricted() bool {
	if m != nil {
		return m.IsRestricted
	}
	return false
}

type GradeRequest struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CategoryId uint32 `protobuf:"varint,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *GradeRequest) Reset()                    { *m = GradeRequest{} }
func (m *GradeRequest) String() string            { return proto.CompactTextString(m) }
func (*GradeRequest) ProtoMessage()               {}
func (*GradeRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *GradeRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GradeRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type GradeReply struct {
	Grade uint32 `protobuf:"varint,1,opt,name=grade" json:"grade,omitempty"`
}

func (m *GradeReply) Reset()                    { *m = GradeReply{} }
func (m *GradeReply) String() string            { return proto.CompactTextString(m) }
func (*GradeReply) ProtoMessage()               {}
func (*GradeReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *GradeReply) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

type MultipleGradesReply struct {
	Grades map[uint32]*GradeReply `protobuf:"bytes,1,rep,name=grades" json:"grades,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MultipleGradesReply) Reset()                    { *m = MultipleGradesReply{} }
func (m *MultipleGradesReply) String() string            { return proto.CompactTextString(m) }
func (*MultipleGradesReply) ProtoMessage()               {}
func (*MultipleGradesReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *MultipleGradesReply) GetGrades() map[uint32]*GradeReply {
	if m != nil {
		return m.Grades
	}
	return nil
}

type PriorityRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PriorityRequest) Reset()                    { *m = PriorityRequest{} }
func (m *PriorityRequest) String() string            { return proto.CompactTextString(m) }
func (*PriorityRequest) ProtoMessage()               {}
func (*PriorityRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *PriorityRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PriorityReply struct {
	Priority uint32 `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
}

func (m *PriorityReply) Reset()                    { *m = PriorityReply{} }
func (m *PriorityReply) String() string            { return proto.CompactTextString(m) }
func (*PriorityReply) ProtoMessage()               {}
func (*PriorityReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *PriorityReply) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type OverlayedCompetitionSetting struct {
	Grade    uint32 `protobuf:"varint,1,opt,name=grade" json:"grade,omitempty"`
	Priority uint32 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
}

func (m *OverlayedCompetitionSetting) Reset()                    { *m = OverlayedCompetitionSetting{} }
func (m *OverlayedCompetitionSetting) String() string            { return proto.CompactTextString(m) }
func (*OverlayedCompetitionSetting) ProtoMessage()               {}
func (*OverlayedCompetitionSetting) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *OverlayedCompetitionSetting) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *OverlayedCompetitionSetting) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type OverlayedCompetitionSettingsReply struct {
	Settings map[uint32]*OverlayedCompetitionSetting `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *OverlayedCompetitionSettingsReply) Reset()         { *m = OverlayedCompetitionSettingsReply{} }
func (m *OverlayedCompetitionSettingsReply) String() string { return proto.CompactTextString(m) }
func (*OverlayedCompetitionSettingsReply) ProtoMessage()    {}
func (*OverlayedCompetitionSettingsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{12}
}

func (m *OverlayedCompetitionSettingsReply) GetSettings() map[uint32]*OverlayedCompetitionSetting {
	if m != nil {
		return m.Settings
	}
	return nil
}

type OutcomesRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *OutcomesRequest) Reset()                    { *m = OutcomesRequest{} }
func (m *OutcomesRequest) String() string            { return proto.CompactTextString(m) }
func (*OutcomesRequest) ProtoMessage()               {}
func (*OutcomesRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{13} }

func (m *OutcomesRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OutcomesReply struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *OutcomesReply) Reset()                    { *m = OutcomesReply{} }
func (m *OutcomesReply) String() string            { return proto.CompactTextString(m) }
func (*OutcomesReply) ProtoMessage()               {}
func (*OutcomesReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{14} }

func (m *OutcomesReply) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetMarketRequest struct {
	Id     uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Market *Market `protobuf:"bytes,2,opt,name=market" json:"market,omitempty"`
}

func (m *SetMarketRequest) Reset()                    { *m = SetMarketRequest{} }
func (m *SetMarketRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMarketRequest) ProtoMessage()               {}
func (*SetMarketRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{15} }

func (m *SetMarketRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetMarketRequest) GetMarket() *Market {
	if m != nil {
		return m.Market
	}
	return nil
}

type GetMarketRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetMarketRequest) Reset()                    { *m = GetMarketRequest{} }
func (m *GetMarketRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMarketRequest) ProtoMessage()               {}
func (*GetMarketRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{16} }

func (m *GetMarketRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Market struct {
	Tags     uint64  `protobuf:"varint,1,opt,name=tags" json:"tags,omitempty"`
	Priority float64 `protobuf:"fixed64,2,opt,name=priority" json:"priority,omitempty"`
	Grade    uint32  `protobuf:"varint,3,opt,name=grade" json:"grade,omitempty"`
}

func (m *Market) Reset()                    { *m = Market{} }
func (m *Market) String() string            { return proto.CompactTextString(m) }
func (*Market) ProtoMessage()               {}
func (*Market) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{17} }

func (m *Market) GetTags() uint64 {
	if m != nil {
		return m.Tags
	}
	return 0
}

func (m *Market) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Market) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

type CompetitionSettingRequest struct {
	Id       uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Priority float64 `protobuf:"fixed64,2,opt,name=priority" json:"priority,omitempty"`
	Grade    uint32  `protobuf:"varint,3,opt,name=grade" json:"grade,omitempty"`
}

func (m *CompetitionSettingRequest) Reset()                    { *m = CompetitionSettingRequest{} }
func (m *CompetitionSettingRequest) String() string            { return proto.CompactTextString(m) }
func (*CompetitionSettingRequest) ProtoMessage()               {}
func (*CompetitionSettingRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{18} }

func (m *CompetitionSettingRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionSettingRequest) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CompetitionSettingRequest) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

type CompetitionSettingReply struct {
	Id         uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SportId    uint32  `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CategoryId uint32  `protobuf:"varint,4,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	Priority   float64 `protobuf:"fixed64,5,opt,name=priority" json:"priority,omitempty"`
	Grade      uint32  `protobuf:"varint,6,opt,name=grade" json:"grade,omitempty"`
	CreatedAt  int64   `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt  int64   `protobuf:"varint,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *CompetitionSettingReply) Reset()                    { *m = CompetitionSettingReply{} }
func (m *CompetitionSettingReply) String() string            { return proto.CompactTextString(m) }
func (*CompetitionSettingReply) ProtoMessage()               {}
func (*CompetitionSettingReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{19} }

func (m *CompetitionSettingReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionSettingReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompetitionSettingReply) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *CompetitionSettingReply) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *CompetitionSettingReply) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CompetitionSettingReply) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *CompetitionSettingReply) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CompetitionSettingReply) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type CompetitionSettingList struct {
	Settings []*CompetitionSettingReply `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (m *CompetitionSettingList) Reset()                    { *m = CompetitionSettingList{} }
func (m *CompetitionSettingList) String() string            { return proto.CompactTextString(m) }
func (*CompetitionSettingList) ProtoMessage()               {}
func (*CompetitionSettingList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{20} }

func (m *CompetitionSettingList) GetSettings() []*CompetitionSettingReply {
	if m != nil {
		return m.Settings
	}
	return nil
}

type CategorySettingRequest struct {
	Id       uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Grade    uint32  `protobuf:"varint,2,opt,name=grade" json:"grade,omitempty"`
	Priority float64 `protobuf:"fixed64,3,opt,name=priority" json:"priority,omitempty"`
}

func (m *CategorySettingRequest) Reset()                    { *m = CategorySettingRequest{} }
func (m *CategorySettingRequest) String() string            { return proto.CompactTextString(m) }
func (*CategorySettingRequest) ProtoMessage()               {}
func (*CategorySettingRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{21} }

func (m *CategorySettingRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CategorySettingRequest) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *CategorySettingRequest) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type CategorySettingReply struct {
	Id        uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Grade     uint32  `protobuf:"varint,2,opt,name=grade" json:"grade,omitempty"`
	Priority  float64 `protobuf:"fixed64,5,opt,name=priority" json:"priority,omitempty"`
	CreatedAt int64   `protobuf:"varint,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt int64   `protobuf:"varint,4,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *CategorySettingReply) Reset()                    { *m = CategorySettingReply{} }
func (m *CategorySettingReply) String() string            { return proto.CompactTextString(m) }
func (*CategorySettingReply) ProtoMessage()               {}
func (*CategorySettingReply) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{22} }

func (m *CategorySettingReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CategorySettingReply) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *CategorySettingReply) GetPriority() float64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *CategorySettingReply) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CategorySettingReply) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type CategorySettingList struct {
	Settings []*CategorySettingReply `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (m *CategorySettingList) Reset()                    { *m = CategorySettingList{} }
func (m *CategorySettingList) String() string            { return proto.CompactTextString(m) }
func (*CategorySettingList) ProtoMessage()               {}
func (*CategorySettingList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{23} }

func (m *CategorySettingList) GetSettings() []*CategorySettingReply {
	if m != nil {
		return m.Settings
	}
	return nil
}

func init() {
	proto.RegisterType((*StakesAndOddsRequest)(nil), "internalrpc.StakesAndOddsRequest")
	proto.RegisterType((*LiabilityRequest)(nil), "internalrpc.LiabilityRequest")
	proto.RegisterType((*LiabilityReply)(nil), "internalrpc.LiabilityReply")
	proto.RegisterType((*StakesAndOddsReply)(nil), "internalrpc.StakesAndOddsReply")
	proto.RegisterType((*IsRestrictedRequest)(nil), "internalrpc.IsRestrictedRequest")
	proto.RegisterType((*IsRestrictedReply)(nil), "internalrpc.IsRestrictedReply")
	proto.RegisterType((*GradeRequest)(nil), "internalrpc.GradeRequest")
	proto.RegisterType((*GradeReply)(nil), "internalrpc.GradeReply")
	proto.RegisterType((*MultipleGradesReply)(nil), "internalrpc.MultipleGradesReply")
	proto.RegisterType((*PriorityRequest)(nil), "internalrpc.PriorityRequest")
	proto.RegisterType((*PriorityReply)(nil), "internalrpc.PriorityReply")
	proto.RegisterType((*OverlayedCompetitionSetting)(nil), "internalrpc.OverlayedCompetitionSetting")
	proto.RegisterType((*OverlayedCompetitionSettingsReply)(nil), "internalrpc.OverlayedCompetitionSettingsReply")
	proto.RegisterType((*OutcomesRequest)(nil), "internalrpc.OutcomesRequest")
	proto.RegisterType((*OutcomesReply)(nil), "internalrpc.OutcomesReply")
	proto.RegisterType((*SetMarketRequest)(nil), "internalrpc.SetMarketRequest")
	proto.RegisterType((*GetMarketRequest)(nil), "internalrpc.GetMarketRequest")
	proto.RegisterType((*Market)(nil), "internalrpc.Market")
	proto.RegisterType((*CompetitionSettingRequest)(nil), "internalrpc.CompetitionSettingRequest")
	proto.RegisterType((*CompetitionSettingReply)(nil), "internalrpc.CompetitionSettingReply")
	proto.RegisterType((*CompetitionSettingList)(nil), "internalrpc.CompetitionSettingList")
	proto.RegisterType((*CategorySettingRequest)(nil), "internalrpc.CategorySettingRequest")
	proto.RegisterType((*CategorySettingReply)(nil), "internalrpc.CategorySettingReply")
	proto.RegisterType((*CategorySettingList)(nil), "internalrpc.CategorySettingList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MarketManager service

type MarketManagerClient interface {
	GetStakesAndOdds(ctx context.Context, in *StakesAndOddsRequest, opts ...grpc.CallOption) (*StakesAndOddsReply, error)
	IsRestricted(ctx context.Context, in *IsRestrictedRequest, opts ...grpc.CallOption) (*IsRestrictedReply, error)
	GetMarketLiability(ctx context.Context, in *LiabilityRequest, opts ...grpc.CallOption) (*LiabilityReply, error)
	GetMarketGrade(ctx context.Context, in *GradeRequest, opts ...grpc.CallOption) (*GradeReply, error)
	GetCompetitionGrade(ctx context.Context, in *GradeRequest, opts ...grpc.CallOption) (*GradeReply, error)
	GetCompetitionGrades(ctx context.Context, in *Uint32List, opts ...grpc.CallOption) (*MultipleGradesReply, error)
	GetMarketPriority(ctx context.Context, in *PriorityRequest, opts ...grpc.CallOption) (*PriorityReply, error)
	GetCompetitionPriority(ctx context.Context, in *PriorityRequest, opts ...grpc.CallOption) (*PriorityReply, error)
	GetMarketOutcomes(ctx context.Context, in *OutcomesRequest, opts ...grpc.CallOption) (*OutcomesReply, error)
	GetLockingStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LockingStatus, error)
	SetLockingStatus(ctx context.Context, in *SetLockingStatusRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	SetMarket(ctx context.Context, in *SetMarketRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*Market, error)
	// GetOverlayedCompetitionSettings can only get at max 100 overlayed competition settings each time
	GetOverlayedCompetitionSettings(ctx context.Context, in *Uint32List, opts ...grpc.CallOption) (*OverlayedCompetitionSettingsReply, error)
	GetCompetitionSettings(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CompetitionSettingList, error)
	SetCompetitionSetting(ctx context.Context, in *CompetitionSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DeleteCompetitionSetting(ctx context.Context, in *CompetitionSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetCategorySettings(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CategorySettingList, error)
	SetCategorySetting(ctx context.Context, in *CategorySettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DeleteCategorySetting(ctx context.Context, in *CategorySettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	EnableEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	DisableEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	EvictEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// return all available entities if input data is nil
	GetDisabledEntities(ctx context.Context, in *api.EntitiesTypeArray, opts ...grpc.CallOption) (*api.Entities, error)
}

type marketManagerClient struct {
	cc *grpc.ClientConn
}

func NewMarketManagerClient(cc *grpc.ClientConn) MarketManagerClient {
	return &marketManagerClient{cc}
}

func (c *marketManagerClient) GetStakesAndOdds(ctx context.Context, in *StakesAndOddsRequest, opts ...grpc.CallOption) (*StakesAndOddsReply, error) {
	out := new(StakesAndOddsReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetStakesAndOdds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) IsRestricted(ctx context.Context, in *IsRestrictedRequest, opts ...grpc.CallOption) (*IsRestrictedReply, error) {
	out := new(IsRestrictedReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/IsRestricted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetMarketLiability(ctx context.Context, in *LiabilityRequest, opts ...grpc.CallOption) (*LiabilityReply, error) {
	out := new(LiabilityReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetMarketLiability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetMarketGrade(ctx context.Context, in *GradeRequest, opts ...grpc.CallOption) (*GradeReply, error) {
	out := new(GradeReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetMarketGrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetCompetitionGrade(ctx context.Context, in *GradeRequest, opts ...grpc.CallOption) (*GradeReply, error) {
	out := new(GradeReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetCompetitionGrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetCompetitionGrades(ctx context.Context, in *Uint32List, opts ...grpc.CallOption) (*MultipleGradesReply, error) {
	out := new(MultipleGradesReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetCompetitionGrades", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetMarketPriority(ctx context.Context, in *PriorityRequest, opts ...grpc.CallOption) (*PriorityReply, error) {
	out := new(PriorityReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetMarketPriority", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetCompetitionPriority(ctx context.Context, in *PriorityRequest, opts ...grpc.CallOption) (*PriorityReply, error) {
	out := new(PriorityReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetCompetitionPriority", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetMarketOutcomes(ctx context.Context, in *OutcomesRequest, opts ...grpc.CallOption) (*OutcomesReply, error) {
	out := new(OutcomesReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetMarketOutcomes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetLockingStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LockingStatus, error) {
	out := new(LockingStatus)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetLockingStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) SetLockingStatus(ctx context.Context, in *SetLockingStatusRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/SetLockingStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) SetMarket(ctx context.Context, in *SetMarketRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/SetMarket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*Market, error) {
	out := new(Market)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetMarket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetOverlayedCompetitionSettings(ctx context.Context, in *Uint32List, opts ...grpc.CallOption) (*OverlayedCompetitionSettingsReply, error) {
	out := new(OverlayedCompetitionSettingsReply)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetOverlayedCompetitionSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetCompetitionSettings(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CompetitionSettingList, error) {
	out := new(CompetitionSettingList)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetCompetitionSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) SetCompetitionSetting(ctx context.Context, in *CompetitionSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/SetCompetitionSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) DeleteCompetitionSetting(ctx context.Context, in *CompetitionSettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/DeleteCompetitionSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetCategorySettings(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CategorySettingList, error) {
	out := new(CategorySettingList)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetCategorySettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) SetCategorySetting(ctx context.Context, in *CategorySettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/SetCategorySetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) DeleteCategorySetting(ctx context.Context, in *CategorySettingRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/DeleteCategorySetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) EnableEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/EnableEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) DisableEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/DisableEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) EvictEntity(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/EvictEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketManagerClient) GetDisabledEntities(ctx context.Context, in *api.EntitiesTypeArray, opts ...grpc.CallOption) (*api.Entities, error) {
	out := new(api.Entities)
	err := grpc.Invoke(ctx, "/internalrpc.MarketManager/GetDisabledEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MarketManager service

type MarketManagerServer interface {
	GetStakesAndOdds(context.Context, *StakesAndOddsRequest) (*StakesAndOddsReply, error)
	IsRestricted(context.Context, *IsRestrictedRequest) (*IsRestrictedReply, error)
	GetMarketLiability(context.Context, *LiabilityRequest) (*LiabilityReply, error)
	GetMarketGrade(context.Context, *GradeRequest) (*GradeReply, error)
	GetCompetitionGrade(context.Context, *GradeRequest) (*GradeReply, error)
	GetCompetitionGrades(context.Context, *Uint32List) (*MultipleGradesReply, error)
	GetMarketPriority(context.Context, *PriorityRequest) (*PriorityReply, error)
	GetCompetitionPriority(context.Context, *PriorityRequest) (*PriorityReply, error)
	GetMarketOutcomes(context.Context, *OutcomesRequest) (*OutcomesReply, error)
	GetLockingStatus(context.Context, *google_protobuf1.Empty) (*LockingStatus, error)
	SetLockingStatus(context.Context, *SetLockingStatusRequest) (*google_protobuf1.Empty, error)
	SetMarket(context.Context, *SetMarketRequest) (*google_protobuf1.Empty, error)
	GetMarket(context.Context, *GetMarketRequest) (*Market, error)
	// GetOverlayedCompetitionSettings can only get at max 100 overlayed competition settings each time
	GetOverlayedCompetitionSettings(context.Context, *Uint32List) (*OverlayedCompetitionSettingsReply, error)
	GetCompetitionSettings(context.Context, *google_protobuf1.Empty) (*CompetitionSettingList, error)
	SetCompetitionSetting(context.Context, *CompetitionSettingRequest) (*google_protobuf1.Empty, error)
	DeleteCompetitionSetting(context.Context, *CompetitionSettingRequest) (*google_protobuf1.Empty, error)
	GetCategorySettings(context.Context, *google_protobuf1.Empty) (*CategorySettingList, error)
	SetCategorySetting(context.Context, *CategorySettingRequest) (*google_protobuf1.Empty, error)
	DeleteCategorySetting(context.Context, *CategorySettingRequest) (*google_protobuf1.Empty, error)
	EnableEntity(context.Context, *api.Entity) (*google_protobuf1.Empty, error)
	DisableEntity(context.Context, *api.Entity) (*google_protobuf1.Empty, error)
	EvictEntity(context.Context, *api.Entity) (*google_protobuf1.Empty, error)
	// return all available entities if input data is nil
	GetDisabledEntities(context.Context, *api.EntitiesTypeArray) (*api.Entities, error)
}

func RegisterMarketManagerServer(s *grpc.Server, srv MarketManagerServer) {
	s.RegisterService(&_MarketManager_serviceDesc, srv)
}

func _MarketManager_GetStakesAndOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakesAndOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetStakesAndOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetStakesAndOdds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetStakesAndOdds(ctx, req.(*StakesAndOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_IsRestricted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRestrictedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).IsRestricted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/IsRestricted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).IsRestricted(ctx, req.(*IsRestrictedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetMarketLiability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetMarketLiability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetMarketLiability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetMarketLiability(ctx, req.(*LiabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetMarketGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetMarketGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetMarketGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetMarketGrade(ctx, req.(*GradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetCompetitionGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetCompetitionGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetCompetitionGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetCompetitionGrade(ctx, req.(*GradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetCompetitionGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetCompetitionGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetCompetitionGrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetCompetitionGrades(ctx, req.(*Uint32List))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetMarketPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetMarketPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetMarketPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetMarketPriority(ctx, req.(*PriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetCompetitionPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetCompetitionPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetCompetitionPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetCompetitionPriority(ctx, req.(*PriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetMarketOutcomes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutcomesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetMarketOutcomes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetMarketOutcomes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetMarketOutcomes(ctx, req.(*OutcomesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetLockingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetLockingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetLockingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetLockingStatus(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_SetLockingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLockingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).SetLockingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/SetLockingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).SetLockingStatus(ctx, req.(*SetLockingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_SetMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).SetMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/SetMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).SetMarket(ctx, req.(*SetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetMarket(ctx, req.(*GetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetOverlayedCompetitionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uint32List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetOverlayedCompetitionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetOverlayedCompetitionSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetOverlayedCompetitionSettings(ctx, req.(*Uint32List))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetCompetitionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetCompetitionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetCompetitionSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetCompetitionSettings(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_SetCompetitionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).SetCompetitionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/SetCompetitionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).SetCompetitionSetting(ctx, req.(*CompetitionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_DeleteCompetitionSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).DeleteCompetitionSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/DeleteCompetitionSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).DeleteCompetitionSetting(ctx, req.(*CompetitionSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetCategorySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetCategorySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetCategorySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetCategorySettings(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_SetCategorySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategorySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).SetCategorySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/SetCategorySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).SetCategorySetting(ctx, req.(*CategorySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_DeleteCategorySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategorySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).DeleteCategorySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/DeleteCategorySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).DeleteCategorySetting(ctx, req.(*CategorySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_EnableEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).EnableEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/EnableEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).EnableEntity(ctx, req.(*api.Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_DisableEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).DisableEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/DisableEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).DisableEntity(ctx, req.(*api.Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_EvictEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).EvictEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/EvictEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).EvictEntity(ctx, req.(*api.Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketManager_GetDisabledEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.EntitiesTypeArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketManagerServer).GetDisabledEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.MarketManager/GetDisabledEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketManagerServer).GetDisabledEntities(ctx, req.(*api.EntitiesTypeArray))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.MarketManager",
	HandlerType: (*MarketManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStakesAndOdds",
			Handler:    _MarketManager_GetStakesAndOdds_Handler,
		},
		{
			MethodName: "IsRestricted",
			Handler:    _MarketManager_IsRestricted_Handler,
		},
		{
			MethodName: "GetMarketLiability",
			Handler:    _MarketManager_GetMarketLiability_Handler,
		},
		{
			MethodName: "GetMarketGrade",
			Handler:    _MarketManager_GetMarketGrade_Handler,
		},
		{
			MethodName: "GetCompetitionGrade",
			Handler:    _MarketManager_GetCompetitionGrade_Handler,
		},
		{
			MethodName: "GetCompetitionGrades",
			Handler:    _MarketManager_GetCompetitionGrades_Handler,
		},
		{
			MethodName: "GetMarketPriority",
			Handler:    _MarketManager_GetMarketPriority_Handler,
		},
		{
			MethodName: "GetCompetitionPriority",
			Handler:    _MarketManager_GetCompetitionPriority_Handler,
		},
		{
			MethodName: "GetMarketOutcomes",
			Handler:    _MarketManager_GetMarketOutcomes_Handler,
		},
		{
			MethodName: "GetLockingStatus",
			Handler:    _MarketManager_GetLockingStatus_Handler,
		},
		{
			MethodName: "SetLockingStatus",
			Handler:    _MarketManager_SetLockingStatus_Handler,
		},
		{
			MethodName: "SetMarket",
			Handler:    _MarketManager_SetMarket_Handler,
		},
		{
			MethodName: "GetMarket",
			Handler:    _MarketManager_GetMarket_Handler,
		},
		{
			MethodName: "GetOverlayedCompetitionSettings",
			Handler:    _MarketManager_GetOverlayedCompetitionSettings_Handler,
		},
		{
			MethodName: "GetCompetitionSettings",
			Handler:    _MarketManager_GetCompetitionSettings_Handler,
		},
		{
			MethodName: "SetCompetitionSetting",
			Handler:    _MarketManager_SetCompetitionSetting_Handler,
		},
		{
			MethodName: "DeleteCompetitionSetting",
			Handler:    _MarketManager_DeleteCompetitionSetting_Handler,
		},
		{
			MethodName: "GetCategorySettings",
			Handler:    _MarketManager_GetCategorySettings_Handler,
		},
		{
			MethodName: "SetCategorySetting",
			Handler:    _MarketManager_SetCategorySetting_Handler,
		},
		{
			MethodName: "DeleteCategorySetting",
			Handler:    _MarketManager_DeleteCategorySetting_Handler,
		},
		{
			MethodName: "EnableEntity",
			Handler:    _MarketManager_EnableEntity_Handler,
		},
		{
			MethodName: "DisableEntity",
			Handler:    _MarketManager_DisableEntity_Handler,
		},
		{
			MethodName: "EvictEntity",
			Handler:    _MarketManager_EvictEntity_Handler,
		},
		{
			MethodName: "GetDisabledEntities",
			Handler:    _MarketManager_GetDisabledEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/market_manager.proto",
}

func init() { proto.RegisterFile("internalrpc/market_manager.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xb6, 0xec, 0xc4, 0xb1, 0x8f, 0x63, 0x37, 0xdd, 0xa4, 0xa9, 0xa3, 0x50, 0xe2, 0xa8, 0x2d,
	0x18, 0x0a, 0xce, 0x4c, 0x0a, 0x4c, 0x87, 0x81, 0x42, 0xda, 0xa4, 0x21, 0x43, 0x4a, 0x8a, 0x5c,
	0x4a, 0x61, 0x60, 0x3c, 0xb2, 0xb4, 0x35, 0x3b, 0x91, 0x25, 0x21, 0xad, 0x33, 0xf5, 0x33, 0x70,
	0xcf, 0x35, 0x97, 0xdc, 0xf1, 0x34, 0xbc, 0x01, 0x37, 0x3c, 0x05, 0xcc, 0xfe, 0xc8, 0xd6, 0xca,
	0x92, 0xdd, 0x0c, 0xe5, 0xce, 0x7b, 0x7e, 0xbe, 0x3d, 0xe7, 0x3b, 0x67, 0xf7, 0xac, 0x0c, 0x2d,
	0xe2, 0x51, 0x1c, 0x7a, 0x96, 0x1b, 0x06, 0xf6, 0xde, 0xd0, 0x0a, 0xcf, 0x31, 0xed, 0x0d, 0x2d,
	0xcf, 0x1a, 0xe0, 0xb0, 0x13, 0x84, 0x3e, 0xf5, 0x51, 0x2d, 0x61, 0xa1, 0x6f, 0x0f, 0x7c, 0x7f,
	0xe0, 0xe2, 0x3d, 0xae, 0xea, 0x8f, 0x5e, 0xec, 0xe1, 0x61, 0x40, 0xc7, 0xc2, 0x52, 0xdf, 0x4a,
	0x62, 0x0d, 0xb0, 0x87, 0x43, 0x62, 0x4b, 0xd5, 0xad, 0xa4, 0x2a, 0x0a, 0xfc, 0x90, 0x46, 0x7d,
	0xdf, 0x3f, 0xef, 0x0d, 0x7d, 0x8f, 0x50, 0x5f, 0x6e, 0xa5, 0xef, 0x4c, 0x35, 0x7b, 0x56, 0x40,
	0x12, 0x86, 0xc2, 0xc0, 0xf8, 0xb3, 0x04, 0x1b, 0x5d, 0x6a, 0x9d, 0xe3, 0xe8, 0xc0, 0x73, 0xce,
	0x1c, 0x27, 0x32, 0xf1, 0xcf, 0x23, 0x1c, 0x51, 0xf4, 0x0e, 0x54, 0x82, 0xd0, 0xbf, 0x20, 0x0e,
	0x0e, 0x9b, 0x5a, 0x4b, 0x6b, 0x37, 0xf6, 0xeb, 0x1d, 0x2b, 0x20, 0x9d, 0x27, 0x52, 0x68, 0x4e,
	0xd4, 0xe8, 0x36, 0x34, 0x6c, 0x7f, 0x18, 0x60, 0x4a, 0x28, 0xf1, 0xbd, 0x1e, 0x71, 0x9a, 0xc5,
	0x96, 0xd6, 0xae, 0x9b, 0xf5, 0x84, 0xf4, 0xc4, 0x41, 0x5b, 0x50, 0xc1, 0x17, 0xd8, 0xa3, 0xcc,
	0xa0, 0xc4, 0x0d, 0x56, 0xf8, 0x5a, 0xa8, 0x78, 0x64, 0x4c, 0x55, 0x13, 0x2a, 0xbe, 0x3e, 0x71,
	0xd0, 0x36, 0x54, 0x25, 0x89, 0xc4, 0x69, 0x2e, 0x71, 0x5d, 0x45, 0x08, 0x4e, 0x1c, 0xd4, 0x84,
	0x15, 0x7f, 0x44, 0x6d, 0x7f, 0x88, 0x9b, 0xcb, 0x2d, 0xad, 0x5d, 0x35, 0xe3, 0x25, 0x7a, 0x17,
	0xae, 0x46, 0x01, 0xb6, 0x89, 0xe5, 0xf6, 0xfa, 0x98, 0xf6, 0x2e, 0x2c, 0x77, 0x84, 0x9b, 0x65,
	0x6e, 0x73, 0x45, 0x2a, 0x1e, 0x60, 0xfa, 0x8c, 0x89, 0x11, 0x82, 0x25, 0xdf, 0x71, 0xa2, 0xe6,
	0x4a, 0x4b, 0x6b, 0x6b, 0x26, 0xff, 0x8d, 0xae, 0xc3, 0x0a, 0x89, 0x7a, 0x2e, 0xb9, 0xc0, 0xcd,
	0x4a, 0x4b, 0x6b, 0x57, 0xcc, 0x32, 0x89, 0x4e, 0xc9, 0x05, 0x46, 0x37, 0xa1, 0x6e, 0x8f, 0xc2,
	0x10, 0x7b, 0xf6, 0xb8, 0x17, 0x58, 0x24, 0x6c, 0x56, 0x39, 0xe8, 0x6a, 0x2c, 0x7c, 0x62, 0x91,
	0x10, 0xed, 0xc2, 0x6a, 0xc4, 0x48, 0xed, 0xbd, 0xb0, 0x6c, 0xea, 0x87, 0x4d, 0xe0, 0xc8, 0x35,
	0x2e, 0x7b, 0xc4, 0x45, 0x2c, 0xaf, 0xc0, 0xb5, 0xc6, 0x38, 0x64, 0x79, 0xad, 0x8a, 0xbc, 0x84,
	0xe0, 0xc4, 0x41, 0x3b, 0x50, 0x23, 0x51, 0xcf, 0x1f, 0xd1, 0x90, 0x0c, 0x7e, 0xa2, 0xcd, 0x3a,
	0x8f, 0x00, 0x48, 0x74, 0x26, 0x25, 0xcc, 0xc0, 0xb6, 0x28, 0x1e, 0xf8, 0xe1, 0x98, 0xf9, 0x37,
	0xb8, 0x3f, 0xc4, 0xa2, 0x13, 0xc7, 0xf8, 0x4d, 0x83, 0xb5, 0x53, 0x62, 0xf5, 0x89, 0x4b, 0xe8,
	0x38, 0xae, 0xe9, 0xdb, 0x70, 0x45, 0xee, 0x19, 0x47, 0xcb, 0x4b, 0x5b, 0x35, 0x1b, 0x42, 0xfc,
	0x50, 0x4a, 0x5f, 0xb5, 0xa2, 0x4a, 0x6d, 0x4a, 0xa9, 0xda, 0xa4, 0x42, 0x5c, 0x9a, 0x09, 0xb1,
	0x0d, 0x8d, 0x44, 0x84, 0x81, 0x3b, 0x46, 0x9b, 0x50, 0xb6, 0x86, 0xfe, 0xc8, 0xa3, 0x3c, 0x2c,
	0xcd, 0x94, 0x2b, 0xe3, 0x77, 0x0d, 0x50, 0xaa, 0x49, 0x99, 0x39, 0xdb, 0x9e, 0x78, 0x3d, 0xce,
	0xaa, 0xf4, 0xa8, 0x0c, 0x89, 0xc7, 0x2d, 0x45, 0x6c, 0x2f, 0xa5, 0xb2, 0x28, 0x95, 0xd6, 0x4b,
	0xa1, 0x8c, 0x2b, 0x5e, 0x4a, 0x54, 0x5c, 0x70, 0xee, 0x90, 0xc8, 0xea, 0xbb, 0x58, 0xc4, 0xcb,
	0x39, 0x3f, 0x94, 0x12, 0x56, 0x79, 0x12, 0xf5, 0x42, 0x1c, 0xd1, 0x90, 0xd8, 0x14, 0x3b, 0xbc,
	0xe5, 0x2a, 0xe6, 0x2a, 0x89, 0xcc, 0x89, 0xcc, 0xf8, 0x45, 0x83, 0xf5, 0x93, 0x84, 0x20, 0xa6,
	0x5e, 0x29, 0xb7, 0x36, 0xbf, 0xdc, 0xc5, 0x99, 0x72, 0xcf, 0x39, 0x3a, 0xf3, 0xce, 0x87, 0x71,
	0x0f, 0xae, 0xaa, 0xc1, 0x30, 0xda, 0x66, 0xf2, 0xd0, 0x32, 0xf2, 0xf8, 0x0c, 0x56, 0x8f, 0x43,
	0xcb, 0xc1, 0x71, 0xfc, 0x0d, 0x28, 0x4e, 0x02, 0x2f, 0x92, 0x99, 0xea, 0x16, 0x67, 0xaa, 0x6b,
	0x00, 0x48, 0x00, 0xb6, 0xe7, 0x06, 0x2c, 0x0f, 0xd8, 0x4a, 0x22, 0x88, 0x85, 0xf1, 0x87, 0x06,
	0xeb, 0x8f, 0x47, 0x2e, 0x25, 0x81, 0x8b, 0xb9, 0xb1, 0x2c, 0xec, 0x21, 0x94, 0xb9, 0x41, 0xd4,
	0xd4, 0x5a, 0xa5, 0x76, 0x6d, 0xff, 0xbd, 0x4e, 0xe2, 0xb2, 0xeb, 0x64, 0x78, 0x74, 0xc4, 0xef,
	0x23, 0x8f, 0x86, 0x63, 0x53, 0xfa, 0xea, 0x26, 0xd4, 0x12, 0x62, 0xb4, 0x06, 0xa5, 0x73, 0x3c,
	0x96, 0x01, 0xb0, 0x9f, 0xe8, 0x7d, 0x58, 0x16, 0xf7, 0x02, 0x8b, 0xbe, 0xb6, 0x7f, 0x5d, 0xd9,
	0x65, 0x1a, 0xbc, 0x29, 0xac, 0x3e, 0x2e, 0xde, 0xd3, 0x8c, 0x5d, 0xb8, 0xf2, 0x24, 0x24, 0x7e,
	0x98, 0x38, 0x54, 0x29, 0x66, 0x8c, 0x3b, 0x50, 0x9f, 0x9a, 0xb0, 0x6c, 0x74, 0x76, 0x93, 0x0a,
	0xc1, 0xa4, 0xf2, 0x72, 0x6d, 0x9c, 0xc1, 0xf6, 0xd9, 0x05, 0x0e, 0x59, 0x23, 0x38, 0x0f, 0xa7,
	0x67, 0xab, 0x8b, 0x29, 0x25, 0xde, 0x20, 0x9b, 0x36, 0x05, 0xb0, 0x98, 0x02, 0xfc, 0x4b, 0x83,
	0xdd, 0x39, 0x88, 0x92, 0xe0, 0xe7, 0x50, 0x89, 0xa4, 0x40, 0x52, 0xfc, 0x89, 0x92, 0xfc, 0x42,
	0x84, 0x4e, 0xbc, 0x12, 0x94, 0x4f, 0xd0, 0x74, 0x0c, 0x75, 0x45, 0x95, 0x41, 0xfb, 0x7d, 0x95,
	0xf6, 0xf6, 0xab, 0xee, 0x9c, 0xaa, 0xc3, 0x99, 0xb8, 0xe9, 0xa3, 0xbc, 0x3a, 0xdc, 0x86, 0xfa,
	0xd4, 0x44, 0xf6, 0xa0, 0xd8, 0x97, 0x65, 0x5c, 0x95, 0x68, 0xc6, 0x19, 0xac, 0x75, 0x31, 0x7d,
	0xcc, 0x4f, 0x4c, 0x5e, 0xb3, 0xdf, 0x81, 0xb2, 0x38, 0x52, 0x32, 0xe4, 0x75, 0xb5, 0x1f, 0x85,
	0xaf, 0x34, 0x31, 0x0c, 0x58, 0x3b, 0x5e, 0x00, 0x68, 0x7c, 0x05, 0x65, 0x61, 0xc0, 0x6e, 0x22,
	0x6a, 0xf1, 0x2a, 0x68, 0xed, 0x25, 0x93, 0xff, 0x9e, 0xa9, 0xaf, 0x36, 0xad, 0xef, 0xb4, 0x23,
	0x4a, 0xc9, 0x83, 0xf4, 0x23, 0x6c, 0x65, 0xf0, 0x95, 0x93, 0xcd, 0xe5, 0xe1, 0xff, 0xd6, 0xe0,
	0x7a, 0x16, 0x3e, 0x63, 0x35, 0x8d, 0x8e, 0x60, 0xc9, 0xb3, 0x86, 0xa2, 0xb8, 0x55, 0x93, 0xff,
	0x56, 0xc6, 0x7b, 0x49, 0x1d, 0xef, 0x8b, 0xa6, 0x84, 0x12, 0xed, 0x72, 0x5e, 0xb4, 0xe5, 0xe4,
	0xf1, 0xb8, 0x01, 0x60, 0x87, 0xd8, 0xa2, 0xd8, 0xe9, 0x59, 0x94, 0x0f, 0xf5, 0x92, 0x59, 0x95,
	0x92, 0x03, 0xca, 0xd4, 0xa3, 0xc0, 0x89, 0xd5, 0x15, 0xa1, 0x96, 0x92, 0x03, 0x6a, 0x7c, 0x0f,
	0x9b, 0xb3, 0xa9, 0x9e, 0x92, 0x88, 0xa2, 0xcf, 0x67, 0x0e, 0xcd, 0x2d, 0xa5, 0x0f, 0x72, 0x18,
	0x9a, 0x1e, 0x0e, 0x8e, 0x2d, 0x33, 0x5b, 0x50, 0xa3, 0x49, 0x66, 0xc5, 0xbc, 0x83, 0x5f, 0x52,
	0xb9, 0x30, 0x7e, 0xd5, 0x60, 0x63, 0x06, 0x3c, 0xab, 0x40, 0x8b, 0xa1, 0xd3, 0x34, 0xab, 0x84,
	0x96, 0xe6, 0x13, 0xba, 0x94, 0x26, 0xf4, 0x29, 0xac, 0xa7, 0xe2, 0xe2, 0x6c, 0x7e, 0x3a, 0xc3,
	0xe6, 0xae, 0xca, 0x66, 0x46, 0x2e, 0x53, 0x2a, 0xf7, 0xff, 0x69, 0x40, 0x5d, 0x1c, 0xa1, 0xc7,
	0xe2, 0x6d, 0x8d, 0x9e, 0xf3, 0x73, 0xa7, 0x3c, 0x13, 0x90, 0x0a, 0x99, 0xf5, 0xce, 0xd5, 0x77,
	0xe6, 0x99, 0x04, 0xee, 0xd8, 0x28, 0x20, 0x13, 0x56, 0x93, 0x53, 0x14, 0xb5, 0x14, 0x97, 0x8c,
	0x69, 0xaf, 0xbf, 0x39, 0xc7, 0x22, 0xc6, 0x44, 0x93, 0x5b, 0x62, 0xf2, 0x0a, 0x42, 0x37, 0x14,
	0xbf, 0xf4, 0xfb, 0x4d, 0xdf, 0xce, 0x53, 0x0b, 0xcc, 0x47, 0xd0, 0x98, 0x60, 0xf2, 0xf1, 0x85,
	0xb6, 0xb2, 0x46, 0x9a, 0xc0, 0xca, 0x9b, 0x76, 0x46, 0x01, 0x7d, 0x09, 0xeb, 0xc7, 0x98, 0x26,
	0xda, 0xf9, 0xbf, 0x80, 0x75, 0x61, 0x23, 0x03, 0x2c, 0x42, 0xaa, 0xcb, 0x37, 0xc4, 0xa3, 0x77,
	0xf7, 0x59, 0x63, 0xe8, 0xad, 0x45, 0xc3, 0xde, 0x28, 0xa0, 0x33, 0xb8, 0x3a, 0xc9, 0x34, 0x1e,
	0xb6, 0xe8, 0x0d, 0xc5, 0x31, 0x35, 0xa6, 0x75, 0x3d, 0x47, 0x2b, 0x00, 0x9f, 0xc2, 0xa6, 0x1a,
	0xe5, 0x6b, 0x41, 0x4d, 0x86, 0x19, 0xcf, 0xa2, 0x14, 0x60, 0x6a, 0x8a, 0xa5, 0x00, 0x95, 0x01,
	0x66, 0x14, 0xd0, 0x17, 0xbc, 0xc7, 0x4f, 0x7d, 0xfb, 0x9c, 0x78, 0x83, 0x2e, 0xb5, 0xe8, 0x28,
	0x42, 0x9b, 0x1d, 0xf1, 0x05, 0xd9, 0x89, 0xbf, 0x20, 0x3b, 0x47, 0xec, 0x0b, 0x32, 0x85, 0xa4,
	0xf8, 0xf0, 0xfe, 0x63, 0x63, 0x4f, 0x45, 0x52, 0xaf, 0xb3, 0xb4, 0x3a, 0x8e, 0x30, 0x67, 0x3f,
	0xa3, 0x80, 0x0e, 0xa1, 0x3a, 0x19, 0xa5, 0xa9, 0x56, 0x4e, 0x8f, 0xd8, 0x39, 0x28, 0x07, 0x50,
	0x3d, 0xce, 0x41, 0x49, 0xcf, 0x55, 0x3d, 0x6b, 0x10, 0x1b, 0x05, 0xe4, 0xc2, 0xce, 0x31, 0xa6,
	0xf3, 0x1e, 0x31, 0xf9, 0xed, 0xd7, 0xb9, 0xdc, 0x43, 0xc8, 0x28, 0xa0, 0x6f, 0xd3, 0xbd, 0x33,
	0xd9, 0x24, 0xaf, 0x34, 0x37, 0x17, 0xcc, 0x0d, 0x16, 0x88, 0x51, 0x40, 0xdf, 0xc1, 0xb5, 0x6e,
	0x16, 0x30, 0x7a, 0x6b, 0xe1, 0xdc, 0x59, 0x44, 0xf2, 0x0f, 0xd0, 0x3c, 0xc4, 0x2e, 0xa6, 0xf8,
	0x7f, 0x41, 0xff, 0x5a, 0x5c, 0x20, 0xea, 0x0d, 0x9e, 0x4f, 0x47, 0x6b, 0xde, 0xc5, 0x2f, 0xb9,
	0xe8, 0x02, 0xea, 0xce, 0x40, 0xa2, 0x9b, 0xf3, 0x47, 0xc6, 0xa2, 0x38, 0x9f, 0xc1, 0x35, 0xc9,
	0xc2, 0xeb, 0xc5, 0xfd, 0x10, 0x56, 0x8f, 0x3c, 0xf6, 0xd1, 0x78, 0xe4, 0x51, 0x76, 0x87, 0xd4,
	0xf8, 0x3f, 0x27, 0x62, 0x31, 0xc7, 0xed, 0x23, 0xa8, 0xcb, 0x8f, 0xcd, 0xcb, 0xf9, 0x7d, 0x00,
	0xb5, 0xa3, 0x0b, 0x62, 0xd3, 0xcb, 0x79, 0xdd, 0xe7, 0x45, 0x8a, 0xbf, 0x6e, 0xb9, 0x39, 0xc1,
	0xac, 0x48, 0x13, 0x6f, 0x82, 0xa3, 0xa7, 0xe3, 0x00, 0x1f, 0x84, 0xa1, 0x35, 0xd6, 0xeb, 0x8a,
	0xdc, 0x28, 0x3c, 0xb8, 0x01, 0xdb, 0xb6, 0x3f, 0xec, 0xf4, 0x09, 0x1d, 0x58, 0x43, 0xec, 0x5a,
	0xfd, 0x28, 0x49, 0x5a, 0xbf, 0xcc, 0x37, 0xbc, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31,
	0x8d, 0xce, 0xf7, 0x0f, 0x13, 0x00, 0x00,
}

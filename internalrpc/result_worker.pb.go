// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/result_worker.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResultWorker service

type ResultWorkerClient interface {
	GetCancelledMarkets(ctx context.Context, in *CancelledMarketListRequest, opts ...grpc.CallOption) (*api.CancelledMarketList, error)
}

type resultWorkerClient struct {
	cc *grpc.ClientConn
}

func NewResultWorkerClient(cc *grpc.ClientConn) ResultWorkerClient {
	return &resultWorkerClient{cc}
}

func (c *resultWorkerClient) GetCancelledMarkets(ctx context.Context, in *CancelledMarketListRequest, opts ...grpc.CallOption) (*api.CancelledMarketList, error) {
	out := new(api.CancelledMarketList)
	err := grpc.Invoke(ctx, "/internalrpc.ResultWorker/GetCancelledMarkets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResultWorker service

type ResultWorkerServer interface {
	GetCancelledMarkets(context.Context, *CancelledMarketListRequest) (*api.CancelledMarketList, error)
}

func RegisterResultWorkerServer(s *grpc.Server, srv ResultWorkerServer) {
	s.RegisterService(&_ResultWorker_serviceDesc, srv)
}

func _ResultWorker_GetCancelledMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelledMarketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultWorkerServer).GetCancelledMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.ResultWorker/GetCancelledMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultWorkerServer).GetCancelledMarkets(ctx, req.(*CancelledMarketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResultWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.ResultWorker",
	HandlerType: (*ResultWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCancelledMarkets",
			Handler:    _ResultWorker_GetCancelledMarkets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/result_worker.proto",
}

func init() { proto.RegisterFile("internalrpc/result_worker.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8e, 0x31, 0x8b, 0xc2, 0x40,
	0x10, 0x46, 0xaf, 0xba, 0x62, 0xef, 0xaa, 0x5c, 0x73, 0x44, 0x24, 0x60, 0xa3, 0xd5, 0x06, 0xf4,
	0x1f, 0x68, 0x61, 0xa3, 0x4d, 0x1a, 0xc1, 0x26, 0xcc, 0xc6, 0x21, 0xac, 0xd9, 0xec, 0xae, 0x33,
	0x13, 0xfc, 0xfb, 0x42, 0x82, 0xb8, 0x88, 0xe5, 0xf0, 0x3d, 0xde, 0x1b, 0x55, 0x58, 0x2f, 0x48,
	0x1e, 0x1c, 0xc5, 0xa6, 0x24, 0xe4, 0xc1, 0x49, 0x7d, 0x0f, 0xd4, 0x21, 0xe9, 0x48, 0x41, 0x42,
	0xf6, 0x93, 0x00, 0x79, 0xc1, 0x31, 0x90, 0xb0, 0x09, 0xa1, 0x2b, 0x21, 0xda, 0xf2, 0x75, 0x4e,
	0x74, 0xbe, 0x4a, 0x75, 0xd3, 0x8a, 0x5e, 0xac, 0x58, 0xe4, 0xba, 0x07, 0x0f, 0xed, 0xd3, 0xbb,
	0xbe, 0xaa, 0xdf, 0x6a, 0xcc, 0x9d, 0xc6, 0x5a, 0x76, 0x56, 0x7f, 0x7b, 0x94, 0x1d, 0xf8, 0x06,
	0x9d, 0xc3, 0xcb, 0x11, 0xa8, 0x43, 0xe1, 0x6c, 0xa9, 0x13, 0xa3, 0x7e, 0x9b, 0x0f, 0x96, 0xa5,
	0xc2, 0xdb, 0x80, 0x2c, 0xf9, 0xbf, 0x86, 0x68, 0x3f, 0x01, 0x8b, 0xaf, 0xed, 0x5c, 0xcd, 0x9a,
	0xd0, 0x6b, 0x63, 0xa5, 0x85, 0x1e, 0x1d, 0x18, 0x4e, 0xad, 0xe6, 0x7b, 0xfc, 0x68, 0xf3, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x74, 0x88, 0x62, 0x0c, 0x01, 0x00, 0x00,
}

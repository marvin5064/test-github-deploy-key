// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/generic.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}
var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{3, 0}
}

type Uint32List struct {
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *Uint32List) Reset()                    { *m = Uint32List{} }
func (m *Uint32List) String() string            { return proto.CompactTextString(m) }
func (*Uint32List) ProtoMessage()               {}
func (*Uint32List) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Uint32List) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type SingleId struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SingleId) Reset()                    { *m = SingleId{} }
func (m *SingleId) String() string            { return proto.CompactTextString(m) }
func (*SingleId) ProtoMessage()               {}
func (*SingleId) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SingleId) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Double struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *Double) Reset()                    { *m = Double{} }
func (m *Double) String() string            { return proto.CompactTextString(m) }
func (*Double) ProtoMessage()               {}
func (*Double) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Double) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type HealthCheckResponse struct {
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,enum=internalrpc.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_UNKNOWN
}

func init() {
	proto.RegisterType((*Uint32List)(nil), "internalrpc.Uint32List")
	proto.RegisterType((*SingleId)(nil), "internalrpc.SingleId")
	proto.RegisterType((*Double)(nil), "internalrpc.Double")
	proto.RegisterType((*HealthCheckResponse)(nil), "internalrpc.HealthCheckResponse")
	proto.RegisterEnum("internalrpc.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
}

func init() { proto.RegisterFile("internalrpc/generic.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x14, 0xa3, 0x4c, 0x48, 0x0d, 0xab, 0x87, 0xaa, 0x58, 0x4a, 0x4e, 0x3d, 0xad,
	0xd0, 0xde, 0x3c, 0xfa, 0x5d, 0x94, 0x14, 0x36, 0x56, 0x8f, 0xb2, 0x49, 0x86, 0x74, 0x70, 0xbb,
	0x09, 0xd9, 0x4d, 0xff, 0x8b, 0xff, 0x56, 0x1a, 0x15, 0x22, 0x78, 0x9b, 0x77, 0x9e, 0x79, 0xe0,
	0x65, 0xe0, 0x94, 0x8c, 0xc3, 0xc6, 0x28, 0xdd, 0xd4, 0xf9, 0x65, 0x89, 0x06, 0x1b, 0xca, 0x45,
	0xdd, 0x54, 0xae, 0xe2, 0x41, 0x0f, 0xc5, 0x63, 0x80, 0x15, 0x19, 0x37, 0x9f, 0x3d, 0x93, 0x75,
	0x3c, 0x82, 0x01, 0x15, 0x76, 0xc4, 0x26, 0x83, 0x69, 0x28, 0x77, 0x63, 0x7c, 0x06, 0x87, 0x29,
	0x99, 0x52, 0xe3, 0xa2, 0xe0, 0x43, 0xf0, 0xa8, 0x18, 0xb1, 0x09, 0x9b, 0x86, 0xd2, 0xa3, 0x22,
	0x1e, 0x83, 0x7f, 0x5b, 0xb5, 0x99, 0x46, 0x7e, 0x02, 0xfb, 0x5b, 0xa5, 0x5b, 0xec, 0x20, 0x93,
	0xdf, 0x21, 0xfe, 0x64, 0x70, 0xfc, 0x88, 0x4a, 0xbb, 0xf5, 0xcd, 0x1a, 0xf3, 0x0f, 0x89, 0xb6,
	0xae, 0x8c, 0x45, 0x7e, 0x0f, 0xbe, 0x75, 0xca, 0xb5, 0xb6, 0x3b, 0x1f, 0xce, 0x84, 0xe8, 0x35,
	0x12, 0xff, 0x18, 0x22, 0xc5, 0x66, 0x4b, 0xa6, 0x4c, 0x3b, 0x4b, 0xfe, 0xd8, 0xf1, 0x15, 0x84,
	0x7f, 0x00, 0x0f, 0xe0, 0x60, 0x95, 0x3c, 0x25, 0xcb, 0xb7, 0x24, 0xda, 0xdb, 0x85, 0xf4, 0x4e,
	0xbe, 0x2e, 0x92, 0x87, 0x88, 0xf1, 0x23, 0x08, 0x92, 0xe5, 0xcb, 0xfb, 0xef, 0xc2, 0xbb, 0xbe,
	0x80, 0xf3, 0xbc, 0xda, 0x88, 0x8c, 0x5c, 0xa9, 0x36, 0xa8, 0x55, 0x66, 0xfb, 0x25, 0x32, 0xbf,
	0x7b, 0xd5, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xf9, 0x3e, 0xc8, 0x47, 0x01, 0x00, 0x00,
}

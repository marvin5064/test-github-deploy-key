// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/pinnacle_broker.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bet "github.com/bitgaming/go-protobuf-schema/sportsbook/bet"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Selection struct {
	EventId         uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome         string `protobuf:"bytes,3,opt,name=outcome" json:"outcome,omitempty"`
	SpecialBetValue string `protobuf:"bytes,4,opt,name=special_bet_value,json=specialBetValue" json:"special_bet_value,omitempty"`
	IsOutright      bool   `protobuf:"varint,5,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Selection) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *Selection) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Selection) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *Selection) GetSpecialBetValue() string {
	if m != nil {
		return m.SpecialBetValue
	}
	return ""
}

func (m *Selection) GetIsOutright() bool {
	if m != nil {
		return m.IsOutright
	}
	return false
}

// added for pinnacle fetch odds
type Line struct {
	Selections []*bet.BetSelection `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty"`
}

func (m *Line) Reset()                    { *m = Line{} }
func (m *Line) String() string            { return proto.CompactTextString(m) }
func (*Line) ProtoMessage()               {}
func (*Line) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Line) GetSelections() []*bet.BetSelection {
	if m != nil {
		return m.Selections
	}
	return nil
}

func init() {
	proto.RegisterType((*Selection)(nil), "internalrpc.Selection")
	proto.RegisterType((*Line)(nil), "internalrpc.Line")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PinnacleBroker service

type PinnacleBrokerClient interface {
	GetMaxStakeFor(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Double, error)
	FetchLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*Line, error)
}

type pinnacleBrokerClient struct {
	cc *grpc.ClientConn
}

func NewPinnacleBrokerClient(cc *grpc.ClientConn) PinnacleBrokerClient {
	return &pinnacleBrokerClient{cc}
}

func (c *pinnacleBrokerClient) GetMaxStakeFor(ctx context.Context, in *Selection, opts ...grpc.CallOption) (*Double, error) {
	out := new(Double)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleBroker/GetMaxStakeFor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleBrokerClient) FetchLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*Line, error) {
	out := new(Line)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleBroker/FetchLine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PinnacleBroker service

type PinnacleBrokerServer interface {
	GetMaxStakeFor(context.Context, *Selection) (*Double, error)
	FetchLine(context.Context, *Line) (*Line, error)
}

func RegisterPinnacleBrokerServer(s *grpc.Server, srv PinnacleBrokerServer) {
	s.RegisterService(&_PinnacleBroker_serviceDesc, srv)
}

func _PinnacleBroker_GetMaxStakeFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleBrokerServer).GetMaxStakeFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleBroker/GetMaxStakeFor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleBrokerServer).GetMaxStakeFor(ctx, req.(*Selection))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleBroker_FetchLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleBrokerServer).FetchLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleBroker/FetchLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleBrokerServer).FetchLine(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

var _PinnacleBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.PinnacleBroker",
	HandlerType: (*PinnacleBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaxStakeFor",
			Handler:    _PinnacleBroker_GetMaxStakeFor_Handler,
		},
		{
			MethodName: "FetchLine",
			Handler:    _PinnacleBroker_FetchLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/pinnacle_broker.proto",
}

func init() { proto.RegisterFile("internalrpc/pinnacle_broker.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4d, 0x6b, 0xe3, 0x30,
	0x10, 0x86, 0xf1, 0x26, 0xbb, 0x89, 0x15, 0x36, 0x4b, 0xb4, 0x50, 0x1c, 0x87, 0x52, 0x37, 0x27,
	0xd3, 0x83, 0x43, 0xd3, 0x53, 0x0f, 0xbd, 0x98, 0x92, 0x12, 0x68, 0x69, 0x71, 0xa0, 0x57, 0x23,
	0x29, 0x43, 0x22, 0x6c, 0x4b, 0x46, 0x1a, 0x87, 0x9e, 0xfb, 0x73, 0xfa, 0x2b, 0x8b, 0x9d, 0x0f,
	0x1c, 0x7a, 0xf0, 0x61, 0x9e, 0xf7, 0xc1, 0xcc, 0xbc, 0x22, 0xd7, 0x52, 0x21, 0x18, 0xc5, 0x72,
	0x53, 0x8a, 0x59, 0x29, 0x95, 0x62, 0x22, 0x87, 0x94, 0x1b, 0x9d, 0x81, 0x89, 0x4a, 0xa3, 0x51,
	0xd3, 0x41, 0x4b, 0xf1, 0xc7, 0x6d, 0x7f, 0x03, 0x0a, 0x8c, 0x14, 0x7b, 0xcf, 0xf7, 0x6c, 0xa9,
	0x0d, 0x5a, 0xae, 0x75, 0x36, 0xe3, 0x80, 0xf5, 0xb7, 0x4f, 0xa6, 0x5f, 0x0e, 0x71, 0x57, 0x90,
	0x83, 0x40, 0xa9, 0x15, 0x1d, 0x93, 0x3e, 0xec, 0x40, 0x61, 0x2a, 0xd7, 0x9e, 0x13, 0x38, 0xe1,
	0xdf, 0xa4, 0xd7, 0xcc, 0xcb, 0x35, 0x9d, 0x10, 0xb7, 0x60, 0x26, 0x83, 0x26, 0xfb, 0xd5, 0x64,
	0xfd, 0x3d, 0x58, 0xae, 0xa9, 0x47, 0x7a, 0xba, 0x42, 0xa1, 0x0b, 0xf0, 0x3a, 0x81, 0x13, 0xba,
	0xc9, 0x71, 0xa4, 0x37, 0x64, 0x64, 0x4b, 0x10, 0x92, 0xe5, 0x29, 0x07, 0x4c, 0x77, 0x2c, 0xaf,
	0xc0, 0xeb, 0x36, 0xce, 0xbf, 0x43, 0x10, 0x03, 0xbe, 0xd7, 0x98, 0x5e, 0x91, 0x81, 0xb4, 0xa9,
	0xae, 0xd0, 0xc8, 0xcd, 0x16, 0xbd, 0xdf, 0x81, 0x13, 0xf6, 0x13, 0x22, 0xed, 0xeb, 0x81, 0x4c,
	0xef, 0x49, 0xf7, 0x59, 0x2a, 0xa0, 0xb7, 0x84, 0xd8, 0xe3, 0xce, 0xd6, 0x73, 0x82, 0x4e, 0x38,
	0x98, 0x8f, 0xa2, 0xfa, 0xa8, 0x18, 0xf0, 0x74, 0x4d, 0xd2, 0x92, 0xe6, 0x9f, 0x0e, 0x19, 0xbe,
	0x1d, 0x3a, 0x8c, 0x9b, 0x0a, 0xe9, 0x03, 0x19, 0x3e, 0x01, 0xbe, 0xb0, 0x8f, 0x15, 0xb2, 0x0c,
	0x16, 0xda, 0xd0, 0x8b, 0xa8, 0x55, 0x61, 0x74, 0xfa, 0x91, 0xff, 0xff, 0x8c, 0x3f, 0xea, 0x8a,
	0xe7, 0xf5, 0x12, 0xee, 0x02, 0x50, 0x6c, 0x9b, 0x8d, 0x46, 0x67, 0x46, 0x8d, 0xfc, 0x9f, 0x28,
	0xbe, 0x24, 0x13, 0xa1, 0x8b, 0x88, 0x4b, 0xdc, 0xb0, 0x02, 0x72, 0xc6, 0x6d, 0xdb, 0xe1, 0x7f,
	0x9a, 0x27, 0xb9, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xff, 0x48, 0xdd, 0x10, 0xf9, 0x01, 0x00,
	0x00,
}

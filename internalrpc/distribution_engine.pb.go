// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/distribution_engine.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MultipleCompetition struct {
	CompetitionId uint32      `protobuf:"varint,1,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	EventIds      *Uint32List `protobuf:"bytes,2,opt,name=event_ids,json=eventIds" json:"event_ids,omitempty"`
}

func (m *MultipleCompetition) Reset()                    { *m = MultipleCompetition{} }
func (m *MultipleCompetition) String() string            { return proto.CompactTextString(m) }
func (*MultipleCompetition) ProtoMessage()               {}
func (*MultipleCompetition) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MultipleCompetition) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *MultipleCompetition) GetEventIds() *Uint32List {
	if m != nil {
		return m.EventIds
	}
	return nil
}

type MultipleCompetitionList struct {
	SportId      uint32                 `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	Competitions []*MultipleCompetition `protobuf:"bytes,2,rep,name=competitions" json:"competitions,omitempty"`
}

func (m *MultipleCompetitionList) Reset()                    { *m = MultipleCompetitionList{} }
func (m *MultipleCompetitionList) String() string            { return proto.CompactTextString(m) }
func (*MultipleCompetitionList) ProtoMessage()               {}
func (*MultipleCompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MultipleCompetitionList) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *MultipleCompetitionList) GetCompetitions() []*MultipleCompetition {
	if m != nil {
		return m.Competitions
	}
	return nil
}

type EvictionRequest struct {
	// Id of event to be evicted
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *EvictionRequest) Reset()                    { *m = EvictionRequest{} }
func (m *EvictionRequest) String() string            { return proto.CompactTextString(m) }
func (*EvictionRequest) ProtoMessage()               {}
func (*EvictionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *EvictionRequest) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetMultipleCompetitionListKeyRequest struct {
	ListId uint32 `protobuf:"varint,1,opt,name=list_id,json=listId" json:"list_id,omitempty"`
}

func (m *GetMultipleCompetitionListKeyRequest) Reset()         { *m = GetMultipleCompetitionListKeyRequest{} }
func (m *GetMultipleCompetitionListKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetMultipleCompetitionListKeyRequest) ProtoMessage()    {}
func (*GetMultipleCompetitionListKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{3}
}

func (m *GetMultipleCompetitionListKeyRequest) GetListId() uint32 {
	if m != nil {
		return m.ListId
	}
	return 0
}

type GetMultipleCompetitionListKeyReply struct {
	ListId uint32 `protobuf:"varint,1,opt,name=list_id,json=listId" json:"list_id,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetMultipleCompetitionListKeyReply) Reset()         { *m = GetMultipleCompetitionListKeyReply{} }
func (m *GetMultipleCompetitionListKeyReply) String() string { return proto.CompactTextString(m) }
func (*GetMultipleCompetitionListKeyReply) ProtoMessage()    {}
func (*GetMultipleCompetitionListKeyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{4}
}

func (m *GetMultipleCompetitionListKeyReply) GetListId() uint32 {
	if m != nil {
		return m.ListId
	}
	return 0
}

func (m *GetMultipleCompetitionListKeyReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CompetitionList struct {
	Id                        uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Key                       string  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	SportId                   uint32  `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CategoryIds               []int64 `protobuf:"varint,4,rep,packed,name=category_ids,json=categoryIds" json:"category_ids,omitempty"`
	MinCompetitionPriority    uint32  `protobuf:"varint,5,opt,name=min_competition_priority,json=minCompetitionPriority" json:"min_competition_priority,omitempty"`
	MinEventCount             uint32  `protobuf:"varint,6,opt,name=min_event_count,json=minEventCount" json:"min_event_count,omitempty"`
	MinActiveCompetitionCount uint32  `protobuf:"varint,7,opt,name=min_active_competition_count,json=minActiveCompetitionCount" json:"min_active_competition_count,omitempty"`
	EventTimeRangeHours       uint32  `protobuf:"varint,8,opt,name=event_time_range_hours,json=eventTimeRangeHours" json:"event_time_range_hours,omitempty"`
	ExcludeLive               bool    `protobuf:"varint,9,opt,name=exclude_live,json=excludeLive" json:"exclude_live,omitempty"`
	Name                      string  `protobuf:"bytes,12,opt,name=name" json:"name,omitempty"`
	CreatedAt                 uint32  `protobuf:"varint,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt                 uint32  `protobuf:"varint,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *CompetitionList) Reset()                    { *m = CompetitionList{} }
func (m *CompetitionList) String() string            { return proto.CompactTextString(m) }
func (*CompetitionList) ProtoMessage()               {}
func (*CompetitionList) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *CompetitionList) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionList) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CompetitionList) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *CompetitionList) GetCategoryIds() []int64 {
	if m != nil {
		return m.CategoryIds
	}
	return nil
}

func (m *CompetitionList) GetMinCompetitionPriority() uint32 {
	if m != nil {
		return m.MinCompetitionPriority
	}
	return 0
}

func (m *CompetitionList) GetMinEventCount() uint32 {
	if m != nil {
		return m.MinEventCount
	}
	return 0
}

func (m *CompetitionList) GetMinActiveCompetitionCount() uint32 {
	if m != nil {
		return m.MinActiveCompetitionCount
	}
	return 0
}

func (m *CompetitionList) GetEventTimeRangeHours() uint32 {
	if m != nil {
		return m.EventTimeRangeHours
	}
	return 0
}

func (m *CompetitionList) GetExcludeLive() bool {
	if m != nil {
		return m.ExcludeLive
	}
	return false
}

func (m *CompetitionList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompetitionList) GetCreatedAt() uint32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CompetitionList) GetUpdatedAt() uint32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type CompetitionLists struct {
	Lists []*CompetitionList `protobuf:"bytes,1,rep,name=lists" json:"lists,omitempty"`
}

func (m *CompetitionLists) Reset()                    { *m = CompetitionLists{} }
func (m *CompetitionLists) String() string            { return proto.CompactTextString(m) }
func (*CompetitionLists) ProtoMessage()               {}
func (*CompetitionLists) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *CompetitionLists) GetLists() []*CompetitionList {
	if m != nil {
		return m.Lists
	}
	return nil
}

type SetMultipleCompetitionListTranslationRequest struct {
	Id           uint32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Translations map[string]string `protobuf:"bytes,2,rep,name=translations" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SetMultipleCompetitionListTranslationRequest) Reset() {
	*m = SetMultipleCompetitionListTranslationRequest{}
}
func (m *SetMultipleCompetitionListTranslationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SetMultipleCompetitionListTranslationRequest) ProtoMessage() {}
func (*SetMultipleCompetitionListTranslationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{7}
}

func (m *SetMultipleCompetitionListTranslationRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetMultipleCompetitionListTranslationRequest) GetTranslations() map[string]string {
	if m != nil {
		return m.Translations
	}
	return nil
}

func init() {
	proto.RegisterType((*MultipleCompetition)(nil), "internalrpc.MultipleCompetition")
	proto.RegisterType((*MultipleCompetitionList)(nil), "internalrpc.MultipleCompetitionList")
	proto.RegisterType((*EvictionRequest)(nil), "internalrpc.EvictionRequest")
	proto.RegisterType((*GetMultipleCompetitionListKeyRequest)(nil), "internalrpc.GetMultipleCompetitionListKeyRequest")
	proto.RegisterType((*GetMultipleCompetitionListKeyReply)(nil), "internalrpc.GetMultipleCompetitionListKeyReply")
	proto.RegisterType((*CompetitionList)(nil), "internalrpc.CompetitionList")
	proto.RegisterType((*CompetitionLists)(nil), "internalrpc.CompetitionLists")
	proto.RegisterType((*SetMultipleCompetitionListTranslationRequest)(nil), "internalrpc.SetMultipleCompetitionListTranslationRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DistributionEngine service

type DistributionEngineClient interface {
	// Manually evict an event from TRADING to POST_TRADING state
	//
	// Input: EvictionRequest with Ids array of events to be evicted
	Evict(ctx context.Context, in *EvictionRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	SetMultipleCompetitionListTranslation(ctx context.Context, in *SetMultipleCompetitionListTranslationRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetMultipleCompetitionListKey(ctx context.Context, in *GetMultipleCompetitionListKeyRequest, opts ...grpc.CallOption) (*GetMultipleCompetitionListKeyReply, error)
	CreateMultipleCompetitionList(ctx context.Context, in *CompetitionList, opts ...grpc.CallOption) (*CompetitionList, error)
	ReadMultipleCompetitionLists(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CompetitionLists, error)
	UpdateMultipleCompetitionList(ctx context.Context, in *CompetitionList, opts ...grpc.CallOption) (*CompetitionList, error)
	DeleteMultipleCompetitionList(ctx context.Context, in *SingleId, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type distributionEngineClient struct {
	cc *grpc.ClientConn
}

func NewDistributionEngineClient(cc *grpc.ClientConn) DistributionEngineClient {
	return &distributionEngineClient{cc}
}

func (c *distributionEngineClient) Evict(ctx context.Context, in *EvictionRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/Evict", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionEngineClient) SetMultipleCompetitionListTranslation(ctx context.Context, in *SetMultipleCompetitionListTranslationRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/SetMultipleCompetitionListTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionEngineClient) GetMultipleCompetitionListKey(ctx context.Context, in *GetMultipleCompetitionListKeyRequest, opts ...grpc.CallOption) (*GetMultipleCompetitionListKeyReply, error) {
	out := new(GetMultipleCompetitionListKeyReply)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/GetMultipleCompetitionListKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionEngineClient) CreateMultipleCompetitionList(ctx context.Context, in *CompetitionList, opts ...grpc.CallOption) (*CompetitionList, error) {
	out := new(CompetitionList)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/CreateMultipleCompetitionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionEngineClient) ReadMultipleCompetitionLists(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CompetitionLists, error) {
	out := new(CompetitionLists)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/ReadMultipleCompetitionLists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionEngineClient) UpdateMultipleCompetitionList(ctx context.Context, in *CompetitionList, opts ...grpc.CallOption) (*CompetitionList, error) {
	out := new(CompetitionList)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/UpdateMultipleCompetitionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionEngineClient) DeleteMultipleCompetitionList(ctx context.Context, in *SingleId, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.DistributionEngine/DeleteMultipleCompetitionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistributionEngine service

type DistributionEngineServer interface {
	// Manually evict an event from TRADING to POST_TRADING state
	//
	// Input: EvictionRequest with Ids array of events to be evicted
	Evict(context.Context, *EvictionRequest) (*google_protobuf1.Empty, error)
	SetMultipleCompetitionListTranslation(context.Context, *SetMultipleCompetitionListTranslationRequest) (*google_protobuf1.Empty, error)
	GetMultipleCompetitionListKey(context.Context, *GetMultipleCompetitionListKeyRequest) (*GetMultipleCompetitionListKeyReply, error)
	CreateMultipleCompetitionList(context.Context, *CompetitionList) (*CompetitionList, error)
	ReadMultipleCompetitionLists(context.Context, *google_protobuf1.Empty) (*CompetitionLists, error)
	UpdateMultipleCompetitionList(context.Context, *CompetitionList) (*CompetitionList, error)
	DeleteMultipleCompetitionList(context.Context, *SingleId) (*google_protobuf1.Empty, error)
}

func RegisterDistributionEngineServer(s *grpc.Server, srv DistributionEngineServer) {
	s.RegisterService(&_DistributionEngine_serviceDesc, srv)
}

func _DistributionEngine_Evict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).Evict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/Evict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).Evict(ctx, req.(*EvictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionEngine_SetMultipleCompetitionListTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMultipleCompetitionListTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).SetMultipleCompetitionListTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/SetMultipleCompetitionListTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).SetMultipleCompetitionListTranslation(ctx, req.(*SetMultipleCompetitionListTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionEngine_GetMultipleCompetitionListKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultipleCompetitionListKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).GetMultipleCompetitionListKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/GetMultipleCompetitionListKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).GetMultipleCompetitionListKey(ctx, req.(*GetMultipleCompetitionListKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionEngine_CreateMultipleCompetitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).CreateMultipleCompetitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/CreateMultipleCompetitionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).CreateMultipleCompetitionList(ctx, req.(*CompetitionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionEngine_ReadMultipleCompetitionLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).ReadMultipleCompetitionLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/ReadMultipleCompetitionLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).ReadMultipleCompetitionLists(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionEngine_UpdateMultipleCompetitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).UpdateMultipleCompetitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/UpdateMultipleCompetitionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).UpdateMultipleCompetitionList(ctx, req.(*CompetitionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionEngine_DeleteMultipleCompetitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionEngineServer).DeleteMultipleCompetitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.DistributionEngine/DeleteMultipleCompetitionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionEngineServer).DeleteMultipleCompetitionList(ctx, req.(*SingleId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DistributionEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.DistributionEngine",
	HandlerType: (*DistributionEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evict",
			Handler:    _DistributionEngine_Evict_Handler,
		},
		{
			MethodName: "SetMultipleCompetitionListTranslation",
			Handler:    _DistributionEngine_SetMultipleCompetitionListTranslation_Handler,
		},
		{
			MethodName: "GetMultipleCompetitionListKey",
			Handler:    _DistributionEngine_GetMultipleCompetitionListKey_Handler,
		},
		{
			MethodName: "CreateMultipleCompetitionList",
			Handler:    _DistributionEngine_CreateMultipleCompetitionList_Handler,
		},
		{
			MethodName: "ReadMultipleCompetitionLists",
			Handler:    _DistributionEngine_ReadMultipleCompetitionLists_Handler,
		},
		{
			MethodName: "UpdateMultipleCompetitionList",
			Handler:    _DistributionEngine_UpdateMultipleCompetitionList_Handler,
		},
		{
			MethodName: "DeleteMultipleCompetitionList",
			Handler:    _DistributionEngine_DeleteMultipleCompetitionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/distribution_engine.proto",
}

func init() { proto.RegisterFile("internalrpc/distribution_engine.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0x93, 0x4d, 0x9b, 0x9c, 0xa4, 0xdb, 0x65, 0x16, 0x52, 0x37, 0x4d, 0xa4, 0xac, 0xa1,
	0x28, 0x42, 0xc8, 0xd1, 0xa6, 0x5c, 0x2c, 0x7b, 0x53, 0x95, 0x36, 0x40, 0xb4, 0xcb, 0x8f, 0x4c,
	0x7b, 0xc5, 0x85, 0x99, 0xd8, 0x07, 0x33, 0xc2, 0x1e, 0x1b, 0xcf, 0x38, 0x22, 0xbd, 0x84, 0x47,
	0xe0, 0x7d, 0x78, 0x09, 0xae, 0xb8, 0xe7, 0x01, 0x78, 0x04, 0x34, 0xe3, 0x84, 0xd8, 0xa1, 0x0e,
	0x2d, 0x12, 0x77, 0x9e, 0xf3, 0x9d, 0xef, 0x7c, 0xc7, 0x67, 0xbe, 0x39, 0x70, 0xca, 0xb8, 0xc4,
	0x94, 0xd3, 0x30, 0x4d, 0xbc, 0xb1, 0xcf, 0x84, 0x4c, 0xd9, 0x3c, 0x93, 0x2c, 0xe6, 0x2e, 0xf2,
	0x80, 0x71, 0xb4, 0x93, 0x34, 0x96, 0x31, 0x69, 0x17, 0xd2, 0x7a, 0xc7, 0x45, 0x4e, 0x80, 0x1c,
	0x53, 0xe6, 0xe5, 0x79, 0xbd, 0x7e, 0x10, 0xc7, 0x41, 0x88, 0x63, 0x9a, 0xb0, 0x31, 0xe5, 0x3c,
	0x96, 0x54, 0xd5, 0x12, 0x2b, 0xf4, 0x64, 0x85, 0xea, 0xd3, 0x3c, 0xfb, 0x76, 0x8c, 0x51, 0x22,
	0x97, 0x39, 0x68, 0xa5, 0xf0, 0xf4, 0xb3, 0x2c, 0x94, 0x2c, 0x09, 0xf1, 0x32, 0x8e, 0x12, 0x94,
	0x4c, 0x51, 0xc9, 0x29, 0x3c, 0xf6, 0x36, 0x47, 0x97, 0xf9, 0xa6, 0x31, 0x34, 0x46, 0x07, 0xce,
	0x41, 0x21, 0x3a, 0xf3, 0xc9, 0x07, 0xd0, 0xc2, 0x05, 0x72, 0xe9, 0x32, 0x5f, 0x98, 0xb5, 0xa1,
	0x31, 0x6a, 0x4f, 0x8e, 0xec, 0x42, 0x9f, 0xf6, 0x0d, 0xe3, 0xf2, 0x6c, 0xf2, 0x9a, 0x09, 0xe9,
	0x34, 0x75, 0xe6, 0xcc, 0x17, 0xd6, 0x2d, 0x1c, 0xdd, 0xa1, 0xa9, 0x92, 0xc8, 0x31, 0x34, 0x45,
	0x12, 0xa7, 0x72, 0xa3, 0xb8, 0xaf, 0xcf, 0x33, 0x9f, 0x5c, 0x41, 0xa7, 0x20, 0xae, 0xe4, 0xea,
	0xa3, 0xf6, 0x64, 0x58, 0x92, 0xbb, 0xa3, 0xac, 0x53, 0x62, 0x59, 0x6f, 0xc3, 0xe1, 0x74, 0xc1,
	0x3c, 0x8d, 0xe0, 0x0f, 0x19, 0x0a, 0x49, 0x9e, 0x40, 0x5d, 0xb5, 0x6f, 0x0c, 0xeb, 0xa3, 0x03,
	0x47, 0x7d, 0x5a, 0xe7, 0xf0, 0xce, 0x27, 0x28, 0x2b, 0x7a, 0x7c, 0x85, 0xcb, 0x35, 0xf3, 0x08,
	0xf6, 0x43, 0x26, 0x0a, 0xcd, 0xee, 0xa9, 0xe3, 0xcc, 0xb7, 0xbe, 0x00, 0xeb, 0x5f, 0x0a, 0x24,
	0xe1, 0xb2, 0x92, 0xae, 0x3a, 0xfa, 0x1e, 0x97, 0x7a, 0xa0, 0x2d, 0x47, 0x7d, 0x5a, 0xbf, 0xd6,
	0xe1, 0x70, 0x7b, 0x56, 0x8f, 0xa1, 0xf6, 0x37, 0xb3, 0xc6, 0xee, 0x60, 0x95, 0xa6, 0x59, 0x2f,
	0x4f, 0xf3, 0x19, 0x74, 0x3c, 0x2a, 0x31, 0x88, 0xd3, 0xa5, 0xbe, 0xbc, 0x47, 0xc3, 0xfa, 0xa8,
	0xee, 0xb4, 0xd7, 0xb1, 0x99, 0x2f, 0xc8, 0x0b, 0x30, 0x23, 0xc6, 0xdd, 0xa2, 0x0f, 0x92, 0x94,
	0xc5, 0x29, 0x93, 0x4b, 0xb3, 0xa1, 0xab, 0x75, 0x23, 0xc6, 0x0b, 0x5d, 0x7d, 0xb9, 0x42, 0xc9,
	0xbb, 0x70, 0xa8, 0x98, 0xb9, 0x35, 0xbc, 0x38, 0xe3, 0xd2, 0xdc, 0xcb, 0xed, 0x13, 0x31, 0x3e,
	0x55, 0xd1, 0x4b, 0x15, 0x24, 0xe7, 0xd0, 0x57, 0x79, 0xd4, 0x93, 0x6c, 0x81, 0x25, 0xa1, 0x9c,
	0xb4, 0xaf, 0x49, 0xc7, 0x11, 0xe3, 0x17, 0x3a, 0xa5, 0xa0, 0x95, 0x17, 0x38, 0x83, 0x6e, 0x2e,
	0x22, 0x59, 0x84, 0x6e, 0x4a, 0x79, 0x80, 0xee, 0x77, 0x71, 0x96, 0x0a, 0xb3, 0xa9, 0xa9, 0x4f,
	0x35, 0x7a, 0xcd, 0x22, 0x74, 0x14, 0xf6, 0xa9, 0x82, 0xd4, 0xaf, 0xe3, 0x8f, 0x5e, 0x98, 0xf9,
	0xe8, 0x86, 0x6c, 0x81, 0x66, 0x6b, 0x68, 0x8c, 0x9a, 0x4e, 0x7b, 0x15, 0x7b, 0xcd, 0x16, 0x48,
	0x08, 0x3c, 0xe2, 0x34, 0x42, 0xb3, 0xa3, 0x67, 0xa9, 0xbf, 0xc9, 0x00, 0xc0, 0x4b, 0x91, 0x4a,
	0xf4, 0x5d, 0x2a, 0x4d, 0xd0, 0xf5, 0x5b, 0xab, 0xc8, 0x85, 0x54, 0x70, 0x96, 0xf8, 0x6b, 0xb8,
	0x9d, 0xc3, 0xab, 0xc8, 0x85, 0xb4, 0x3e, 0x86, 0x27, 0x5b, 0xf7, 0x27, 0xc8, 0x04, 0x1a, 0xea,
	0xc2, 0x73, 0xeb, 0xb5, 0x27, 0xfd, 0x92, 0x95, 0xb7, 0xb2, 0x9d, 0x3c, 0xd5, 0xfa, 0xd3, 0x80,
	0xf7, 0xbf, 0xaa, 0xb4, 0xd6, 0x75, 0x4a, 0xb9, 0x08, 0x69, 0xd1, 0xdd, 0xdb, 0x2e, 0x89, 0xa1,
	0x23, 0x37, 0x59, 0xeb, 0x67, 0xf4, 0xaa, 0xa4, 0xfd, 0x10, 0x01, 0xbb, 0x10, 0x12, 0x53, 0x2e,
	0xd3, 0xa5, 0x53, 0x12, 0xe8, 0x9d, 0xc3, 0x1b, 0xff, 0x48, 0x59, 0x7b, 0xd5, 0xd8, 0x78, 0xf5,
	0x4d, 0x68, 0x2c, 0x68, 0x98, 0xe1, 0xca, 0xbf, 0xf9, 0xe1, 0x65, 0xed, 0x85, 0x31, 0xf9, 0xbd,
	0x01, 0xe4, 0xaa, 0xb0, 0x23, 0xa7, 0x7a, 0x45, 0x92, 0x6f, 0xa0, 0xa1, 0x5f, 0x32, 0x29, 0xcf,
	0x6d, 0xeb, 0x75, 0xf7, 0xba, 0x76, 0xbe, 0xfe, 0xec, 0xf5, 0xfa, 0xb3, 0xa7, 0x6a, 0xfd, 0x59,
	0xcf, 0x7e, 0xfa, 0xed, 0x8f, 0x5f, 0x6a, 0x27, 0x56, 0x57, 0x6f, 0xcd, 0x75, 0x85, 0xf1, 0xe2,
	0xf9, 0x18, 0x55, 0x85, 0x97, 0xc6, 0x7b, 0xe4, 0x16, 0x4e, 0xef, 0x35, 0x09, 0xf2, 0xe1, 0x7f,
	0x9e, 0x5e, 0x55, 0x7b, 0xe4, 0x67, 0x03, 0x06, 0x3b, 0x57, 0x08, 0x79, 0x5e, 0x12, 0xbd, 0xcf,
	0xbe, 0xea, 0x8d, 0x1f, 0x42, 0x51, 0x1b, 0xea, 0x6b, 0x18, 0x5c, 0x6a, 0x87, 0x57, 0xed, 0xeb,
	0x9d, 0x9e, 0xed, 0xed, 0x44, 0xc9, 0x0d, 0xf4, 0x1d, 0xa4, 0x7e, 0x45, 0x69, 0x41, 0x2a, 0x46,
	0xd3, 0x1b, 0xec, 0xaa, 0x2a, 0x54, 0xcf, 0x37, 0xfa, 0xd9, 0xfd, 0x1f, 0x3d, 0x7f, 0x0e, 0x83,
	0x2b, 0x0c, 0xb1, 0xba, 0xf8, 0x5b, 0x65, 0x2b, 0x30, 0x1e, 0x84, 0x38, 0xf3, 0xab, 0xae, 0xf9,
	0xa3, 0x01, 0x9c, 0x78, 0x71, 0x64, 0xcf, 0x99, 0x0c, 0x68, 0x84, 0x21, 0x9d, 0x8b, 0x22, 0x7f,
	0xbe, 0xa7, 0xd3, 0xcf, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x29, 0x7c, 0xbe, 0xd6, 0x30, 0x08,
	0x00, 0x00,
}

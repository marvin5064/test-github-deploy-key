// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/img_sync.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DgeTokenRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *DgeTokenRequest) Reset()                    { *m = DgeTokenRequest{} }
func (m *DgeTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DgeTokenRequest) ProtoMessage()               {}
func (*DgeTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *DgeTokenRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type DgeTokenResponse struct {
	Auth       string `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Timestamp  int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	OperatorId uint32 `protobuf:"varint,3,opt,name=operator_id,json=operatorId" json:"operator_id,omitempty"`
	ImgId      string `protobuf:"bytes,4,opt,name=img_id,json=imgId" json:"img_id,omitempty"`
}

func (m *DgeTokenResponse) Reset()                    { *m = DgeTokenResponse{} }
func (m *DgeTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*DgeTokenResponse) ProtoMessage()               {}
func (*DgeTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *DgeTokenResponse) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *DgeTokenResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DgeTokenResponse) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *DgeTokenResponse) GetImgId() string {
	if m != nil {
		return m.ImgId
	}
	return ""
}

func init() {
	proto.RegisterType((*DgeTokenRequest)(nil), "internalrpc.DgeTokenRequest")
	proto.RegisterType((*DgeTokenResponse)(nil), "internalrpc.DgeTokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImgSync service

type ImgSyncClient interface {
	GetDgeToken(ctx context.Context, in *DgeTokenRequest, opts ...grpc.CallOption) (*DgeTokenResponse, error)
}

type imgSyncClient struct {
	cc *grpc.ClientConn
}

func NewImgSyncClient(cc *grpc.ClientConn) ImgSyncClient {
	return &imgSyncClient{cc}
}

func (c *imgSyncClient) GetDgeToken(ctx context.Context, in *DgeTokenRequest, opts ...grpc.CallOption) (*DgeTokenResponse, error) {
	out := new(DgeTokenResponse)
	err := grpc.Invoke(ctx, "/internalrpc.ImgSync/GetDgeToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImgSync service

type ImgSyncServer interface {
	GetDgeToken(context.Context, *DgeTokenRequest) (*DgeTokenResponse, error)
}

func RegisterImgSyncServer(s *grpc.Server, srv ImgSyncServer) {
	s.RegisterService(&_ImgSync_serviceDesc, srv)
}

func _ImgSync_GetDgeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DgeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgSyncServer).GetDgeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.ImgSync/GetDgeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgSyncServer).GetDgeToken(ctx, req.(*DgeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImgSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.ImgSync",
	HandlerType: (*ImgSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDgeToken",
			Handler:    _ImgSync_GetDgeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/img_sync.proto",
}

func init() { proto.RegisterFile("internalrpc/img_sync.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0x5a, 0x2b, 0x9d, 0xe0, 0x1f, 0x16, 0x84, 0x50, 0x5b, 0x8c, 0x39, 0xe5, 0x14,
	0x41, 0xbf, 0x81, 0x08, 0x12, 0xf0, 0x14, 0x05, 0x8f, 0x65, 0x93, 0x0c, 0xeb, 0x60, 0xf7, 0x8f,
	0xbb, 0xd3, 0x43, 0xc1, 0x0f, 0x2f, 0x46, 0x4b, 0x82, 0xd0, 0xdb, 0xf0, 0xde, 0x9b, 0xe1, 0xfd,
	0x06, 0x16, 0x64, 0x18, 0xbd, 0x91, 0x1b, 0xef, 0xda, 0x5b, 0xd2, 0x6a, 0x1d, 0x76, 0xa6, 0x2d,
	0x9d, 0xb7, 0x6c, 0x45, 0x32, 0xf2, 0xf2, 0x1b, 0x38, 0x7f, 0x54, 0xf8, 0x6a, 0x3f, 0xd0, 0xd4,
	0xf8, 0xb9, 0xc5, 0xc0, 0xe2, 0x0c, 0x62, 0x72, 0x69, 0x94, 0x45, 0xc5, 0xbc, 0x8e, 0xc9, 0xe5,
	0x5f, 0x70, 0x31, 0x44, 0x82, 0xb3, 0x26, 0xa0, 0x10, 0x30, 0x95, 0x5b, 0x7e, 0xff, 0x4b, 0xf5,
	0xb3, 0x58, 0xc2, 0x9c, 0x49, 0x63, 0x60, 0xa9, 0x5d, 0x1a, 0x67, 0x51, 0x31, 0xa9, 0x07, 0x41,
	0x5c, 0x43, 0x62, 0x1d, 0x7a, 0xc9, 0xd6, 0xaf, 0xa9, 0x4b, 0x27, 0x59, 0x54, 0x9c, 0xd6, 0xb0,
	0x97, 0xaa, 0x4e, 0x5c, 0xc2, 0xec, 0xa7, 0x28, 0x75, 0xe9, 0xb4, 0x3f, 0x7a, 0x4c, 0x5a, 0x55,
	0xdd, 0xdd, 0x1b, 0x9c, 0x54, 0x5a, 0xbd, 0xec, 0x4c, 0x2b, 0x9e, 0x21, 0x79, 0x42, 0xde, 0x77,
	0x11, 0xcb, 0x72, 0x04, 0x52, 0xfe, 0xa3, 0x58, 0xac, 0x0e, 0xb8, 0xbf, 0x00, 0xf9, 0xd1, 0xc3,
	0x0a, 0xae, 0x5a, 0xab, 0xcb, 0x86, 0x58, 0x49, 0x8d, 0x1b, 0xd9, 0x84, 0xf1, 0x46, 0x33, 0xeb,
	0x9f, 0x75, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x00, 0xd5, 0xcc, 0x7f, 0x4a, 0x01, 0x00, 0x00,
}

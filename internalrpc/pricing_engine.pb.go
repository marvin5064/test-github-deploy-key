// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/pricing_engine.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BetSelectionRequest struct {
	EventId    uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId   uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome    string `protobuf:"bytes,3,opt,name=outcome" json:"outcome,omitempty"`
	Sbv        string `protobuf:"bytes,4,opt,name=sbv" json:"sbv,omitempty"`
	IsOutright bool   `protobuf:"varint,5,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
}

func (m *BetSelectionRequest) Reset()                    { *m = BetSelectionRequest{} }
func (m *BetSelectionRequest) String() string            { return proto.CompactTextString(m) }
func (*BetSelectionRequest) ProtoMessage()               {}
func (*BetSelectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *BetSelectionRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *BetSelectionRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *BetSelectionRequest) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *BetSelectionRequest) GetSbv() string {
	if m != nil {
		return m.Sbv
	}
	return ""
}

func (m *BetSelectionRequest) GetIsOutright() bool {
	if m != nil {
		return m.IsOutright
	}
	return false
}

type BetradarSelectionData struct {
	EventId         uint32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32  `protobuf:"varint,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Url             string  `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Timestamp       uint64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	SportId         uint32  `protobuf:"varint,5,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	MarketSubId     uint32  `protobuf:"varint,6,opt,name=market_sub_id,json=marketSubId" json:"market_sub_id,omitempty"`
	CompetitorId    uint32  `protobuf:"varint,7,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	Odds            float64 `protobuf:"fixed64,9,opt,name=odds" json:"odds,omitempty"`
	UnmarginedPrice float64 `protobuf:"fixed64,10,opt,name=unmargined_price,json=unmarginedPrice" json:"unmargined_price,omitempty"`
}

func (m *BetradarSelectionData) Reset()                    { *m = BetradarSelectionData{} }
func (m *BetradarSelectionData) String() string            { return proto.CompactTextString(m) }
func (*BetradarSelectionData) ProtoMessage()               {}
func (*BetradarSelectionData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *BetradarSelectionData) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *BetradarSelectionData) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *BetradarSelectionData) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BetradarSelectionData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BetradarSelectionData) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *BetradarSelectionData) GetMarketSubId() uint32 {
	if m != nil {
		return m.MarketSubId
	}
	return 0
}

func (m *BetradarSelectionData) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

func (m *BetradarSelectionData) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *BetradarSelectionData) GetUnmarginedPrice() float64 {
	if m != nil {
		return m.UnmarginedPrice
	}
	return 0
}

type PinnacleSelectionData struct {
	LineId          uint32  `protobuf:"varint,1,opt,name=line_id,json=lineId" json:"line_id,omitempty"`
	SideType        string  `protobuf:"bytes,2,opt,name=side_type,json=sideType" json:"side_type,omitempty"`
	EventId         uint32  `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Timestamp       uint64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	MaxStake        float64 `protobuf:"fixed64,5,opt,name=max_stake,json=maxStake" json:"max_stake,omitempty"`
	SportId         uint32  `protobuf:"varint,6,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	AltLineId       uint32  `protobuf:"varint,7,opt,name=alt_line_id,json=altLineId" json:"alt_line_id,omitempty"`
	TeamType        string  `protobuf:"bytes,8,opt,name=team_type,json=teamType" json:"team_type,omitempty"`
	Cutoff          uint64  `protobuf:"varint,9,opt,name=cutoff" json:"cutoff,omitempty"`
	Sbv             string  `protobuf:"bytes,10,opt,name=sbv" json:"sbv,omitempty"`
	Price           float64 `protobuf:"fixed64,11,opt,name=price" json:"price,omitempty"`
	LeagueId        uint32  `protobuf:"varint,12,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	PeriodNr        uint32  `protobuf:"varint,13,opt,name=period_nr,json=periodNr" json:"period_nr,omitempty"`
	MarketType      string  `protobuf:"bytes,14,opt,name=market_type,json=marketType" json:"market_type,omitempty"`
	Odds            float64 `protobuf:"fixed64,16,opt,name=odds" json:"odds,omitempty"`
	UnmarginedPrice float64 `protobuf:"fixed64,17,opt,name=unmargined_price,json=unmarginedPrice" json:"unmargined_price,omitempty"`
}

func (m *PinnacleSelectionData) Reset()                    { *m = PinnacleSelectionData{} }
func (m *PinnacleSelectionData) String() string            { return proto.CompactTextString(m) }
func (*PinnacleSelectionData) ProtoMessage()               {}
func (*PinnacleSelectionData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *PinnacleSelectionData) GetLineId() uint32 {
	if m != nil {
		return m.LineId
	}
	return 0
}

func (m *PinnacleSelectionData) GetSideType() string {
	if m != nil {
		return m.SideType
	}
	return ""
}

func (m *PinnacleSelectionData) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *PinnacleSelectionData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PinnacleSelectionData) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *PinnacleSelectionData) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *PinnacleSelectionData) GetAltLineId() uint32 {
	if m != nil {
		return m.AltLineId
	}
	return 0
}

func (m *PinnacleSelectionData) GetTeamType() string {
	if m != nil {
		return m.TeamType
	}
	return ""
}

func (m *PinnacleSelectionData) GetCutoff() uint64 {
	if m != nil {
		return m.Cutoff
	}
	return 0
}

func (m *PinnacleSelectionData) GetSbv() string {
	if m != nil {
		return m.Sbv
	}
	return ""
}

func (m *PinnacleSelectionData) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PinnacleSelectionData) GetLeagueId() uint32 {
	if m != nil {
		return m.LeagueId
	}
	return 0
}

func (m *PinnacleSelectionData) GetPeriodNr() uint32 {
	if m != nil {
		return m.PeriodNr
	}
	return 0
}

func (m *PinnacleSelectionData) GetMarketType() string {
	if m != nil {
		return m.MarketType
	}
	return ""
}

func (m *PinnacleSelectionData) GetOdds() float64 {
	if m != nil {
		return m.Odds
	}
	return 0
}

func (m *PinnacleSelectionData) GetUnmarginedPrice() float64 {
	if m != nil {
		return m.UnmarginedPrice
	}
	return 0
}

type IosportSelectionData struct {
	EventId         uint32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId        uint32  `protobuf:"varint,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	CompetitionId   uint32  `protobuf:"varint,3,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	SelectionId     uint32  `protobuf:"varint,4,opt,name=selection_id,json=selectionId" json:"selection_id,omitempty"`
	Timestamp       uint64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	BackersOdds     float64 `protobuf:"fixed64,6,opt,name=backers_odds,json=backersOdds" json:"backers_odds,omitempty"`
	Side            string  `protobuf:"bytes,7,opt,name=side" json:"side,omitempty"`
	Runs            uint32  `protobuf:"varint,8,opt,name=runs" json:"runs,omitempty"`
	UnmarginedPrice float64 `protobuf:"fixed64,9,opt,name=unmargined_price,json=unmarginedPrice" json:"unmargined_price,omitempty"`
}

func (m *IosportSelectionData) Reset()                    { *m = IosportSelectionData{} }
func (m *IosportSelectionData) String() string            { return proto.CompactTextString(m) }
func (*IosportSelectionData) ProtoMessage()               {}
func (*IosportSelectionData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *IosportSelectionData) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *IosportSelectionData) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *IosportSelectionData) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *IosportSelectionData) GetSelectionId() uint32 {
	if m != nil {
		return m.SelectionId
	}
	return 0
}

func (m *IosportSelectionData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *IosportSelectionData) GetBackersOdds() float64 {
	if m != nil {
		return m.BackersOdds
	}
	return 0
}

func (m *IosportSelectionData) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *IosportSelectionData) GetRuns() uint32 {
	if m != nil {
		return m.Runs
	}
	return 0
}

func (m *IosportSelectionData) GetUnmarginedPrice() float64 {
	if m != nil {
		return m.UnmarginedPrice
	}
	return 0
}

// Provider specific data excluding any generic info
type BetSelectionReply struct {
	Betradar *BetradarSelectionData `protobuf:"bytes,1,opt,name=betradar" json:"betradar,omitempty"`
	Pinnacle *PinnacleSelectionData `protobuf:"bytes,2,opt,name=pinnacle" json:"pinnacle,omitempty"`
	Iosport  *IosportSelectionData  `protobuf:"bytes,3,opt,name=iosport" json:"iosport,omitempty"`
}

func (m *BetSelectionReply) Reset()                    { *m = BetSelectionReply{} }
func (m *BetSelectionReply) String() string            { return proto.CompactTextString(m) }
func (*BetSelectionReply) ProtoMessage()               {}
func (*BetSelectionReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *BetSelectionReply) GetBetradar() *BetradarSelectionData {
	if m != nil {
		return m.Betradar
	}
	return nil
}

func (m *BetSelectionReply) GetPinnacle() *PinnacleSelectionData {
	if m != nil {
		return m.Pinnacle
	}
	return nil
}

func (m *BetSelectionReply) GetIosport() *IosportSelectionData {
	if m != nil {
		return m.Iosport
	}
	return nil
}

type GetSelectionRequest struct {
	EventId  uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	Outcome  string `protobuf:"bytes,3,opt,name=outcome" json:"outcome,omitempty"`
	Sbv      string `protobuf:"bytes,4,opt,name=sbv" json:"sbv,omitempty"`
}

func (m *GetSelectionRequest) Reset()                    { *m = GetSelectionRequest{} }
func (m *GetSelectionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSelectionRequest) ProtoMessage()               {}
func (*GetSelectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *GetSelectionRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *GetSelectionRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *GetSelectionRequest) GetOutcome() string {
	if m != nil {
		return m.Outcome
	}
	return ""
}

func (m *GetSelectionRequest) GetSbv() string {
	if m != nil {
		return m.Sbv
	}
	return ""
}

type BatchGetSelectionsRequest struct {
	Selections []*GetSelectionRequest `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty"`
}

func (m *BatchGetSelectionsRequest) Reset()                    { *m = BatchGetSelectionsRequest{} }
func (m *BatchGetSelectionsRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchGetSelectionsRequest) ProtoMessage()               {}
func (*BatchGetSelectionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *BatchGetSelectionsRequest) GetSelections() []*GetSelectionRequest {
	if m != nil {
		return m.Selections
	}
	return nil
}

type SelectionReply struct {
	// map api.Provider enum -> generic selection
	ProviderSelections map[uint32]*api.Selection `protobuf:"bytes,1,rep,name=provider_selections,json=providerSelections" json:"provider_selections,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SelectionReply) Reset()                    { *m = SelectionReply{} }
func (m *SelectionReply) String() string            { return proto.CompactTextString(m) }
func (*SelectionReply) ProtoMessage()               {}
func (*SelectionReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *SelectionReply) GetProviderSelections() map[uint32]*api.Selection {
	if m != nil {
		return m.ProviderSelections
	}
	return nil
}

type SelectionsReply struct {
	Selections []*SelectionReply `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty"`
}

func (m *SelectionsReply) Reset()                    { *m = SelectionsReply{} }
func (m *SelectionsReply) String() string            { return proto.CompactTextString(m) }
func (*SelectionsReply) ProtoMessage()               {}
func (*SelectionsReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *SelectionsReply) GetSelections() []*SelectionReply {
	if m != nil {
		return m.Selections
	}
	return nil
}

func init() {
	proto.RegisterType((*BetSelectionRequest)(nil), "internalrpc.BetSelectionRequest")
	proto.RegisterType((*BetradarSelectionData)(nil), "internalrpc.BetradarSelectionData")
	proto.RegisterType((*PinnacleSelectionData)(nil), "internalrpc.PinnacleSelectionData")
	proto.RegisterType((*IosportSelectionData)(nil), "internalrpc.IosportSelectionData")
	proto.RegisterType((*BetSelectionReply)(nil), "internalrpc.BetSelectionReply")
	proto.RegisterType((*GetSelectionRequest)(nil), "internalrpc.GetSelectionRequest")
	proto.RegisterType((*BatchGetSelectionsRequest)(nil), "internalrpc.BatchGetSelectionsRequest")
	proto.RegisterType((*SelectionReply)(nil), "internalrpc.SelectionReply")
	proto.RegisterType((*SelectionsReply)(nil), "internalrpc.SelectionsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PricingEngine service

type PricingEngineClient interface {
	GetLockingStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LockingStatus, error)
	SetLockingStatus(ctx context.Context, in *SetLockingStatusRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// returns provider specific selection data for bet
	GetBetSelection(ctx context.Context, in *BetSelectionRequest, opts ...grpc.CallOption) (*BetSelectionReply, error)
	// returns generic selection data
	GetSelection(ctx context.Context, in *GetSelectionRequest, opts ...grpc.CallOption) (*SelectionReply, error)
	BatchGetSelections(ctx context.Context, in *BatchGetSelectionsRequest, opts ...grpc.CallOption) (*SelectionsReply, error)
}

type pricingEngineClient struct {
	cc *grpc.ClientConn
}

func NewPricingEngineClient(cc *grpc.ClientConn) PricingEngineClient {
	return &pricingEngineClient{cc}
}

func (c *pricingEngineClient) GetLockingStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LockingStatus, error) {
	out := new(LockingStatus)
	err := grpc.Invoke(ctx, "/internalrpc.PricingEngine/GetLockingStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingEngineClient) SetLockingStatus(ctx context.Context, in *SetLockingStatusRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.PricingEngine/SetLockingStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingEngineClient) GetBetSelection(ctx context.Context, in *BetSelectionRequest, opts ...grpc.CallOption) (*BetSelectionReply, error) {
	out := new(BetSelectionReply)
	err := grpc.Invoke(ctx, "/internalrpc.PricingEngine/GetBetSelection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingEngineClient) GetSelection(ctx context.Context, in *GetSelectionRequest, opts ...grpc.CallOption) (*SelectionReply, error) {
	out := new(SelectionReply)
	err := grpc.Invoke(ctx, "/internalrpc.PricingEngine/GetSelection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricingEngineClient) BatchGetSelections(ctx context.Context, in *BatchGetSelectionsRequest, opts ...grpc.CallOption) (*SelectionsReply, error) {
	out := new(SelectionsReply)
	err := grpc.Invoke(ctx, "/internalrpc.PricingEngine/BatchGetSelections", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PricingEngine service

type PricingEngineServer interface {
	GetLockingStatus(context.Context, *google_protobuf1.Empty) (*LockingStatus, error)
	SetLockingStatus(context.Context, *SetLockingStatusRequest) (*google_protobuf1.Empty, error)
	// returns provider specific selection data for bet
	GetBetSelection(context.Context, *BetSelectionRequest) (*BetSelectionReply, error)
	// returns generic selection data
	GetSelection(context.Context, *GetSelectionRequest) (*SelectionReply, error)
	BatchGetSelections(context.Context, *BatchGetSelectionsRequest) (*SelectionsReply, error)
}

func RegisterPricingEngineServer(s *grpc.Server, srv PricingEngineServer) {
	s.RegisterService(&_PricingEngine_serviceDesc, srv)
}

func _PricingEngine_GetLockingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingEngineServer).GetLockingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PricingEngine/GetLockingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingEngineServer).GetLockingStatus(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingEngine_SetLockingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLockingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingEngineServer).SetLockingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PricingEngine/SetLockingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingEngineServer).SetLockingStatus(ctx, req.(*SetLockingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingEngine_GetBetSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingEngineServer).GetBetSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PricingEngine/GetBetSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingEngineServer).GetBetSelection(ctx, req.(*BetSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingEngine_GetSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingEngineServer).GetSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PricingEngine/GetSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingEngineServer).GetSelection(ctx, req.(*GetSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricingEngine_BatchGetSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetSelectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricingEngineServer).BatchGetSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PricingEngine/BatchGetSelections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricingEngineServer).BatchGetSelections(ctx, req.(*BatchGetSelectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PricingEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.PricingEngine",
	HandlerType: (*PricingEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLockingStatus",
			Handler:    _PricingEngine_GetLockingStatus_Handler,
		},
		{
			MethodName: "SetLockingStatus",
			Handler:    _PricingEngine_SetLockingStatus_Handler,
		},
		{
			MethodName: "GetBetSelection",
			Handler:    _PricingEngine_GetBetSelection_Handler,
		},
		{
			MethodName: "GetSelection",
			Handler:    _PricingEngine_GetSelection_Handler,
		},
		{
			MethodName: "BatchGetSelections",
			Handler:    _PricingEngine_BatchGetSelections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/pricing_engine.proto",
}

func init() { proto.RegisterFile("internalrpc/pricing_engine.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0x8e, 0x62, 0xc7, 0x1f, 0xaf, 0xed, 0xc4, 0x65, 0xfa, 0xe1, 0x3a, 0x5d, 0xeb, 0x68, 0xd9,
	0xe0, 0x5d, 0x14, 0x20, 0xbd, 0x0c, 0x2b, 0x30, 0x0c, 0xc1, 0x82, 0xcc, 0x40, 0xd1, 0x04, 0xf2,
	0x7a, 0xdb, 0x20, 0x50, 0x12, 0xe3, 0x12, 0x96, 0x44, 0x8d, 0xa4, 0x82, 0xfa, 0xaf, 0xec, 0xb8,
	0xf3, 0x6e, 0xfb, 0x1d, 0x03, 0x76, 0xd9, 0xff, 0x19, 0x48, 0x4a, 0xb6, 0xe4, 0x28, 0x19, 0x30,
	0x0c, 0xe8, 0x8d, 0x7c, 0x3f, 0x1f, 0x3e, 0xef, 0x43, 0x82, 0x30, 0xa1, 0x89, 0x24, 0x3c, 0xc1,
	0x11, 0x4f, 0x83, 0xd3, 0x94, 0xd3, 0x80, 0x26, 0x0b, 0x8f, 0x24, 0x0b, 0x9a, 0x10, 0x27, 0xe5,
	0x4c, 0x32, 0xd4, 0x2b, 0x45, 0x8c, 0x8f, 0x16, 0x8c, 0x2d, 0x22, 0x72, 0xaa, 0x5d, 0x7e, 0x76,
	0x73, 0x4a, 0xe2, 0x54, 0xae, 0x4c, 0xe4, 0xf8, 0xa4, 0x5c, 0x4b, 0xa4, 0x8c, 0x4b, 0xe1, 0x33,
	0xb6, 0xf4, 0x62, 0x96, 0x50, 0xc9, 0x78, 0x1e, 0xf5, 0x6a, 0xe3, 0x39, 0xc5, 0x29, 0x2d, 0x05,
	0x9a, 0x00, 0xfb, 0x57, 0x0b, 0x0e, 0xcf, 0x89, 0x9c, 0x93, 0x88, 0x04, 0x92, 0xb2, 0xc4, 0x25,
	0xbf, 0x64, 0x44, 0x48, 0xf4, 0x1c, 0x3a, 0xe4, 0x96, 0x24, 0xd2, 0xa3, 0xe1, 0xc8, 0x9a, 0x58,
	0xd3, 0x81, 0xdb, 0xd6, 0xfb, 0x59, 0x88, 0x8e, 0xa0, 0x1b, 0x63, 0xbe, 0x24, 0xda, 0xb7, 0xab,
	0x7d, 0x1d, 0x63, 0x98, 0x85, 0x68, 0x04, 0x6d, 0x96, 0xc9, 0x80, 0xc5, 0x64, 0xd4, 0x98, 0x58,
	0xd3, 0xae, 0x5b, 0x6c, 0xd1, 0x10, 0x1a, 0xc2, 0xbf, 0x1d, 0x35, 0xb5, 0x55, 0x2d, 0xd1, 0x2b,
	0xe8, 0x51, 0xe1, 0xb1, 0x4c, 0x72, 0xba, 0xf8, 0x20, 0x47, 0x7b, 0x13, 0x6b, 0xda, 0x71, 0x81,
	0x8a, 0xab, 0xdc, 0x62, 0xff, 0xb6, 0x0b, 0x4f, 0xce, 0x89, 0xe4, 0x38, 0xc4, 0x7c, 0x8d, 0xf0,
	0x7b, 0x2c, 0xf1, 0x7f, 0x86, 0x37, 0x84, 0x46, 0xc6, 0xa3, 0x1c, 0x9a, 0x5a, 0xa2, 0x17, 0xd0,
	0x95, 0x34, 0x26, 0x42, 0xe2, 0x38, 0xd5, 0xe0, 0x9a, 0xee, 0xc6, 0xa0, 0xfa, 0x68, 0xca, 0x54,
	0xad, 0x3d, 0xd3, 0x47, 0xef, 0x67, 0x21, 0xb2, 0x61, 0x90, 0xf7, 0x11, 0x99, 0xaf, 0xfc, 0x2d,
	0xed, 0xef, 0x19, 0xe3, 0x3c, 0xf3, 0x67, 0x21, 0xfa, 0x1c, 0x06, 0x01, 0x8b, 0x53, 0x22, 0xd5,
	0x48, 0x54, 0x4c, 0x5b, 0xc7, 0xf4, 0x37, 0xc6, 0x59, 0x88, 0x10, 0x34, 0x59, 0x18, 0x8a, 0x51,
	0x77, 0x62, 0x4d, 0x2d, 0x57, 0xaf, 0xd1, 0x57, 0x30, 0xcc, 0x92, 0x18, 0x73, 0x25, 0x8d, 0xd0,
	0x53, 0x52, 0x21, 0x23, 0xd0, 0xfe, 0x83, 0x8d, 0xfd, 0x5a, 0x99, 0xed, 0xbf, 0x1b, 0xf0, 0xe4,
	0x9a, 0x26, 0x09, 0x0e, 0x22, 0x52, 0x25, 0xe9, 0x19, 0xb4, 0x23, 0x9a, 0x90, 0x0d, 0x47, 0x2d,
	0xb5, 0x35, 0x14, 0x09, 0x1a, 0x12, 0x4f, 0xae, 0x52, 0xa2, 0x29, 0xea, 0xba, 0x1d, 0x65, 0xf8,
	0x71, 0x95, 0x92, 0x0a, 0xb5, 0x8d, 0x2a, 0xb5, 0x0f, 0x73, 0xa5, 0x89, 0xff, 0xe8, 0x09, 0x89,
	0x97, 0x44, 0x93, 0x65, 0x29, 0xe2, 0x3f, 0xce, 0xd5, 0xbe, 0x42, 0x64, 0xab, 0x4a, 0xe4, 0x4b,
	0xe8, 0xe1, 0x48, 0x7a, 0x05, 0x54, 0x43, 0x51, 0x17, 0x47, 0xf2, 0xed, 0x1a, 0xad, 0x24, 0x38,
	0x36, 0x68, 0x3b, 0x06, 0xad, 0x32, 0x68, 0xb4, 0x4f, 0xa1, 0x15, 0x64, 0x92, 0xdd, 0xdc, 0x68,
	0xfa, 0x9a, 0x6e, 0xbe, 0x2b, 0xd4, 0x06, 0x1b, 0xb5, 0x3d, 0x86, 0x3d, 0xc3, 0x63, 0x4f, 0x43,
	0x33, 0x1b, 0x55, 0x3c, 0x22, 0x78, 0x91, 0xe9, 0xd6, 0x7d, 0xa3, 0x16, 0x63, 0x30, 0x9d, 0x53,
	0xc2, 0x29, 0x0b, 0xbd, 0x84, 0x8f, 0x06, 0xc6, 0x69, 0x0c, 0xef, 0xb8, 0x52, 0x6f, 0x3e, 0x7f,
	0x0d, 0x6c, 0x5f, 0x77, 0x02, 0x63, 0xd2, 0xd0, 0x8a, 0xb9, 0x0e, 0xff, 0x65, 0xae, 0x8f, 0xea,
	0xe7, 0xfa, 0xfb, 0x2e, 0x3c, 0x9e, 0x31, 0x4d, 0xd2, 0xff, 0xa3, 0xfd, 0x2f, 0x60, 0xbf, 0xd0,
	0x1d, 0x65, 0xc9, 0x66, 0xbc, 0x83, 0x92, 0x75, 0x16, 0xa2, 0x63, 0xe8, 0x8b, 0xa2, 0x9f, 0x0a,
	0x6a, 0x1a, 0x59, 0xaf, 0x6d, 0xdb, 0x3a, 0xd8, 0xdb, 0xd6, 0xc1, 0x31, 0xf4, 0x7d, 0x1c, 0x2c,
	0x09, 0x17, 0x9e, 0x3e, 0x7f, 0x4b, 0x9f, 0xaf, 0x97, 0xdb, 0xae, 0x14, 0x0d, 0x08, 0x9a, 0x4a,
	0x6f, 0x7a, 0xd6, 0x5d, 0x57, 0xaf, 0x95, 0x8d, 0x67, 0x89, 0xd0, 0x13, 0x1e, 0xb8, 0x7a, 0x5d,
	0x4b, 0x57, 0xb7, 0x9e, 0xae, 0xbf, 0x2c, 0x78, 0x54, 0x7d, 0xc8, 0xd2, 0x68, 0x85, 0xbe, 0x85,
	0x8e, 0x9f, 0x3f, 0x20, 0x9a, 0xab, 0xde, 0x99, 0xed, 0x94, 0x1e, 0x4e, 0xa7, 0xf6, 0x75, 0x71,
	0xd7, 0x39, 0x2a, 0x3f, 0xcd, 0xef, 0x96, 0xe6, 0x73, 0x3b, 0xbf, 0xf6, 0xe2, 0xb9, 0xeb, 0x1c,
	0xf4, 0x06, 0xda, 0xd4, 0xcc, 0x50, 0x93, 0xdd, 0x3b, 0x3b, 0xae, 0xa4, 0xd7, 0xcd, 0xd7, 0x2d,
	0x32, 0xec, 0x15, 0x1c, 0x5e, 0x7e, 0x9a, 0xa7, 0xd9, 0xfe, 0x19, 0x9e, 0x9f, 0x63, 0x19, 0x7c,
	0x28, 0xf7, 0x17, 0x05, 0x80, 0xef, 0x00, 0xd6, 0x6a, 0x10, 0x23, 0x6b, 0xd2, 0x98, 0xf6, 0xce,
	0x26, 0x95, 0x73, 0xd5, 0xc0, 0x76, 0x4b, 0x39, 0xf6, 0x9f, 0x16, 0xec, 0x6f, 0x4d, 0x2a, 0x84,
	0xc3, 0x94, 0xb3, 0x5b, 0x1a, 0x12, 0xee, 0xdd, 0xa9, 0xfe, 0xba, 0x52, 0xbd, 0x9a, 0xe9, 0x5c,
	0xe7, 0x69, 0x1b, 0xa0, 0x17, 0x89, 0xe4, 0x2b, 0x17, 0xa5, 0x77, 0x1c, 0xe3, 0xf7, 0xf0, 0xec,
	0x9e, 0x70, 0x45, 0xc2, 0x92, 0xac, 0x72, 0x46, 0xd5, 0x12, 0x9d, 0xc0, 0xde, 0x2d, 0x8e, 0xb2,
	0x62, 0xf2, 0xfb, 0x0e, 0x4e, 0x69, 0xa9, 0xb9, 0x71, 0x7e, 0xb3, 0xfb, 0xb5, 0x65, 0xbf, 0x83,
	0x83, 0x32, 0x4d, 0xea, 0x3c, 0x6f, 0x6a, 0x48, 0x3a, 0x7a, 0xe0, 0x18, 0x65, 0x7e, 0xce, 0xfe,
	0x68, 0xc0, 0xe0, 0xda, 0xfc, 0x0f, 0x2e, 0xf4, 0xf7, 0x00, 0xfd, 0x00, 0xc3, 0x4b, 0x22, 0xdf,
	0xb2, 0x60, 0x49, 0x93, 0xc5, 0x5c, 0x62, 0x99, 0x09, 0xf4, 0xd4, 0x31, 0x1f, 0x04, 0xa7, 0xf8,
	0x20, 0x38, 0x17, 0xea, 0x83, 0x30, 0x1e, 0x57, 0xda, 0x54, 0x72, 0xec, 0x1d, 0xe4, 0xc2, 0x70,
	0xbe, 0x5d, 0xe9, 0x64, 0x0b, 0x58, 0xd5, 0x9d, 0x4f, 0x70, 0x7c, 0x4f, 0x3f, 0x7b, 0x07, 0xbd,
	0x87, 0x83, 0x4b, 0x22, 0xcb, 0xd7, 0x0f, 0x4d, 0xb6, 0xef, 0xd9, 0xb6, 0x20, 0xc6, 0x2f, 0x1f,
	0x88, 0x48, 0x23, 0x55, 0xf6, 0x0a, 0xfa, 0x97, 0xf7, 0xd7, 0xac, 0x11, 0xd9, 0xf8, 0x21, 0x86,
	0xed, 0x1d, 0xf4, 0x13, 0xa0, 0xbb, 0xb2, 0x46, 0x5f, 0x56, 0x81, 0xdc, 0xa7, 0xfb, 0xf1, 0x8b,
	0xfa, 0xe2, 0x22, 0xaf, 0x7e, 0xfe, 0x19, 0x1c, 0x05, 0x2c, 0x76, 0x7c, 0x2a, 0x17, 0x38, 0x26,
	0x11, 0xf6, 0x45, 0x39, 0xc1, 0x6f, 0x69, 0xda, 0x5e, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x79,
	0xce, 0x11, 0x61, 0x06, 0x0a, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/pinnacle_worker.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PinnacleLiveStatusReply struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *PinnacleLiveStatusReply) Reset()                    { *m = PinnacleLiveStatusReply{} }
func (m *PinnacleLiveStatusReply) String() string            { return proto.CompactTextString(m) }
func (*PinnacleLiveStatusReply) ProtoMessage()               {}
func (*PinnacleLiveStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *PinnacleLiveStatusReply) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// TODO later could disable several event special markets
type SpecialMarketRequest struct {
	EventId    uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	MarketName string `protobuf:"bytes,2,opt,name=market_name,json=marketName" json:"market_name,omitempty"`
}

func (m *SpecialMarketRequest) Reset()                    { *m = SpecialMarketRequest{} }
func (m *SpecialMarketRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecialMarketRequest) ProtoMessage()               {}
func (*SpecialMarketRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *SpecialMarketRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *SpecialMarketRequest) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

type SpecialMarketsForEventRequest struct {
	EventId uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (m *SpecialMarketsForEventRequest) Reset()                    { *m = SpecialMarketsForEventRequest{} }
func (m *SpecialMarketsForEventRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecialMarketsForEventRequest) ProtoMessage()               {}
func (*SpecialMarketsForEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *SpecialMarketsForEventRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type BlockedSpecialMarketsList struct {
	EventId        uint32   `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SpecialMarkets []string `protobuf:"bytes,2,rep,name=special_markets,json=specialMarkets" json:"special_markets,omitempty"`
}

func (m *BlockedSpecialMarketsList) Reset()                    { *m = BlockedSpecialMarketsList{} }
func (m *BlockedSpecialMarketsList) String() string            { return proto.CompactTextString(m) }
func (*BlockedSpecialMarketsList) ProtoMessage()               {}
func (*BlockedSpecialMarketsList) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *BlockedSpecialMarketsList) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *BlockedSpecialMarketsList) GetSpecialMarkets() []string {
	if m != nil {
		return m.SpecialMarkets
	}
	return nil
}

func init() {
	proto.RegisterType((*PinnacleLiveStatusReply)(nil), "internalrpc.PinnacleLiveStatusReply")
	proto.RegisterType((*SpecialMarketRequest)(nil), "internalrpc.SpecialMarketRequest")
	proto.RegisterType((*SpecialMarketsForEventRequest)(nil), "internalrpc.SpecialMarketsForEventRequest")
	proto.RegisterType((*BlockedSpecialMarketsList)(nil), "internalrpc.BlockedSpecialMarketsList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PinnacleWorker service

type PinnacleWorkerClient interface {
	// Change enable/disable pinnacle live setting
	DisablePinnacleLive(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	EnablePinnacleLive(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Check pinnacle live status
	PinnacleLiveStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*PinnacleLiveStatusReply, error)
	// Disable a single special market of an event
	BlockSpecialMarket(ctx context.Context, in *SpecialMarketRequest, opts ...grpc.CallOption) (*BlockedSpecialMarketsList, error)
	// Enable a single special market of an event
	UnblockSpecialMarket(ctx context.Context, in *SpecialMarketRequest, opts ...grpc.CallOption) (*BlockedSpecialMarketsList, error)
	// Disable/Enable all special markets for one event
	BlockSpecialMarketsForEvent(ctx context.Context, in *SpecialMarketsForEventRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	UnblockSpecialMarketsForEvent(ctx context.Context, in *SpecialMarketsForEventRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all disabled special markets for one event
	GetAllBlockedSpecialMarkets(ctx context.Context, in *SpecialMarketsForEventRequest, opts ...grpc.CallOption) (*BlockedSpecialMarketsList, error)
}

type pinnacleWorkerClient struct {
	cc *grpc.ClientConn
}

func NewPinnacleWorkerClient(cc *grpc.ClientConn) PinnacleWorkerClient {
	return &pinnacleWorkerClient{cc}
}

func (c *pinnacleWorkerClient) DisablePinnacleLive(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/DisablePinnacleLive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) EnablePinnacleLive(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/EnablePinnacleLive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) PinnacleLiveStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*PinnacleLiveStatusReply, error) {
	out := new(PinnacleLiveStatusReply)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/PinnacleLiveStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) BlockSpecialMarket(ctx context.Context, in *SpecialMarketRequest, opts ...grpc.CallOption) (*BlockedSpecialMarketsList, error) {
	out := new(BlockedSpecialMarketsList)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/BlockSpecialMarket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) UnblockSpecialMarket(ctx context.Context, in *SpecialMarketRequest, opts ...grpc.CallOption) (*BlockedSpecialMarketsList, error) {
	out := new(BlockedSpecialMarketsList)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/UnblockSpecialMarket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) BlockSpecialMarketsForEvent(ctx context.Context, in *SpecialMarketsForEventRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/BlockSpecialMarketsForEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) UnblockSpecialMarketsForEvent(ctx context.Context, in *SpecialMarketsForEventRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/UnblockSpecialMarketsForEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinnacleWorkerClient) GetAllBlockedSpecialMarkets(ctx context.Context, in *SpecialMarketsForEventRequest, opts ...grpc.CallOption) (*BlockedSpecialMarketsList, error) {
	out := new(BlockedSpecialMarketsList)
	err := grpc.Invoke(ctx, "/internalrpc.PinnacleWorker/GetAllBlockedSpecialMarkets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PinnacleWorker service

type PinnacleWorkerServer interface {
	// Change enable/disable pinnacle live setting
	DisablePinnacleLive(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	EnablePinnacleLive(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	// Check pinnacle live status
	PinnacleLiveStatus(context.Context, *google_protobuf1.Empty) (*PinnacleLiveStatusReply, error)
	// Disable a single special market of an event
	BlockSpecialMarket(context.Context, *SpecialMarketRequest) (*BlockedSpecialMarketsList, error)
	// Enable a single special market of an event
	UnblockSpecialMarket(context.Context, *SpecialMarketRequest) (*BlockedSpecialMarketsList, error)
	// Disable/Enable all special markets for one event
	BlockSpecialMarketsForEvent(context.Context, *SpecialMarketsForEventRequest) (*google_protobuf1.Empty, error)
	UnblockSpecialMarketsForEvent(context.Context, *SpecialMarketsForEventRequest) (*google_protobuf1.Empty, error)
	// Get all disabled special markets for one event
	GetAllBlockedSpecialMarkets(context.Context, *SpecialMarketsForEventRequest) (*BlockedSpecialMarketsList, error)
}

func RegisterPinnacleWorkerServer(s *grpc.Server, srv PinnacleWorkerServer) {
	s.RegisterService(&_PinnacleWorker_serviceDesc, srv)
}

func _PinnacleWorker_DisablePinnacleLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).DisablePinnacleLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/DisablePinnacleLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).DisablePinnacleLive(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_EnablePinnacleLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).EnablePinnacleLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/EnablePinnacleLive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).EnablePinnacleLive(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_PinnacleLiveStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).PinnacleLiveStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/PinnacleLiveStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).PinnacleLiveStatus(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_BlockSpecialMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).BlockSpecialMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/BlockSpecialMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).BlockSpecialMarket(ctx, req.(*SpecialMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_UnblockSpecialMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).UnblockSpecialMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/UnblockSpecialMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).UnblockSpecialMarket(ctx, req.(*SpecialMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_BlockSpecialMarketsForEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialMarketsForEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).BlockSpecialMarketsForEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/BlockSpecialMarketsForEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).BlockSpecialMarketsForEvent(ctx, req.(*SpecialMarketsForEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_UnblockSpecialMarketsForEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialMarketsForEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).UnblockSpecialMarketsForEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/UnblockSpecialMarketsForEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).UnblockSpecialMarketsForEvent(ctx, req.(*SpecialMarketsForEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinnacleWorker_GetAllBlockedSpecialMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecialMarketsForEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinnacleWorkerServer).GetAllBlockedSpecialMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.PinnacleWorker/GetAllBlockedSpecialMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinnacleWorkerServer).GetAllBlockedSpecialMarkets(ctx, req.(*SpecialMarketsForEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PinnacleWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.PinnacleWorker",
	HandlerType: (*PinnacleWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisablePinnacleLive",
			Handler:    _PinnacleWorker_DisablePinnacleLive_Handler,
		},
		{
			MethodName: "EnablePinnacleLive",
			Handler:    _PinnacleWorker_EnablePinnacleLive_Handler,
		},
		{
			MethodName: "PinnacleLiveStatus",
			Handler:    _PinnacleWorker_PinnacleLiveStatus_Handler,
		},
		{
			MethodName: "BlockSpecialMarket",
			Handler:    _PinnacleWorker_BlockSpecialMarket_Handler,
		},
		{
			MethodName: "UnblockSpecialMarket",
			Handler:    _PinnacleWorker_UnblockSpecialMarket_Handler,
		},
		{
			MethodName: "BlockSpecialMarketsForEvent",
			Handler:    _PinnacleWorker_BlockSpecialMarketsForEvent_Handler,
		},
		{
			MethodName: "UnblockSpecialMarketsForEvent",
			Handler:    _PinnacleWorker_UnblockSpecialMarketsForEvent_Handler,
		},
		{
			MethodName: "GetAllBlockedSpecialMarkets",
			Handler:    _PinnacleWorker_GetAllBlockedSpecialMarkets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internalrpc/pinnacle_worker.proto",
}

func init() { proto.RegisterFile("internalrpc/pinnacle_worker.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xdf, 0x8b, 0xda, 0x40,
	0x10, 0xc7, 0xd5, 0x82, 0x3f, 0x46, 0x6a, 0x61, 0x2b, 0x6d, 0x34, 0x48, 0x35, 0x94, 0x56, 0xfa,
	0x10, 0xa1, 0xbe, 0xf5, 0xad, 0x52, 0x95, 0x82, 0x2d, 0x25, 0xf6, 0xb8, 0xc7, 0xb0, 0x89, 0x73,
	0xb2, 0xb8, 0xd9, 0xcd, 0x65, 0x57, 0x0f, 0xdf, 0xee, 0x4f, 0x3f, 0x4c, 0xce, 0x23, 0x39, 0x8d,
	0x77, 0x07, 0xde, 0x63, 0x36, 0xf3, 0xfd, 0xce, 0xcc, 0x67, 0xbe, 0xd0, 0x63, 0x42, 0x63, 0x24,
	0x28, 0x8f, 0x42, 0x7f, 0x10, 0x32, 0x21, 0xa8, 0xcf, 0xd1, 0xbd, 0x91, 0xd1, 0x0a, 0x23, 0x3b,
	0x8c, 0xa4, 0x96, 0xa4, 0x9e, 0x2a, 0x69, 0x9b, 0x4b, 0x29, 0x97, 0x1c, 0x07, 0xf1, 0x2f, 0x6f,
	0x7d, 0x35, 0xc0, 0x20, 0xd4, 0xdb, 0xa4, 0xd2, 0x1a, 0xc2, 0xc7, 0x7f, 0xf7, 0x16, 0x33, 0xb6,
	0xc1, 0xb9, 0xa6, 0x7a, 0xad, 0x1c, 0x0c, 0xf9, 0x96, 0x18, 0x50, 0x41, 0x41, 0x3d, 0x8e, 0x0b,
	0xa3, 0xd8, 0x2d, 0xf6, 0xab, 0xce, 0xfe, 0xd3, 0x72, 0xa0, 0x39, 0x0f, 0xd1, 0x67, 0x94, 0xff,
	0xa1, 0xd1, 0x0a, 0xb5, 0x83, 0xd7, 0x6b, 0x54, 0x9a, 0xb4, 0xa0, 0x8a, 0x1b, 0x14, 0xda, 0x65,
	0x89, 0xe4, 0xad, 0x53, 0x89, 0xbf, 0x7f, 0x2f, 0xc8, 0x27, 0xa8, 0x07, 0x71, 0xad, 0x2b, 0x68,
	0x80, 0x46, 0xa9, 0x5b, 0xec, 0xd7, 0x1c, 0x48, 0x9e, 0xfe, 0xd2, 0x00, 0xad, 0x1f, 0xd0, 0xc9,
	0x78, 0xaa, 0x89, 0x8c, 0xc6, 0x3b, 0xf1, 0xd3, 0xe6, 0x96, 0x0b, 0xad, 0x11, 0x97, 0xfe, 0x0a,
	0x17, 0x59, 0x8b, 0x19, 0x3b, 0x3d, 0xd4, 0x57, 0x78, 0xa7, 0x12, 0x81, 0x9b, 0x4c, 0xa2, 0x8c,
	0x52, 0xf7, 0x4d, 0xbf, 0xe6, 0x34, 0x54, 0xc6, 0xe7, 0xfb, 0x6d, 0x19, 0x1a, 0x7b, 0x4c, 0x97,
	0x31, 0x68, 0x32, 0x85, 0xf7, 0xbf, 0x98, 0xda, 0xf1, 0x48, 0xf3, 0x23, 0x1f, 0xec, 0x84, 0xb6,
	0xbd, 0xa7, 0x6d, 0x8f, 0x77, 0xb4, 0xdb, 0x39, 0xef, 0x56, 0x81, 0x4c, 0x80, 0x8c, 0xc5, 0x19,
	0x7c, 0xfe, 0x03, 0x39, 0xbc, 0x64, 0xae, 0xcf, 0x67, 0x3b, 0x15, 0x11, 0x3b, 0x27, 0x02, 0x56,
	0x81, 0x50, 0x20, 0x31, 0xda, 0x0c, 0x58, 0xd2, 0xcb, 0xa8, 0x8f, 0x65, 0xa1, 0xfd, 0x25, 0x53,
	0x92, 0x7b, 0x1e, 0xab, 0x40, 0x7c, 0x68, 0x5e, 0x08, 0xef, 0xd5, 0x9b, 0x98, 0x87, 0x7b, 0x3c,
	0x64, 0x8c, 0x7c, 0xcb, 0xef, 0xf5, 0x38, 0x88, 0x27, 0x4e, 0x80, 0xd0, 0x39, 0xb6, 0xc9, 0xb9,
	0xdb, 0x28, 0x30, 0xa7, 0xa8, 0x7f, 0x72, 0x7e, 0x74, 0xe1, 0x17, 0x35, 0x79, 0x36, 0xc0, 0x51,
	0x07, 0x4c, 0x5f, 0x06, 0xb6, 0xc7, 0xf4, 0x92, 0x06, 0xc8, 0xa9, 0xa7, 0xd2, 0x52, 0xaf, 0x1c,
	0x4f, 0x39, 0xbc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x26, 0xf5, 0x1f, 0x8d, 0x9d, 0x04, 0x00, 0x00,
}

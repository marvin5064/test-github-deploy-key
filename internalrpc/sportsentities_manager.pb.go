// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internalrpc/sportsentities_manager.proto

package internalrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/bitgaming/go-protobuf-schema/sportsbook/api"
import resulting "github.com/bitgaming/go-protobuf-schema/sportsbook/resulting"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Command int32

const (
	Command_ADD    Command = 0
	Command_REMOVE Command = 1
)

var Command_name = map[int32]string{
	0: "ADD",
	1: "REMOVE",
}
var Command_value = map[string]int32{
	"ADD":    0,
	"REMOVE": 1,
}

func (x Command) String() string {
	return proto.EnumName(Command_name, int32(x))
}
func (Command) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type Competitors struct {
	Competitors []*Competitor `protobuf:"bytes,1,rep,name=competitors" json:"competitors,omitempty"`
}

func (m *Competitors) Reset()                    { *m = Competitors{} }
func (m *Competitors) String() string            { return proto.CompactTextString(m) }
func (*Competitors) ProtoMessage()               {}
func (*Competitors) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *Competitors) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

type Pitchers struct {
	Home string `protobuf:"bytes,1,opt,name=home" json:"home,omitempty"`
	Away string `protobuf:"bytes,2,opt,name=away" json:"away,omitempty"`
}

func (m *Pitchers) Reset()                    { *m = Pitchers{} }
func (m *Pitchers) String() string            { return proto.CompactTextString(m) }
func (*Pitchers) ProtoMessage()               {}
func (*Pitchers) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *Pitchers) GetHome() string {
	if m != nil {
		return m.Home
	}
	return ""
}

func (m *Pitchers) GetAway() string {
	if m != nil {
		return m.Away
	}
	return ""
}

type Competition struct {
	Id           uint32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CategoryId   uint32          `protobuf:"varint,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	Name         string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ProviderKeys []string        `protobuf:"bytes,4,rep,name=provider_keys,json=providerKeys" json:"provider_keys,omitempty"`
	Tags         []api.EntityTag `protobuf:"varint,5,rep,packed,name=tags,enum=api.EntityTag" json:"tags,omitempty"`
}

func (m *Competition) Reset()                    { *m = Competition{} }
func (m *Competition) String() string            { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()               {}
func (*Competition) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *Competition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competition) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competition) GetProviderKeys() []string {
	if m != nil {
		return m.ProviderKeys
	}
	return nil
}

func (m *Competition) GetTags() []api.EntityTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Competitor struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// 1 = home, 2 = away,
	// 3-6 for tennis doubles player IDs
	Type     uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Position uint32 `protobuf:"varint,3,opt,name=position" json:"position,omitempty"`
	// for match or create event
	ProviderCompetitorKeys []string `protobuf:"bytes,4,rep,name=provider_competitor_keys,json=providerCompetitorKeys" json:"provider_competitor_keys,omitempty"`
	CompetitorName         string   `protobuf:"bytes,5,opt,name=competitor_name,json=competitorName" json:"competitor_name,omitempty"`
	Locale                 string   `protobuf:"bytes,6,opt,name=locale" json:"locale,omitempty"`
	CompetitorType         string   `protobuf:"bytes,7,opt,name=competitor_type,json=competitorType" json:"competitor_type,omitempty"`
	// for matching event+competitors
	Tags []api.EntityTag `protobuf:"varint,8,rep,packed,name=tags,enum=api.EntityTag" json:"tags,omitempty"`
}

func (m *Competitor) Reset()                    { *m = Competitor{} }
func (m *Competitor) String() string            { return proto.CompactTextString(m) }
func (*Competitor) ProtoMessage()               {}
func (*Competitor) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *Competitor) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competitor) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Competitor) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Competitor) GetProviderCompetitorKeys() []string {
	if m != nil {
		return m.ProviderCompetitorKeys
	}
	return nil
}

func (m *Competitor) GetCompetitorName() string {
	if m != nil {
		return m.CompetitorName
	}
	return ""
}

func (m *Competitor) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *Competitor) GetCompetitorType() string {
	if m != nil {
		return m.CompetitorType
	}
	return ""
}

func (m *Competitor) GetTags() []api.EntityTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

// deprecate
type EventIdentifier struct {
	EventType string `protobuf:"bytes,1,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	EventId   uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (m *EventIdentifier) Reset()                    { *m = EventIdentifier{} }
func (m *EventIdentifier) String() string            { return proto.CompactTextString(m) }
func (*EventIdentifier) ProtoMessage()               {}
func (*EventIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *EventIdentifier) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventIdentifier) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type EventStateUpdateRequest struct {
	OriginAppId string `protobuf:"bytes,1,opt,name=origin_app_id,json=originAppId" json:"origin_app_id,omitempty"`
	// TODO: deprecate event_identifier
	EventIdentifier   *EventIdentifier `protobuf:"bytes,2,opt,name=event_identifier,json=eventIdentifier" json:"event_identifier,omitempty"`
	EventUpdateState  api.EventStatus  `protobuf:"varint,3,opt,name=event_update_state,json=eventUpdateState,enum=api.EventStatus" json:"event_update_state,omitempty"`
	StartsAtTimestamp int64            `protobuf:"varint,4,opt,name=starts_at_timestamp,json=startsAtTimestamp" json:"starts_at_timestamp,omitempty"`
	StatusRequest     *StatusRequest   `protobuf:"bytes,5,opt,name=status_request,json=statusRequest" json:"status_request,omitempty"`
}

func (m *EventStateUpdateRequest) Reset()                    { *m = EventStateUpdateRequest{} }
func (m *EventStateUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*EventStateUpdateRequest) ProtoMessage()               {}
func (*EventStateUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *EventStateUpdateRequest) GetOriginAppId() string {
	if m != nil {
		return m.OriginAppId
	}
	return ""
}

func (m *EventStateUpdateRequest) GetEventIdentifier() *EventIdentifier {
	if m != nil {
		return m.EventIdentifier
	}
	return nil
}

func (m *EventStateUpdateRequest) GetEventUpdateState() api.EventStatus {
	if m != nil {
		return m.EventUpdateState
	}
	return api.EventStatus_PRE_TRADING
}

func (m *EventStateUpdateRequest) GetStartsAtTimestamp() int64 {
	if m != nil {
		return m.StartsAtTimestamp
	}
	return 0
}

func (m *EventStateUpdateRequest) GetStatusRequest() *StatusRequest {
	if m != nil {
		return m.StatusRequest
	}
	return nil
}

type CancelEventRequest struct {
	EventStateUpdate       *EventStateUpdateRequest  `protobuf:"bytes,1,opt,name=event_state_update,json=eventStateUpdate" json:"event_state_update,omitempty"`
	CancelBet              bool                      `protobuf:"varint,2,opt,name=cancel_bet,json=cancelBet" json:"cancel_bet,omitempty"`
	CancelBetUpToTimestamp int64                     `protobuf:"varint,3,opt,name=cancel_bet_up_to_timestamp,json=cancelBetUpToTimestamp" json:"cancel_bet_up_to_timestamp,omitempty"`
	Flags                  resulting.SettlementFlags `protobuf:"varint,4,opt,name=flags,enum=resulting.SettlementFlags" json:"flags,omitempty"`
	Provider               api.Provider              `protobuf:"varint,5,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
}

func (m *CancelEventRequest) Reset()                    { *m = CancelEventRequest{} }
func (m *CancelEventRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelEventRequest) ProtoMessage()               {}
func (*CancelEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *CancelEventRequest) GetEventStateUpdate() *EventStateUpdateRequest {
	if m != nil {
		return m.EventStateUpdate
	}
	return nil
}

func (m *CancelEventRequest) GetCancelBet() bool {
	if m != nil {
		return m.CancelBet
	}
	return false
}

func (m *CancelEventRequest) GetCancelBetUpToTimestamp() int64 {
	if m != nil {
		return m.CancelBetUpToTimestamp
	}
	return 0
}

func (m *CancelEventRequest) GetFlags() resulting.SettlementFlags {
	if m != nil {
		return m.Flags
	}
	return resulting.SettlementFlags_NONE
}

func (m *CancelEventRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

type EventStateReply struct {
	LatestEventState api.EventStatus `protobuf:"varint,1,opt,name=latest_event_state,json=latestEventState,enum=api.EventStatus" json:"latest_event_state,omitempty"`
	UpdateCount      int64           `protobuf:"varint,2,opt,name=update_count,json=updateCount" json:"update_count,omitempty"`
}

func (m *EventStateReply) Reset()                    { *m = EventStateReply{} }
func (m *EventStateReply) String() string            { return proto.CompactTextString(m) }
func (*EventStateReply) ProtoMessage()               {}
func (*EventStateReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *EventStateReply) GetLatestEventState() api.EventStatus {
	if m != nil {
		return m.LatestEventState
	}
	return api.EventStatus_PRE_TRADING
}

func (m *EventStateReply) GetUpdateCount() int64 {
	if m != nil {
		return m.UpdateCount
	}
	return 0
}

type ExtraField struct {
	// Types that are valid to be assigned to Value:
	//	*ExtraField_StringValue
	//	*ExtraField_BoolValue
	//	*ExtraField_BytesValue
	//	*ExtraField_Uint32Value
	Value isExtraField_Value `protobuf_oneof:"value"`
}

func (m *ExtraField) Reset()                    { *m = ExtraField{} }
func (m *ExtraField) String() string            { return proto.CompactTextString(m) }
func (*ExtraField) ProtoMessage()               {}
func (*ExtraField) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

type isExtraField_Value interface{ isExtraField_Value() }

type ExtraField_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}
type ExtraField_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,oneof"`
}
type ExtraField_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,3,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type ExtraField_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32_value,json=uint32Value,oneof"`
}

func (*ExtraField_StringValue) isExtraField_Value() {}
func (*ExtraField_BoolValue) isExtraField_Value()   {}
func (*ExtraField_BytesValue) isExtraField_Value()  {}
func (*ExtraField_Uint32Value) isExtraField_Value() {}

func (m *ExtraField) GetValue() isExtraField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExtraField) GetStringValue() string {
	if x, ok := m.GetValue().(*ExtraField_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ExtraField) GetBoolValue() bool {
	if x, ok := m.GetValue().(*ExtraField_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *ExtraField) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*ExtraField_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *ExtraField) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*ExtraField_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExtraField) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExtraField_OneofMarshaler, _ExtraField_OneofUnmarshaler, _ExtraField_OneofSizer, []interface{}{
		(*ExtraField_StringValue)(nil),
		(*ExtraField_BoolValue)(nil),
		(*ExtraField_BytesValue)(nil),
		(*ExtraField_Uint32Value)(nil),
	}
}

func _ExtraField_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExtraField)
	// value
	switch x := m.Value.(type) {
	case *ExtraField_StringValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *ExtraField_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ExtraField_BytesValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case *ExtraField_Uint32Value:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32Value))
	case nil:
	default:
		return fmt.Errorf("ExtraField.Value has unexpected type %T", x)
	}
	return nil
}

func _ExtraField_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExtraField)
	switch tag {
	case 1: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ExtraField_StringValue{x}
		return true, err
	case 2: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ExtraField_BoolValue{x != 0}
		return true, err
	case 3: // value.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &ExtraField_BytesValue{x}
		return true, err
	case 4: // value.uint32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ExtraField_Uint32Value{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _ExtraField_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExtraField)
	// value
	switch x := m.Value.(type) {
	case *ExtraField_StringValue:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *ExtraField_BoolValue:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case *ExtraField_BytesValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *ExtraField_Uint32Value:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Uint32Value))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FetchOrCreateEntityReply struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IsNew bool   `protobuf:"varint,2,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	// Types that are valid to be assigned to Entity:
	//	*FetchOrCreateEntityReply_Event
	//	*FetchOrCreateEntityReply_Outright
	Entity isFetchOrCreateEntityReply_Entity `protobuf_oneof:"entity"`
	// maybe we can simplify below
	PitcherChanged       bool `protobuf:"varint,3,opt,name=pitcher_changed,json=pitcherChanged" json:"pitcher_changed,omitempty"`
	TeamSwapped          bool `protobuf:"varint,4,opt,name=team_swapped,json=teamSwapped" json:"team_swapped,omitempty"`
	CompetitionUnmatched bool `protobuf:"varint,7,opt,name=competition_unmatched,json=competitionUnmatched" json:"competition_unmatched,omitempty"`
}

func (m *FetchOrCreateEntityReply) Reset()                    { *m = FetchOrCreateEntityReply{} }
func (m *FetchOrCreateEntityReply) String() string            { return proto.CompactTextString(m) }
func (*FetchOrCreateEntityReply) ProtoMessage()               {}
func (*FetchOrCreateEntityReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

type isFetchOrCreateEntityReply_Entity interface{ isFetchOrCreateEntityReply_Entity() }

type FetchOrCreateEntityReply_Event struct {
	Event *api.Event `protobuf:"bytes,5,opt,name=event,oneof"`
}
type FetchOrCreateEntityReply_Outright struct {
	Outright *api.Outright `protobuf:"bytes,6,opt,name=outright,oneof"`
}

func (*FetchOrCreateEntityReply_Event) isFetchOrCreateEntityReply_Entity()    {}
func (*FetchOrCreateEntityReply_Outright) isFetchOrCreateEntityReply_Entity() {}

func (m *FetchOrCreateEntityReply) GetEntity() isFetchOrCreateEntityReply_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *FetchOrCreateEntityReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FetchOrCreateEntityReply) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

func (m *FetchOrCreateEntityReply) GetEvent() *api.Event {
	if x, ok := m.GetEntity().(*FetchOrCreateEntityReply_Event); ok {
		return x.Event
	}
	return nil
}

func (m *FetchOrCreateEntityReply) GetOutright() *api.Outright {
	if x, ok := m.GetEntity().(*FetchOrCreateEntityReply_Outright); ok {
		return x.Outright
	}
	return nil
}

func (m *FetchOrCreateEntityReply) GetPitcherChanged() bool {
	if m != nil {
		return m.PitcherChanged
	}
	return false
}

func (m *FetchOrCreateEntityReply) GetTeamSwapped() bool {
	if m != nil {
		return m.TeamSwapped
	}
	return false
}

func (m *FetchOrCreateEntityReply) GetCompetitionUnmatched() bool {
	if m != nil {
		return m.CompetitionUnmatched
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FetchOrCreateEntityReply) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FetchOrCreateEntityReply_OneofMarshaler, _FetchOrCreateEntityReply_OneofUnmarshaler, _FetchOrCreateEntityReply_OneofSizer, []interface{}{
		(*FetchOrCreateEntityReply_Event)(nil),
		(*FetchOrCreateEntityReply_Outright)(nil),
	}
}

func _FetchOrCreateEntityReply_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FetchOrCreateEntityReply)
	// entity
	switch x := m.Entity.(type) {
	case *FetchOrCreateEntityReply_Event:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case *FetchOrCreateEntityReply_Outright:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Outright); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FetchOrCreateEntityReply.Entity has unexpected type %T", x)
	}
	return nil
}

func _FetchOrCreateEntityReply_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FetchOrCreateEntityReply)
	switch tag {
	case 5: // entity.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(api.Event)
		err := b.DecodeMessage(msg)
		m.Entity = &FetchOrCreateEntityReply_Event{msg}
		return true, err
	case 6: // entity.outright
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(api.Outright)
		err := b.DecodeMessage(msg)
		m.Entity = &FetchOrCreateEntityReply_Outright{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FetchOrCreateEntityReply_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FetchOrCreateEntityReply)
	// entity
	switch x := m.Entity.(type) {
	case *FetchOrCreateEntityReply_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FetchOrCreateEntityReply_Outright:
		s := proto.Size(x.Outright)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FetchOrCreateEventRequest struct {
	StartsAt        int64                  `protobuf:"varint,1,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	UpdatedAt       int64                  `protobuf:"varint,2,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Status          api.EventStatus        `protobuf:"varint,3,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	Pitchers        *Pitchers              `protobuf:"bytes,4,opt,name=pitchers" json:"pitchers,omitempty"`
	ProviderEventId string                 `protobuf:"bytes,5,opt,name=provider_event_id,json=providerEventId" json:"provider_event_id,omitempty"`
	SportId         uint32                 `protobuf:"varint,6,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId   uint32                 `protobuf:"varint,7,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	Source          api.Source             `protobuf:"varint,8,opt,name=source,enum=api.Source" json:"source,omitempty"`
	Provider        api.Provider           `protobuf:"varint,9,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Groups          []uint32               `protobuf:"varint,10,rep,packed,name=groups" json:"groups,omitempty"`
	Competitors     []*Competitor          `protobuf:"bytes,11,rep,name=competitors" json:"competitors,omitempty"`
	ExtraFields     map[string]*ExtraField `protobuf:"bytes,12,rep,name=extra_fields,json=extraFields" json:"extra_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FetchOrCreateEventRequest) Reset()                    { *m = FetchOrCreateEventRequest{} }
func (m *FetchOrCreateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchOrCreateEventRequest) ProtoMessage()               {}
func (*FetchOrCreateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *FetchOrCreateEventRequest) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *FetchOrCreateEventRequest) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *FetchOrCreateEventRequest) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *FetchOrCreateEventRequest) GetPitchers() *Pitchers {
	if m != nil {
		return m.Pitchers
	}
	return nil
}

func (m *FetchOrCreateEventRequest) GetProviderEventId() string {
	if m != nil {
		return m.ProviderEventId
	}
	return ""
}

func (m *FetchOrCreateEventRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *FetchOrCreateEventRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *FetchOrCreateEventRequest) GetSource() api.Source {
	if m != nil {
		return m.Source
	}
	return api.Source_LIVE
}

func (m *FetchOrCreateEventRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *FetchOrCreateEventRequest) GetGroups() []uint32 {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *FetchOrCreateEventRequest) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *FetchOrCreateEventRequest) GetExtraFields() map[string]*ExtraField {
	if m != nil {
		return m.ExtraFields
	}
	return nil
}

type UpdateOrCreateOutrightResponse struct {
	IsNew    bool          `protobuf:"varint,1,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	Outright *api.Outright `protobuf:"bytes,2,opt,name=outright" json:"outright,omitempty"`
}

func (m *UpdateOrCreateOutrightResponse) Reset()         { *m = UpdateOrCreateOutrightResponse{} }
func (m *UpdateOrCreateOutrightResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOrCreateOutrightResponse) ProtoMessage()    {}
func (*UpdateOrCreateOutrightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{11}
}

func (m *UpdateOrCreateOutrightResponse) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

func (m *UpdateOrCreateOutrightResponse) GetOutright() *api.Outright {
	if m != nil {
		return m.Outright
	}
	return nil
}

type UpdateOrCreateOutrightRequest struct {
	StartsAt      int64             `protobuf:"varint,1,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt        int64             `protobuf:"varint,2,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	FinishesAt    int64             `protobuf:"varint,3,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
	CompetitionId uint32            `protobuf:"varint,4,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	CategoryId    uint32            `protobuf:"varint,5,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	SportId       uint32            `protobuf:"varint,6,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	ProviderData  *api.ProviderData `protobuf:"bytes,7,opt,name=provider_data,json=providerData" json:"provider_data,omitempty"`
	Name          string            `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Status        api.EventStatus   `protobuf:"varint,9,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	Competitors   []*Competitor     `protobuf:"bytes,10,rep,name=competitors" json:"competitors,omitempty"`
}

func (m *UpdateOrCreateOutrightRequest) Reset()                    { *m = UpdateOrCreateOutrightRequest{} }
func (m *UpdateOrCreateOutrightRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateOrCreateOutrightRequest) ProtoMessage()               {}
func (*UpdateOrCreateOutrightRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{12} }

func (m *UpdateOrCreateOutrightRequest) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *UpdateOrCreateOutrightRequest) GetEndsAt() int64 {
	if m != nil {
		return m.EndsAt
	}
	return 0
}

func (m *UpdateOrCreateOutrightRequest) GetFinishesAt() int64 {
	if m != nil {
		return m.FinishesAt
	}
	return 0
}

func (m *UpdateOrCreateOutrightRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *UpdateOrCreateOutrightRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *UpdateOrCreateOutrightRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *UpdateOrCreateOutrightRequest) GetProviderData() *api.ProviderData {
	if m != nil {
		return m.ProviderData
	}
	return nil
}

func (m *UpdateOrCreateOutrightRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOrCreateOutrightRequest) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *UpdateOrCreateOutrightRequest) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

type FetchOrCreateGroupRequest struct {
	SportId               uint32       `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId         uint32       `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	ProviderSportId       uint32       `protobuf:"varint,3,opt,name=provider_sport_id,json=providerSportId" json:"provider_sport_id,omitempty"`
	ProviderGroupId       uint32       `protobuf:"varint,4,opt,name=provider_group_id,json=providerGroupId" json:"provider_group_id,omitempty"`
	ProviderCompetitionId uint32       `protobuf:"varint,5,opt,name=provider_competition_id,json=providerCompetitionId" json:"provider_competition_id,omitempty"`
	GroupName             string       `protobuf:"bytes,6,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	Locale                string       `protobuf:"bytes,8,opt,name=locale" json:"locale,omitempty"`
	Provider              api.Provider `protobuf:"varint,7,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
}

func (m *FetchOrCreateGroupRequest) Reset()                    { *m = FetchOrCreateGroupRequest{} }
func (m *FetchOrCreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchOrCreateGroupRequest) ProtoMessage()               {}
func (*FetchOrCreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{13} }

func (m *FetchOrCreateGroupRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *FetchOrCreateGroupRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *FetchOrCreateGroupRequest) GetProviderSportId() uint32 {
	if m != nil {
		return m.ProviderSportId
	}
	return 0
}

func (m *FetchOrCreateGroupRequest) GetProviderGroupId() uint32 {
	if m != nil {
		return m.ProviderGroupId
	}
	return 0
}

func (m *FetchOrCreateGroupRequest) GetProviderCompetitionId() uint32 {
	if m != nil {
		return m.ProviderCompetitionId
	}
	return 0
}

func (m *FetchOrCreateGroupRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *FetchOrCreateGroupRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *FetchOrCreateGroupRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

type FetchOrCreateCompetitionRequest struct {
	SportId                  uint32          `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	GroupId                  uint32          `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	ProviderSportId          uint32          `protobuf:"varint,3,opt,name=provider_sport_id,json=providerSportId" json:"provider_sport_id,omitempty"`
	ProviderCompetitionId    uint32          `protobuf:"varint,4,opt,name=provider_competition_id,json=providerCompetitionId" json:"provider_competition_id,omitempty"`
	ProviderCompetitionSubId uint32          `protobuf:"varint,5,opt,name=provider_competition_sub_id,json=providerCompetitionSubId" json:"provider_competition_sub_id,omitempty"`
	Provider                 api.Provider    `protobuf:"varint,6,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	CompetitionName          string          `protobuf:"bytes,7,opt,name=competition_name,json=competitionName" json:"competition_name,omitempty"`
	CompetitionKeys          []string        `protobuf:"bytes,8,rep,name=competition_keys,json=competitionKeys" json:"competition_keys,omitempty"`
	Groups                   []uint32        `protobuf:"varint,9,rep,packed,name=groups" json:"groups,omitempty"`
	Locale                   string          `protobuf:"bytes,11,opt,name=locale" json:"locale,omitempty"`
	SaveDefaultTranslation   bool            `protobuf:"varint,10,opt,name=save_default_translation,json=saveDefaultTranslation" json:"save_default_translation,omitempty"`
	Tags                     []api.EntityTag `protobuf:"varint,12,rep,packed,name=tags,enum=api.EntityTag" json:"tags,omitempty"`
}

func (m *FetchOrCreateCompetitionRequest) Reset()         { *m = FetchOrCreateCompetitionRequest{} }
func (m *FetchOrCreateCompetitionRequest) String() string { return proto.CompactTextString(m) }
func (*FetchOrCreateCompetitionRequest) ProtoMessage()    {}
func (*FetchOrCreateCompetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{14}
}

func (m *FetchOrCreateCompetitionRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *FetchOrCreateCompetitionRequest) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *FetchOrCreateCompetitionRequest) GetProviderSportId() uint32 {
	if m != nil {
		return m.ProviderSportId
	}
	return 0
}

func (m *FetchOrCreateCompetitionRequest) GetProviderCompetitionId() uint32 {
	if m != nil {
		return m.ProviderCompetitionId
	}
	return 0
}

func (m *FetchOrCreateCompetitionRequest) GetProviderCompetitionSubId() uint32 {
	if m != nil {
		return m.ProviderCompetitionSubId
	}
	return 0
}

func (m *FetchOrCreateCompetitionRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *FetchOrCreateCompetitionRequest) GetCompetitionName() string {
	if m != nil {
		return m.CompetitionName
	}
	return ""
}

func (m *FetchOrCreateCompetitionRequest) GetCompetitionKeys() []string {
	if m != nil {
		return m.CompetitionKeys
	}
	return nil
}

func (m *FetchOrCreateCompetitionRequest) GetGroups() []uint32 {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *FetchOrCreateCompetitionRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *FetchOrCreateCompetitionRequest) GetSaveDefaultTranslation() bool {
	if m != nil {
		return m.SaveDefaultTranslation
	}
	return false
}

func (m *FetchOrCreateCompetitionRequest) GetTags() []api.EntityTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type FetchOrCreateSportRequest struct {
	ProviderSportId uint32       `protobuf:"varint,1,opt,name=provider_sport_id,json=providerSportId" json:"provider_sport_id,omitempty"`
	SportName       string       `protobuf:"bytes,2,opt,name=sport_name,json=sportName" json:"sport_name,omitempty"`
	Provider        api.Provider `protobuf:"varint,3,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Locale          string       `protobuf:"bytes,4,opt,name=locale" json:"locale,omitempty"`
}

func (m *FetchOrCreateSportRequest) Reset()                    { *m = FetchOrCreateSportRequest{} }
func (m *FetchOrCreateSportRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchOrCreateSportRequest) ProtoMessage()               {}
func (*FetchOrCreateSportRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{15} }

func (m *FetchOrCreateSportRequest) GetProviderSportId() uint32 {
	if m != nil {
		return m.ProviderSportId
	}
	return 0
}

func (m *FetchOrCreateSportRequest) GetSportName() string {
	if m != nil {
		return m.SportName
	}
	return ""
}

func (m *FetchOrCreateSportRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *FetchOrCreateSportRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

type FetchOrCreateCompetitorRequest struct {
	SportId                uint32          `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId          uint32          `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	ProviderCompetitorId   uint32          `protobuf:"varint,3,opt,name=provider_competitor_id,json=providerCompetitorId" json:"provider_competitor_id,omitempty"`
	ProviderCompetitorKeys []string        `protobuf:"bytes,4,rep,name=provider_competitor_keys,json=providerCompetitorKeys" json:"provider_competitor_keys,omitempty"`
	CompetitorName         string          `protobuf:"bytes,5,opt,name=competitor_name,json=competitorName" json:"competitor_name,omitempty"`
	Locale                 string          `protobuf:"bytes,8,opt,name=locale" json:"locale,omitempty"`
	CompetitorType         string          `protobuf:"bytes,6,opt,name=competitor_type,json=competitorType" json:"competitor_type,omitempty"`
	Provider               api.Provider    `protobuf:"varint,7,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderCompetitionId  uint32          `protobuf:"varint,9,opt,name=provider_competition_id,json=providerCompetitionId" json:"provider_competition_id,omitempty"`
	ProviderSportId        uint32          `protobuf:"varint,10,opt,name=provider_sport_id,json=providerSportId" json:"provider_sport_id,omitempty"`
	Tags                   []api.EntityTag `protobuf:"varint,11,rep,packed,name=tags,enum=api.EntityTag" json:"tags,omitempty"`
	IsOutright             bool            `protobuf:"varint,12,opt,name=is_outright,json=isOutright" json:"is_outright,omitempty"`
}

func (m *FetchOrCreateCompetitorRequest) Reset()         { *m = FetchOrCreateCompetitorRequest{} }
func (m *FetchOrCreateCompetitorRequest) String() string { return proto.CompactTextString(m) }
func (*FetchOrCreateCompetitorRequest) ProtoMessage()    {}
func (*FetchOrCreateCompetitorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{16}
}

func (m *FetchOrCreateCompetitorRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *FetchOrCreateCompetitorRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *FetchOrCreateCompetitorRequest) GetProviderCompetitorId() uint32 {
	if m != nil {
		return m.ProviderCompetitorId
	}
	return 0
}

func (m *FetchOrCreateCompetitorRequest) GetProviderCompetitorKeys() []string {
	if m != nil {
		return m.ProviderCompetitorKeys
	}
	return nil
}

func (m *FetchOrCreateCompetitorRequest) GetCompetitorName() string {
	if m != nil {
		return m.CompetitorName
	}
	return ""
}

func (m *FetchOrCreateCompetitorRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *FetchOrCreateCompetitorRequest) GetCompetitorType() string {
	if m != nil {
		return m.CompetitorType
	}
	return ""
}

func (m *FetchOrCreateCompetitorRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *FetchOrCreateCompetitorRequest) GetProviderCompetitionId() uint32 {
	if m != nil {
		return m.ProviderCompetitionId
	}
	return 0
}

func (m *FetchOrCreateCompetitorRequest) GetProviderSportId() uint32 {
	if m != nil {
		return m.ProviderSportId
	}
	return 0
}

func (m *FetchOrCreateCompetitorRequest) GetTags() []api.EntityTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FetchOrCreateCompetitorRequest) GetIsOutright() bool {
	if m != nil {
		return m.IsOutright
	}
	return false
}

type UpdateEventRequest struct {
	Id          uint32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartsAt    int64                  `protobuf:"varint,2,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	UpdatedAt   int64                  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	Status      api.EventStatus        `protobuf:"varint,4,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	Pitchers    *Pitchers              `protobuf:"bytes,5,opt,name=pitchers" json:"pitchers,omitempty"`
	ExtraFields map[string]*ExtraField `protobuf:"bytes,6,rep,name=extra_fields,json=extraFields" json:"extra_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Provider    api.Provider           `protobuf:"varint,7,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Groups      []uint32               `protobuf:"varint,8,rep,packed,name=groups" json:"groups,omitempty"`
	Metadata    *api.EventMetadata     `protobuf:"bytes,9,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *UpdateEventRequest) Reset()                    { *m = UpdateEventRequest{} }
func (m *UpdateEventRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventRequest) ProtoMessage()               {}
func (*UpdateEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{17} }

func (m *UpdateEventRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateEventRequest) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *UpdateEventRequest) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *UpdateEventRequest) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *UpdateEventRequest) GetPitchers() *Pitchers {
	if m != nil {
		return m.Pitchers
	}
	return nil
}

func (m *UpdateEventRequest) GetExtraFields() map[string]*ExtraField {
	if m != nil {
		return m.ExtraFields
	}
	return nil
}

func (m *UpdateEventRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *UpdateEventRequest) GetGroups() []uint32 {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateEventRequest) GetMetadata() *api.EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type UpdateEventRequestV2 struct {
	SportId uint32 `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	// If GenericEventID>0, UPDATEEVENT
	// Else MatchOrCreate Event
	EventId         uint32             `protobuf:"varint,4,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Status          api.EventStatus    `protobuf:"varint,5,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	StartsAt        int64              `protobuf:"varint,6,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	ProviderData    *api.ProviderData  `protobuf:"bytes,13,opt,name=provider_data,json=providerData" json:"provider_data,omitempty"`
	ProviderEventId uint32             `protobuf:"varint,8,opt,name=provider_event_id,json=providerEventId" json:"provider_event_id,omitempty"`
	Pitchers        *Pitchers          `protobuf:"bytes,9,opt,name=pitchers" json:"pitchers,omitempty"`
	Competitors     []*Competitor      `protobuf:"bytes,11,rep,name=competitors" json:"competitors,omitempty"`
	Metadata        *api.EventMetadata `protobuf:"bytes,12,opt,name=metadata" json:"metadata,omitempty"`
	Competition     *Competition       `protobuf:"bytes,15,opt,name=competition" json:"competition,omitempty"`
	// deprecated
	Provider               api.Provider `protobuf:"varint,7,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	LiveAvailable          bool         `protobuf:"varint,10,opt,name=live_available,json=liveAvailable" json:"live_available,omitempty"`
	ProviderCompetitionKey string       `protobuf:"bytes,14,opt,name=provider_competition_key,json=providerCompetitionKey" json:"provider_competition_key,omitempty"`
	Groups                 []uint32     `protobuf:"varint,3,rep,packed,name=groups" json:"groups,omitempty"`
	CompetitionId          uint32       `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
}

func (m *UpdateEventRequestV2) Reset()                    { *m = UpdateEventRequestV2{} }
func (m *UpdateEventRequestV2) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventRequestV2) ProtoMessage()               {}
func (*UpdateEventRequestV2) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{18} }

func (m *UpdateEventRequestV2) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *UpdateEventRequestV2) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *UpdateEventRequestV2) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *UpdateEventRequestV2) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *UpdateEventRequestV2) GetProviderData() *api.ProviderData {
	if m != nil {
		return m.ProviderData
	}
	return nil
}

func (m *UpdateEventRequestV2) GetProviderEventId() uint32 {
	if m != nil {
		return m.ProviderEventId
	}
	return 0
}

func (m *UpdateEventRequestV2) GetPitchers() *Pitchers {
	if m != nil {
		return m.Pitchers
	}
	return nil
}

func (m *UpdateEventRequestV2) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *UpdateEventRequestV2) GetMetadata() *api.EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdateEventRequestV2) GetCompetition() *Competition {
	if m != nil {
		return m.Competition
	}
	return nil
}

func (m *UpdateEventRequestV2) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *UpdateEventRequestV2) GetLiveAvailable() bool {
	if m != nil {
		return m.LiveAvailable
	}
	return false
}

func (m *UpdateEventRequestV2) GetProviderCompetitionKey() string {
	if m != nil {
		return m.ProviderCompetitionKey
	}
	return ""
}

func (m *UpdateEventRequestV2) GetGroups() []uint32 {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateEventRequestV2) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

type UpdateMetadataRequest struct {
	SportId       uint32                `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId uint32                `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	EventId       uint32                `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Provider      api.Provider          `protobuf:"varint,4,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	Media         *api.EventMedia       `protobuf:"bytes,5,opt,name=media" json:"media,omitempty"`
	Availability  api.AvailabilityFlags `protobuf:"varint,6,opt,name=availability,enum=api.AvailabilityFlags" json:"availability,omitempty"`
	Metadata      *api.EventMetadata    `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *UpdateMetadataRequest) Reset()                    { *m = UpdateMetadataRequest{} }
func (m *UpdateMetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMetadataRequest) ProtoMessage()               {}
func (*UpdateMetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{19} }

func (m *UpdateMetadataRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *UpdateMetadataRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *UpdateMetadataRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *UpdateMetadataRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *UpdateMetadataRequest) GetMedia() *api.EventMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *UpdateMetadataRequest) GetAvailability() api.AvailabilityFlags {
	if m != nil {
		return m.Availability
	}
	return api.AvailabilityFlags_UNAVAILABLE
}

func (m *UpdateMetadataRequest) GetMetadata() *api.EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type UpdateEventReply struct {
	PitcherChanged       bool   `protobuf:"varint,1,opt,name=pitcher_changed,json=pitcherChanged" json:"pitcher_changed,omitempty"`
	PitcherChangeComment string `protobuf:"bytes,2,opt,name=pitcher_change_comment,json=pitcherChangeComment" json:"pitcher_change_comment,omitempty"`
	CurrentStartsAt      int64  `protobuf:"varint,3,opt,name=current_starts_at,json=currentStartsAt" json:"current_starts_at,omitempty"`
	StartsAtDiff         int64  `protobuf:"varint,4,opt,name=starts_at_diff,json=startsAtDiff" json:"starts_at_diff,omitempty"`
}

func (m *UpdateEventReply) Reset()                    { *m = UpdateEventReply{} }
func (m *UpdateEventReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventReply) ProtoMessage()               {}
func (*UpdateEventReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{20} }

func (m *UpdateEventReply) GetPitcherChanged() bool {
	if m != nil {
		return m.PitcherChanged
	}
	return false
}

func (m *UpdateEventReply) GetPitcherChangeComment() string {
	if m != nil {
		return m.PitcherChangeComment
	}
	return ""
}

func (m *UpdateEventReply) GetCurrentStartsAt() int64 {
	if m != nil {
		return m.CurrentStartsAt
	}
	return 0
}

func (m *UpdateEventReply) GetStartsAtDiff() int64 {
	if m != nil {
		return m.StartsAtDiff
	}
	return 0
}

type StatusRequest struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{21} }

func (m *StatusRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StatusRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TranslationRequest struct {
	Locale      string `protobuf:"bytes,1,opt,name=locale" json:"locale,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id          uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Translation string `protobuf:"bytes,4,opt,name=translation" json:"translation,omitempty"`
}

func (m *TranslationRequest) Reset()                    { *m = TranslationRequest{} }
func (m *TranslationRequest) String() string            { return proto.CompactTextString(m) }
func (*TranslationRequest) ProtoMessage()               {}
func (*TranslationRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{22} }

func (m *TranslationRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

func (m *TranslationRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TranslationRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TranslationRequest) GetTranslation() string {
	if m != nil {
		return m.Translation
	}
	return ""
}

type TranslationReply struct {
	Translation string `protobuf:"bytes,1,opt,name=translation" json:"translation,omitempty"`
}

func (m *TranslationReply) Reset()                    { *m = TranslationReply{} }
func (m *TranslationReply) String() string            { return proto.CompactTextString(m) }
func (*TranslationReply) ProtoMessage()               {}
func (*TranslationReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{23} }

func (m *TranslationReply) GetTranslation() string {
	if m != nil {
		return m.Translation
	}
	return ""
}

type EntityRequest struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Locale string `protobuf:"bytes,2,opt,name=locale" json:"locale,omitempty"`
}

func (m *EntityRequest) Reset()                    { *m = EntityRequest{} }
func (m *EntityRequest) String() string            { return proto.CompactTextString(m) }
func (*EntityRequest) ProtoMessage()               {}
func (*EntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{24} }

func (m *EntityRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EntityRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

type EntitiesRequest struct {
	Ids    *Uint32List `protobuf:"bytes,1,opt,name=ids" json:"ids,omitempty"`
	Locale string      `protobuf:"bytes,2,opt,name=locale" json:"locale,omitempty"`
}

func (m *EntitiesRequest) Reset()                    { *m = EntitiesRequest{} }
func (m *EntitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*EntitiesRequest) ProtoMessage()               {}
func (*EntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{25} }

func (m *EntitiesRequest) GetIds() *Uint32List {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *EntitiesRequest) GetLocale() string {
	if m != nil {
		return m.Locale
	}
	return ""
}

type EventReply struct {
	StartsAt          int64               `protobuf:"varint,1,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	UpdatedAt         int64               `protobuf:"varint,2,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	SportId           uint32              `protobuf:"varint,3,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId     uint32              `protobuf:"varint,4,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	ParlayRestriction uint32              `protobuf:"varint,5,opt,name=parlay_restriction,json=parlayRestriction" json:"parlay_restriction,omitempty"`
	Status            api.EventStatus     `protobuf:"varint,6,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	Groups            []*Group            `protobuf:"bytes,10,rep,name=groups" json:"groups,omitempty"`
	Competitors       []*Competitor       `protobuf:"bytes,11,rep,name=competitors" json:"competitors,omitempty"`
	Pitchers          *Pitchers           `protobuf:"bytes,12,opt,name=pitchers" json:"pitchers,omitempty"`
	Providers         []*api.ProviderData `protobuf:"bytes,9,rep,name=providers" json:"providers,omitempty"`
	Metadata          *api.EventMetadata  `protobuf:"bytes,13,opt,name=metadata" json:"metadata,omitempty"`
	// deprecated attribute below
	GroupIds        []uint32 `protobuf:"varint,7,rep,packed,name=group_ids,json=groupIds" json:"group_ids,omitempty"`
	CompetitorsName []string `protobuf:"bytes,8,rep,name=competitors_name,json=competitorsName" json:"competitors_name,omitempty"`
}

func (m *EventReply) Reset()                    { *m = EventReply{} }
func (m *EventReply) String() string            { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()               {}
func (*EventReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{26} }

func (m *EventReply) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *EventReply) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *EventReply) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *EventReply) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *EventReply) GetParlayRestriction() uint32 {
	if m != nil {
		return m.ParlayRestriction
	}
	return 0
}

func (m *EventReply) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *EventReply) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *EventReply) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

func (m *EventReply) GetPitchers() *Pitchers {
	if m != nil {
		return m.Pitchers
	}
	return nil
}

func (m *EventReply) GetProviders() []*api.ProviderData {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *EventReply) GetMetadata() *api.EventMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *EventReply) GetGroupIds() []uint32 {
	if m != nil {
		return m.GroupIds
	}
	return nil
}

func (m *EventReply) GetCompetitorsName() []string {
	if m != nil {
		return m.CompetitorsName
	}
	return nil
}

type Group struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{27} }

func (m *Group) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type CompetitionReply struct {
	SportId uint32   `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	Groups  []*Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	Name    string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Id      uint32   `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *CompetitionReply) Reset()                    { *m = CompetitionReply{} }
func (m *CompetitionReply) String() string            { return proto.CompactTextString(m) }
func (*CompetitionReply) ProtoMessage()               {}
func (*CompetitionReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{28} }

func (m *CompetitionReply) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *CompetitionReply) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *CompetitionReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CompetitionReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OutrightReply struct {
	CreatedAt     int64               `protobuf:"varint,1,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt     int64               `protobuf:"varint,2,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	StartsAt      int64               `protobuf:"varint,3,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	EndsAt        int64               `protobuf:"varint,4,opt,name=ends_at,json=endsAt" json:"ends_at,omitempty"`
	FinishesAt    int64               `protobuf:"varint,5,opt,name=finishes_at,json=finishesAt" json:"finishes_at,omitempty"`
	SportId       uint32              `protobuf:"varint,6,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId uint32              `protobuf:"varint,7,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	Providers     []*api.ProviderData `protobuf:"bytes,8,rep,name=providers" json:"providers,omitempty"`
	Status        api.EventStatus     `protobuf:"varint,9,opt,name=status,enum=api.EventStatus" json:"status,omitempty"`
	Groups        []*Group            `protobuf:"bytes,10,rep,name=groups" json:"groups,omitempty"`
	Competitors   []*Competitor       `protobuf:"bytes,11,rep,name=competitors" json:"competitors,omitempty"`
}

func (m *OutrightReply) Reset()                    { *m = OutrightReply{} }
func (m *OutrightReply) String() string            { return proto.CompactTextString(m) }
func (*OutrightReply) ProtoMessage()               {}
func (*OutrightReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{29} }

func (m *OutrightReply) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *OutrightReply) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *OutrightReply) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *OutrightReply) GetEndsAt() int64 {
	if m != nil {
		return m.EndsAt
	}
	return 0
}

func (m *OutrightReply) GetFinishesAt() int64 {
	if m != nil {
		return m.FinishesAt
	}
	return 0
}

func (m *OutrightReply) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *OutrightReply) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *OutrightReply) GetProviders() []*api.ProviderData {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *OutrightReply) GetStatus() api.EventStatus {
	if m != nil {
		return m.Status
	}
	return api.EventStatus_PRE_TRADING
}

func (m *OutrightReply) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *OutrightReply) GetCompetitors() []*Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

type CompetitorReply struct {
	SportId       uint32 `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId uint32 `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// Please input upper case of provider name (from Provider enum)
	ProviderData map[string]*api.ProviderData `protobuf:"bytes,4,rep,name=provider_data,json=providerData" json:"provider_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Id           uint32                       `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
}

func (m *CompetitorReply) Reset()                    { *m = CompetitorReply{} }
func (m *CompetitorReply) String() string            { return proto.CompactTextString(m) }
func (*CompetitorReply) ProtoMessage()               {}
func (*CompetitorReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{30} }

func (m *CompetitorReply) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *CompetitorReply) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *CompetitorReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CompetitorReply) GetProviderData() map[string]*api.ProviderData {
	if m != nil {
		return m.ProviderData
	}
	return nil
}

func (m *CompetitorReply) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GroupReply struct {
	SportId       uint32 `protobuf:"varint,1,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionId uint32 `protobuf:"varint,2,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *GroupReply) Reset()                    { *m = GroupReply{} }
func (m *GroupReply) String() string            { return proto.CompactTextString(m) }
func (*GroupReply) ProtoMessage()               {}
func (*GroupReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{31} }

func (m *GroupReply) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *GroupReply) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *GroupReply) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type SportReply struct {
	Key       string              `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Providers []*api.ProviderData `protobuf:"bytes,2,rep,name=providers" json:"providers,omitempty"`
}

func (m *SportReply) Reset()                    { *m = SportReply{} }
func (m *SportReply) String() string            { return proto.CompactTextString(m) }
func (*SportReply) ProtoMessage()               {}
func (*SportReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{32} }

func (m *SportReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SportReply) GetProviders() []*api.ProviderData {
	if m != nil {
		return m.Providers
	}
	return nil
}

type MatchingOverviewRequest struct {
	EntityType api.SportsEntityTypes `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
}

func (m *MatchingOverviewRequest) Reset()                    { *m = MatchingOverviewRequest{} }
func (m *MatchingOverviewRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchingOverviewRequest) ProtoMessage()               {}
func (*MatchingOverviewRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{33} }

func (m *MatchingOverviewRequest) GetEntityType() api.SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return api.SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

type MatchingOverviewReply struct {
	ProviderOverviews map[string]*api.MatchCountByProvider `protobuf:"bytes,1,rep,name=provider_overviews,json=providerOverviews" json:"provider_overviews,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MatchingOverviewReply) Reset()                    { *m = MatchingOverviewReply{} }
func (m *MatchingOverviewReply) String() string            { return proto.CompactTextString(m) }
func (*MatchingOverviewReply) ProtoMessage()               {}
func (*MatchingOverviewReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{34} }

func (m *MatchingOverviewReply) GetProviderOverviews() map[string]*api.MatchCountByProvider {
	if m != nil {
		return m.ProviderOverviews
	}
	return nil
}

type ModifyGroupsOnEntityRequest struct {
	Command    Command               `protobuf:"varint,1,opt,name=command,enum=internalrpc.Command" json:"command,omitempty"`
	EntityType api.SportsEntityTypes `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
	EntityId   uint32                `protobuf:"varint,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	GroupId    uint32                `protobuf:"varint,4,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *ModifyGroupsOnEntityRequest) Reset()                    { *m = ModifyGroupsOnEntityRequest{} }
func (m *ModifyGroupsOnEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyGroupsOnEntityRequest) ProtoMessage()               {}
func (*ModifyGroupsOnEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{35} }

func (m *ModifyGroupsOnEntityRequest) GetCommand() Command {
	if m != nil {
		return m.Command
	}
	return Command_ADD
}

func (m *ModifyGroupsOnEntityRequest) GetEntityType() api.SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return api.SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

func (m *ModifyGroupsOnEntityRequest) GetEntityId() uint32 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

func (m *ModifyGroupsOnEntityRequest) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type AddCategoryOnEntityRequest struct {
	Entity     *api.Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	CategoryId uint32      `protobuf:"varint,2,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *AddCategoryOnEntityRequest) Reset()                    { *m = AddCategoryOnEntityRequest{} }
func (m *AddCategoryOnEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCategoryOnEntityRequest) ProtoMessage()               {}
func (*AddCategoryOnEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{36} }

func (m *AddCategoryOnEntityRequest) GetEntity() *api.Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *AddCategoryOnEntityRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type CompetitionProviderOutrightRequest struct {
	CompetitionId uint32       `protobuf:"varint,1,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	Provider      api.Provider `protobuf:"varint,2,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	OutrightId    uint32       `protobuf:"varint,3,opt,name=outright_id,json=outrightId" json:"outright_id,omitempty"`
}

func (m *CompetitionProviderOutrightRequest) Reset()         { *m = CompetitionProviderOutrightRequest{} }
func (m *CompetitionProviderOutrightRequest) String() string { return proto.CompactTextString(m) }
func (*CompetitionProviderOutrightRequest) ProtoMessage()    {}
func (*CompetitionProviderOutrightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{37}
}

func (m *CompetitionProviderOutrightRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *CompetitionProviderOutrightRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *CompetitionProviderOutrightRequest) GetOutrightId() uint32 {
	if m != nil {
		return m.OutrightId
	}
	return 0
}

type CompetitionProviderOutrightReply struct {
	ProviderOutrights map[string]*Uint32List `protobuf:"bytes,1,rep,name=provider_outrights,json=providerOutrights" json:"provider_outrights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsNew             bool                   `protobuf:"varint,2,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
}

func (m *CompetitionProviderOutrightReply) Reset()         { *m = CompetitionProviderOutrightReply{} }
func (m *CompetitionProviderOutrightReply) String() string { return proto.CompactTextString(m) }
func (*CompetitionProviderOutrightReply) ProtoMessage()    {}
func (*CompetitionProviderOutrightReply) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{38}
}

func (m *CompetitionProviderOutrightReply) GetProviderOutrights() map[string]*Uint32List {
	if m != nil {
		return m.ProviderOutrights
	}
	return nil
}

func (m *CompetitionProviderOutrightReply) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

type CancelledMarketListRequest struct {
	TimeRange  int64  `protobuf:"varint,1,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	TotalItems uint32 `protobuf:"varint,2,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
	Source     string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (m *CancelledMarketListRequest) Reset()                    { *m = CancelledMarketListRequest{} }
func (m *CancelledMarketListRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelledMarketListRequest) ProtoMessage()               {}
func (*CancelledMarketListRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{39} }

func (m *CancelledMarketListRequest) GetTimeRange() int64 {
	if m != nil {
		return m.TimeRange
	}
	return 0
}

func (m *CancelledMarketListRequest) GetTotalItems() uint32 {
	if m != nil {
		return m.TotalItems
	}
	return 0
}

func (m *CancelledMarketListRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type MergeRequest struct {
	EntityType    api.SportsEntityTypes `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
	SourceId      uint32                `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	DestinationId uint32                `protobuf:"varint,3,opt,name=destination_id,json=destinationId" json:"destination_id,omitempty"`
	Author        string                `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
}

func (m *MergeRequest) Reset()                    { *m = MergeRequest{} }
func (m *MergeRequest) String() string            { return proto.CompactTextString(m) }
func (*MergeRequest) ProtoMessage()               {}
func (*MergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{40} }

func (m *MergeRequest) GetEntityType() api.SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return api.SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

func (m *MergeRequest) GetSourceId() uint32 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *MergeRequest) GetDestinationId() uint32 {
	if m != nil {
		return m.DestinationId
	}
	return 0
}

func (m *MergeRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type UnmergeRequest struct {
	EntityType api.SportsEntityTypes `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
	Id         uint32                `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *UnmergeRequest) Reset()                    { *m = UnmergeRequest{} }
func (m *UnmergeRequest) String() string            { return proto.CompactTextString(m) }
func (*UnmergeRequest) ProtoMessage()               {}
func (*UnmergeRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{41} }

func (m *UnmergeRequest) GetEntityType() api.SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return api.SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

func (m *UnmergeRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMergedEntitiesRequest struct {
	EntityType api.SportsEntityTypes `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
}

func (m *GetMergedEntitiesRequest) Reset()                    { *m = GetMergedEntitiesRequest{} }
func (m *GetMergedEntitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMergedEntitiesRequest) ProtoMessage()               {}
func (*GetMergedEntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{42} }

func (m *GetMergedEntitiesRequest) GetEntityType() api.SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return api.SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

type GetCompetitorsReply struct {
	Competitors map[uint32]*api.Competitor `protobuf:"bytes,1,rep,name=competitors" json:"competitors,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetCompetitorsReply) Reset()                    { *m = GetCompetitorsReply{} }
func (m *GetCompetitorsReply) String() string            { return proto.CompactTextString(m) }
func (*GetCompetitorsReply) ProtoMessage()               {}
func (*GetCompetitorsReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{43} }

func (m *GetCompetitorsReply) GetCompetitors() map[uint32]*api.Competitor {
	if m != nil {
		return m.Competitors
	}
	return nil
}

type GetCompetitionsReply struct {
	Competitions map[uint32]*api.Competition `protobuf:"bytes,1,rep,name=competitions" json:"competitions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetCompetitionsReply) Reset()                    { *m = GetCompetitionsReply{} }
func (m *GetCompetitionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetCompetitionsReply) ProtoMessage()               {}
func (*GetCompetitionsReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{44} }

func (m *GetCompetitionsReply) GetCompetitions() map[uint32]*api.Competition {
	if m != nil {
		return m.Competitions
	}
	return nil
}

type TranslationMap struct {
	Translation map[string]string `protobuf:"bytes,1,rep,name=translation" json:"translation,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TranslationMap) Reset()                    { *m = TranslationMap{} }
func (m *TranslationMap) String() string            { return proto.CompactTextString(m) }
func (*TranslationMap) ProtoMessage()               {}
func (*TranslationMap) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{45} }

func (m *TranslationMap) GetTranslation() map[string]string {
	if m != nil {
		return m.Translation
	}
	return nil
}

// key as PK and TranslationMap as value - language and content
type TranslationMaps struct {
	Translation map[string]*TranslationMap `protobuf:"bytes,1,rep,name=translation" json:"translation,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TranslationMaps) Reset()                    { *m = TranslationMaps{} }
func (m *TranslationMaps) String() string            { return proto.CompactTextString(m) }
func (*TranslationMaps) ProtoMessage()               {}
func (*TranslationMaps) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{46} }

func (m *TranslationMaps) GetTranslation() map[string]*TranslationMap {
	if m != nil {
		return m.Translation
	}
	return nil
}

type MatchCompetitionRequest struct {
	Provider        api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey     string       `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	CompetitionId   uint32       `protobuf:"varint,3,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	CompetitionName string       `protobuf:"bytes,4,opt,name=competition_name,json=competitionName" json:"competition_name,omitempty"`
}

func (m *MatchCompetitionRequest) Reset()                    { *m = MatchCompetitionRequest{} }
func (m *MatchCompetitionRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchCompetitionRequest) ProtoMessage()               {}
func (*MatchCompetitionRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{47} }

func (m *MatchCompetitionRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *MatchCompetitionRequest) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *MatchCompetitionRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *MatchCompetitionRequest) GetCompetitionName() string {
	if m != nil {
		return m.CompetitionName
	}
	return ""
}

type UnmatchCompetitionRequest struct {
	Provider      api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey   string       `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	CompetitionId uint32       `protobuf:"varint,3,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
}

func (m *UnmatchCompetitionRequest) Reset()                    { *m = UnmatchCompetitionRequest{} }
func (m *UnmatchCompetitionRequest) String() string            { return proto.CompactTextString(m) }
func (*UnmatchCompetitionRequest) ProtoMessage()               {}
func (*UnmatchCompetitionRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{48} }

func (m *UnmatchCompetitionRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *UnmatchCompetitionRequest) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *UnmatchCompetitionRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

type GetMatchedCompetitionsRequest struct {
	Provider   api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	SportId    uint32       `protobuf:"varint,2,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CategoryId uint32       `protobuf:"varint,3,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *GetMatchedCompetitionsRequest) Reset()                    { *m = GetMatchedCompetitionsRequest{} }
func (m *GetMatchedCompetitionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMatchedCompetitionsRequest) ProtoMessage()               {}
func (*GetMatchedCompetitionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{49} }

func (m *GetMatchedCompetitionsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *GetMatchedCompetitionsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *GetMatchedCompetitionsRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type GetUnmatchedCompetitionsRequest struct {
	Provider   api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	SportId    uint32       `protobuf:"varint,2,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CategoryId uint32       `protobuf:"varint,3,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *GetUnmatchedCompetitionsRequest) Reset()         { *m = GetUnmatchedCompetitionsRequest{} }
func (m *GetUnmatchedCompetitionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUnmatchedCompetitionsRequest) ProtoMessage()    {}
func (*GetUnmatchedCompetitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{50}
}

func (m *GetUnmatchedCompetitionsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *GetUnmatchedCompetitionsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *GetUnmatchedCompetitionsRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type MatchCompetitorRequest struct {
	Provider       api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey    string       `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	CompetitionId  uint32       `protobuf:"varint,3,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	CompetitorId   uint32       `protobuf:"varint,4,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	CompetitorName string       `protobuf:"bytes,5,opt,name=competitor_name,json=competitorName" json:"competitor_name,omitempty"`
}

func (m *MatchCompetitorRequest) Reset()                    { *m = MatchCompetitorRequest{} }
func (m *MatchCompetitorRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchCompetitorRequest) ProtoMessage()               {}
func (*MatchCompetitorRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{51} }

func (m *MatchCompetitorRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *MatchCompetitorRequest) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *MatchCompetitorRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *MatchCompetitorRequest) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

func (m *MatchCompetitorRequest) GetCompetitorName() string {
	if m != nil {
		return m.CompetitorName
	}
	return ""
}

type UnmatchCompetitorRequest struct {
	Provider      api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderKey   string       `protobuf:"bytes,2,opt,name=provider_key,json=providerKey" json:"provider_key,omitempty"`
	CompetitionId uint32       `protobuf:"varint,3,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	CompetitorId  uint32       `protobuf:"varint,4,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
}

func (m *UnmatchCompetitorRequest) Reset()                    { *m = UnmatchCompetitorRequest{} }
func (m *UnmatchCompetitorRequest) String() string            { return proto.CompactTextString(m) }
func (*UnmatchCompetitorRequest) ProtoMessage()               {}
func (*UnmatchCompetitorRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{52} }

func (m *UnmatchCompetitorRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *UnmatchCompetitorRequest) GetProviderKey() string {
	if m != nil {
		return m.ProviderKey
	}
	return ""
}

func (m *UnmatchCompetitorRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *UnmatchCompetitorRequest) GetCompetitorId() uint32 {
	if m != nil {
		return m.CompetitorId
	}
	return 0
}

type GetMatchedCompetitorsRequest struct {
	Provider       api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	CompetitionIds []uint32     `protobuf:"varint,2,rep,packed,name=competition_ids,json=competitionIds" json:"competition_ids,omitempty"`
}

func (m *GetMatchedCompetitorsRequest) Reset()                    { *m = GetMatchedCompetitorsRequest{} }
func (m *GetMatchedCompetitorsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMatchedCompetitorsRequest) ProtoMessage()               {}
func (*GetMatchedCompetitorsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{53} }

func (m *GetMatchedCompetitorsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *GetMatchedCompetitorsRequest) GetCompetitionIds() []uint32 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

type GetUnmatchedCompetitorsRequest struct {
	Provider       api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	CompetitorName string       `protobuf:"bytes,2,opt,name=competitor_name,json=competitorName" json:"competitor_name,omitempty"`
}

func (m *GetUnmatchedCompetitorsRequest) Reset()         { *m = GetUnmatchedCompetitorsRequest{} }
func (m *GetUnmatchedCompetitorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetUnmatchedCompetitorsRequest) ProtoMessage()    {}
func (*GetUnmatchedCompetitorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{54}
}

func (m *GetUnmatchedCompetitorsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *GetUnmatchedCompetitorsRequest) GetCompetitorName() string {
	if m != nil {
		return m.CompetitorName
	}
	return ""
}

type MatchEventRequest struct {
	UnmatchedEventId uint32 `protobuf:"varint,1,opt,name=unmatched_event_id,json=unmatchedEventId" json:"unmatched_event_id,omitempty"`
	EventId          uint32 `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (m *MatchEventRequest) Reset()                    { *m = MatchEventRequest{} }
func (m *MatchEventRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchEventRequest) ProtoMessage()               {}
func (*MatchEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{55} }

func (m *MatchEventRequest) GetUnmatchedEventId() uint32 {
	if m != nil {
		return m.UnmatchedEventId
	}
	return 0
}

func (m *MatchEventRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type GetMatchedEventsRequest struct {
	Provider       api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	SportId        uint32       `protobuf:"varint,2,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionIds []uint32     `protobuf:"varint,3,rep,packed,name=competition_ids,json=competitionIds" json:"competition_ids,omitempty"`
	CategoryId     uint32       `protobuf:"varint,4,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *GetMatchedEventsRequest) Reset()                    { *m = GetMatchedEventsRequest{} }
func (m *GetMatchedEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMatchedEventsRequest) ProtoMessage()               {}
func (*GetMatchedEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{56} }

func (m *GetMatchedEventsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *GetMatchedEventsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *GetMatchedEventsRequest) GetCompetitionIds() []uint32 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *GetMatchedEventsRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type GetUnmatchedEventsRequest struct {
	Provider       api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	SportId        uint32       `protobuf:"varint,2,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CompetitionIds []uint32     `protobuf:"varint,3,rep,packed,name=competition_ids,json=competitionIds" json:"competition_ids,omitempty"`
	CategoryId     uint32       `protobuf:"varint,4,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (m *GetUnmatchedEventsRequest) Reset()                    { *m = GetUnmatchedEventsRequest{} }
func (m *GetUnmatchedEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUnmatchedEventsRequest) ProtoMessage()               {}
func (*GetUnmatchedEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{57} }

func (m *GetUnmatchedEventsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *GetUnmatchedEventsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *GetUnmatchedEventsRequest) GetCompetitionIds() []uint32 {
	if m != nil {
		return m.CompetitionIds
	}
	return nil
}

func (m *GetUnmatchedEventsRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

type SearchCompetitionsRequest struct {
	Providers       []api.Provider `protobuf:"varint,1,rep,packed,name=providers,enum=api.Provider" json:"providers,omitempty"`
	SportId         uint32         `protobuf:"varint,2,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
	CategoryId      uint32         `protobuf:"varint,3,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	Active          bool           `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	CompetitionName string         `protobuf:"bytes,5,opt,name=competition_name,json=competitionName" json:"competition_name,omitempty"`
}

func (m *SearchCompetitionsRequest) Reset()                    { *m = SearchCompetitionsRequest{} }
func (m *SearchCompetitionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchCompetitionsRequest) ProtoMessage()               {}
func (*SearchCompetitionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{58} }

func (m *SearchCompetitionsRequest) GetProviders() []api.Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *SearchCompetitionsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *SearchCompetitionsRequest) GetCategoryId() uint32 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *SearchCompetitionsRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *SearchCompetitionsRequest) GetCompetitionName() string {
	if m != nil {
		return m.CompetitionName
	}
	return ""
}

// Order for picking correct overlay:
// 	competitor -> sport (competitor can belongs to multiple competition)
// 	event -> competition -> sport
type ManagingProvider struct {
	// providers in ranking for matching, from high to low
	MatchingProviders []api.Provider `protobuf:"varint,1,rep,packed,name=matching_providers,json=matchingProviders,enum=api.Provider" json:"matching_providers,omitempty"`
	// whitelist for creation, order not matters
	CreationProviders         []api.Provider `protobuf:"varint,2,rep,packed,name=creation_providers,json=creationProviders,enum=api.Provider" json:"creation_providers,omitempty"`
	MatchingThresholdInSecond int64          `protobuf:"varint,3,opt,name=matching_threshold_in_second,json=matchingThresholdInSecond" json:"matching_threshold_in_second,omitempty"`
	MetadataProviders         []api.Provider `protobuf:"varint,4,rep,packed,name=metadata_providers,json=metadataProviders,enum=api.Provider" json:"metadata_providers,omitempty"`
}

func (m *ManagingProvider) Reset()                    { *m = ManagingProvider{} }
func (m *ManagingProvider) String() string            { return proto.CompactTextString(m) }
func (*ManagingProvider) ProtoMessage()               {}
func (*ManagingProvider) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{59} }

func (m *ManagingProvider) GetMatchingProviders() []api.Provider {
	if m != nil {
		return m.MatchingProviders
	}
	return nil
}

func (m *ManagingProvider) GetCreationProviders() []api.Provider {
	if m != nil {
		return m.CreationProviders
	}
	return nil
}

func (m *ManagingProvider) GetMatchingThresholdInSecond() int64 {
	if m != nil {
		return m.MatchingThresholdInSecond
	}
	return 0
}

func (m *ManagingProvider) GetMetadataProviders() []api.Provider {
	if m != nil {
		return m.MetadataProviders
	}
	return nil
}

type SetManagingProviderRequest struct {
	Entity    *api.Entity       `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	Providers *ManagingProvider `protobuf:"bytes,2,opt,name=providers" json:"providers,omitempty"`
}

func (m *SetManagingProviderRequest) Reset()                    { *m = SetManagingProviderRequest{} }
func (m *SetManagingProviderRequest) String() string            { return proto.CompactTextString(m) }
func (*SetManagingProviderRequest) ProtoMessage()               {}
func (*SetManagingProviderRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{60} }

func (m *SetManagingProviderRequest) GetEntity() *api.Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *SetManagingProviderRequest) GetProviders() *ManagingProvider {
	if m != nil {
		return m.Providers
	}
	return nil
}

type ListRequest struct {
	ProviderData *api.ProviderData     `protobuf:"bytes,1,opt,name=provider_data,json=providerData" json:"provider_data,omitempty"`
	EntityType   api.SportsEntityTypes `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=api.SportsEntityTypes" json:"entity_type,omitempty"`
	EventStatus  api.EventStatus       `protobuf:"varint,3,opt,name=event_status,json=eventStatus,enum=api.EventStatus" json:"event_status,omitempty"`
	AnySource    bool                  `protobuf:"varint,4,opt,name=any_source,json=anySource" json:"any_source,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{61} }

func (m *ListRequest) GetProviderData() *api.ProviderData {
	if m != nil {
		return m.ProviderData
	}
	return nil
}

func (m *ListRequest) GetEntityType() api.SportsEntityTypes {
	if m != nil {
		return m.EntityType
	}
	return api.SportsEntityTypes_UNDEFINED_SPORT_ENTITY_TYPE
}

func (m *ListRequest) GetEventStatus() api.EventStatus {
	if m != nil {
		return m.EventStatus
	}
	return api.EventStatus_PRE_TRADING
}

func (m *ListRequest) GetAnySource() bool {
	if m != nil {
		return m.AnySource
	}
	return false
}

type UpcomingEventsRequest struct {
	Provider      api.Provider `protobuf:"varint,1,opt,name=provider,enum=api.Provider" json:"provider,omitempty"`
	ProviderId    string       `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	StartsAt      int64        `protobuf:"varint,3,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
	CompetitionId uint32       `protobuf:"varint,4,opt,name=competition_id,json=competitionId" json:"competition_id,omitempty"`
	SportId       uint32       `protobuf:"varint,5,opt,name=sport_id,json=sportId" json:"sport_id,omitempty"`
}

func (m *UpcomingEventsRequest) Reset()                    { *m = UpcomingEventsRequest{} }
func (m *UpcomingEventsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpcomingEventsRequest) ProtoMessage()               {}
func (*UpcomingEventsRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{62} }

func (m *UpcomingEventsRequest) GetProvider() api.Provider {
	if m != nil {
		return m.Provider
	}
	return api.Provider_BETRADAR
}

func (m *UpcomingEventsRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *UpcomingEventsRequest) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

func (m *UpcomingEventsRequest) GetCompetitionId() uint32 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *UpcomingEventsRequest) GetSportId() uint32 {
	if m != nil {
		return m.SportId
	}
	return 0
}

type UpcomingEventResponse struct {
	Id           uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ProviderId   string `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	MatchingTime int64  `protobuf:"varint,3,opt,name=matching_time,json=matchingTime" json:"matching_time,omitempty"`
	MatchingType string `protobuf:"bytes,4,opt,name=matching_type,json=matchingType" json:"matching_type,omitempty"`
	Status       string `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	StartsAt     int64  `protobuf:"varint,6,opt,name=starts_at,json=startsAt" json:"starts_at,omitempty"`
}

func (m *UpcomingEventResponse) Reset()                    { *m = UpcomingEventResponse{} }
func (m *UpcomingEventResponse) String() string            { return proto.CompactTextString(m) }
func (*UpcomingEventResponse) ProtoMessage()               {}
func (*UpcomingEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{63} }

func (m *UpcomingEventResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpcomingEventResponse) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *UpcomingEventResponse) GetMatchingTime() int64 {
	if m != nil {
		return m.MatchingTime
	}
	return 0
}

func (m *UpcomingEventResponse) GetMatchingType() string {
	if m != nil {
		return m.MatchingType
	}
	return ""
}

func (m *UpcomingEventResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpcomingEventResponse) GetStartsAt() int64 {
	if m != nil {
		return m.StartsAt
	}
	return 0
}

type UpcomingEventsResponse struct {
	Events []*UpcomingEventResponse `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *UpcomingEventsResponse) Reset()                    { *m = UpcomingEventsResponse{} }
func (m *UpcomingEventsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpcomingEventsResponse) ProtoMessage()               {}
func (*UpcomingEventsResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{64} }

func (m *UpcomingEventsResponse) GetEvents() []*UpcomingEventResponse {
	if m != nil {
		return m.Events
	}
	return nil
}

type ActiveEventRequest struct {
	Providers []api.Provider `protobuf:"varint,1,rep,packed,name=providers,enum=api.Provider" json:"providers,omitempty"`
}

func (m *ActiveEventRequest) Reset()                    { *m = ActiveEventRequest{} }
func (m *ActiveEventRequest) String() string            { return proto.CompactTextString(m) }
func (*ActiveEventRequest) ProtoMessage()               {}
func (*ActiveEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{65} }

func (m *ActiveEventRequest) GetProviders() []api.Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

type EventsReply struct {
	Events map[uint32]*api.Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EventsReply) Reset()                    { *m = EventsReply{} }
func (m *EventsReply) String() string            { return proto.CompactTextString(m) }
func (*EventsReply) ProtoMessage()               {}
func (*EventsReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{66} }

func (m *EventsReply) GetEvents() map[uint32]*api.Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type OutrightsReply struct {
	Outrights map[uint32]*api.Outright `protobuf:"bytes,1,rep,name=outrights" json:"outrights,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *OutrightsReply) Reset()                    { *m = OutrightsReply{} }
func (m *OutrightsReply) String() string            { return proto.CompactTextString(m) }
func (*OutrightsReply) ProtoMessage()               {}
func (*OutrightsReply) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{67} }

func (m *OutrightsReply) GetOutrights() map[uint32]*api.Outright {
	if m != nil {
		return m.Outrights
	}
	return nil
}

type EventFeatureAvailabilityRequest struct {
	EventId             uint32          `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	FeatureAvailability map[uint32]bool `protobuf:"bytes,2,rep,name=feature_availability,json=featureAvailability" json:"feature_availability,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *EventFeatureAvailabilityRequest) Reset()         { *m = EventFeatureAvailabilityRequest{} }
func (m *EventFeatureAvailabilityRequest) String() string { return proto.CompactTextString(m) }
func (*EventFeatureAvailabilityRequest) ProtoMessage()    {}
func (*EventFeatureAvailabilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{68}
}

func (m *EventFeatureAvailabilityRequest) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *EventFeatureAvailabilityRequest) GetFeatureAvailability() map[uint32]bool {
	if m != nil {
		return m.FeatureAvailability
	}
	return nil
}

func init() {
	proto.RegisterType((*Competitors)(nil), "internalrpc.Competitors")
	proto.RegisterType((*Pitchers)(nil), "internalrpc.Pitchers")
	proto.RegisterType((*Competition)(nil), "internalrpc.Competition")
	proto.RegisterType((*Competitor)(nil), "internalrpc.Competitor")
	proto.RegisterType((*EventIdentifier)(nil), "internalrpc.EventIdentifier")
	proto.RegisterType((*EventStateUpdateRequest)(nil), "internalrpc.EventStateUpdateRequest")
	proto.RegisterType((*CancelEventRequest)(nil), "internalrpc.CancelEventRequest")
	proto.RegisterType((*EventStateReply)(nil), "internalrpc.EventStateReply")
	proto.RegisterType((*ExtraField)(nil), "internalrpc.ExtraField")
	proto.RegisterType((*FetchOrCreateEntityReply)(nil), "internalrpc.FetchOrCreateEntityReply")
	proto.RegisterType((*FetchOrCreateEventRequest)(nil), "internalrpc.FetchOrCreateEventRequest")
	proto.RegisterType((*UpdateOrCreateOutrightResponse)(nil), "internalrpc.UpdateOrCreateOutrightResponse")
	proto.RegisterType((*UpdateOrCreateOutrightRequest)(nil), "internalrpc.UpdateOrCreateOutrightRequest")
	proto.RegisterType((*FetchOrCreateGroupRequest)(nil), "internalrpc.FetchOrCreateGroupRequest")
	proto.RegisterType((*FetchOrCreateCompetitionRequest)(nil), "internalrpc.FetchOrCreateCompetitionRequest")
	proto.RegisterType((*FetchOrCreateSportRequest)(nil), "internalrpc.FetchOrCreateSportRequest")
	proto.RegisterType((*FetchOrCreateCompetitorRequest)(nil), "internalrpc.FetchOrCreateCompetitorRequest")
	proto.RegisterType((*UpdateEventRequest)(nil), "internalrpc.UpdateEventRequest")
	proto.RegisterType((*UpdateEventRequestV2)(nil), "internalrpc.UpdateEventRequestV2")
	proto.RegisterType((*UpdateMetadataRequest)(nil), "internalrpc.UpdateMetadataRequest")
	proto.RegisterType((*UpdateEventReply)(nil), "internalrpc.UpdateEventReply")
	proto.RegisterType((*StatusRequest)(nil), "internalrpc.StatusRequest")
	proto.RegisterType((*TranslationRequest)(nil), "internalrpc.TranslationRequest")
	proto.RegisterType((*TranslationReply)(nil), "internalrpc.TranslationReply")
	proto.RegisterType((*EntityRequest)(nil), "internalrpc.EntityRequest")
	proto.RegisterType((*EntitiesRequest)(nil), "internalrpc.EntitiesRequest")
	proto.RegisterType((*EventReply)(nil), "internalrpc.EventReply")
	proto.RegisterType((*Group)(nil), "internalrpc.Group")
	proto.RegisterType((*CompetitionReply)(nil), "internalrpc.CompetitionReply")
	proto.RegisterType((*OutrightReply)(nil), "internalrpc.OutrightReply")
	proto.RegisterType((*CompetitorReply)(nil), "internalrpc.CompetitorReply")
	proto.RegisterType((*GroupReply)(nil), "internalrpc.GroupReply")
	proto.RegisterType((*SportReply)(nil), "internalrpc.SportReply")
	proto.RegisterType((*MatchingOverviewRequest)(nil), "internalrpc.MatchingOverviewRequest")
	proto.RegisterType((*MatchingOverviewReply)(nil), "internalrpc.MatchingOverviewReply")
	proto.RegisterType((*ModifyGroupsOnEntityRequest)(nil), "internalrpc.ModifyGroupsOnEntityRequest")
	proto.RegisterType((*AddCategoryOnEntityRequest)(nil), "internalrpc.AddCategoryOnEntityRequest")
	proto.RegisterType((*CompetitionProviderOutrightRequest)(nil), "internalrpc.CompetitionProviderOutrightRequest")
	proto.RegisterType((*CompetitionProviderOutrightReply)(nil), "internalrpc.CompetitionProviderOutrightReply")
	proto.RegisterType((*CancelledMarketListRequest)(nil), "internalrpc.CancelledMarketListRequest")
	proto.RegisterType((*MergeRequest)(nil), "internalrpc.MergeRequest")
	proto.RegisterType((*UnmergeRequest)(nil), "internalrpc.UnmergeRequest")
	proto.RegisterType((*GetMergedEntitiesRequest)(nil), "internalrpc.GetMergedEntitiesRequest")
	proto.RegisterType((*GetCompetitorsReply)(nil), "internalrpc.GetCompetitorsReply")
	proto.RegisterType((*GetCompetitionsReply)(nil), "internalrpc.GetCompetitionsReply")
	proto.RegisterType((*TranslationMap)(nil), "internalrpc.TranslationMap")
	proto.RegisterType((*TranslationMaps)(nil), "internalrpc.TranslationMaps")
	proto.RegisterType((*MatchCompetitionRequest)(nil), "internalrpc.MatchCompetitionRequest")
	proto.RegisterType((*UnmatchCompetitionRequest)(nil), "internalrpc.UnmatchCompetitionRequest")
	proto.RegisterType((*GetMatchedCompetitionsRequest)(nil), "internalrpc.GetMatchedCompetitionsRequest")
	proto.RegisterType((*GetUnmatchedCompetitionsRequest)(nil), "internalrpc.GetUnmatchedCompetitionsRequest")
	proto.RegisterType((*MatchCompetitorRequest)(nil), "internalrpc.MatchCompetitorRequest")
	proto.RegisterType((*UnmatchCompetitorRequest)(nil), "internalrpc.UnmatchCompetitorRequest")
	proto.RegisterType((*GetMatchedCompetitorsRequest)(nil), "internalrpc.GetMatchedCompetitorsRequest")
	proto.RegisterType((*GetUnmatchedCompetitorsRequest)(nil), "internalrpc.GetUnmatchedCompetitorsRequest")
	proto.RegisterType((*MatchEventRequest)(nil), "internalrpc.MatchEventRequest")
	proto.RegisterType((*GetMatchedEventsRequest)(nil), "internalrpc.GetMatchedEventsRequest")
	proto.RegisterType((*GetUnmatchedEventsRequest)(nil), "internalrpc.GetUnmatchedEventsRequest")
	proto.RegisterType((*SearchCompetitionsRequest)(nil), "internalrpc.SearchCompetitionsRequest")
	proto.RegisterType((*ManagingProvider)(nil), "internalrpc.ManagingProvider")
	proto.RegisterType((*SetManagingProviderRequest)(nil), "internalrpc.SetManagingProviderRequest")
	proto.RegisterType((*ListRequest)(nil), "internalrpc.ListRequest")
	proto.RegisterType((*UpcomingEventsRequest)(nil), "internalrpc.UpcomingEventsRequest")
	proto.RegisterType((*UpcomingEventResponse)(nil), "internalrpc.UpcomingEventResponse")
	proto.RegisterType((*UpcomingEventsResponse)(nil), "internalrpc.UpcomingEventsResponse")
	proto.RegisterType((*ActiveEventRequest)(nil), "internalrpc.ActiveEventRequest")
	proto.RegisterType((*EventsReply)(nil), "internalrpc.EventsReply")
	proto.RegisterType((*OutrightsReply)(nil), "internalrpc.OutrightsReply")
	proto.RegisterType((*EventFeatureAvailabilityRequest)(nil), "internalrpc.EventFeatureAvailabilityRequest")
	proto.RegisterEnum("internalrpc.Command", Command_name, Command_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SportsentitiesManager service

type SportsentitiesManagerClient interface {
	FetchOrCreateEvent(ctx context.Context, in *FetchOrCreateEventRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	UpdateOrCreateOutright(ctx context.Context, in *UpdateOrCreateOutrightRequest, opts ...grpc.CallOption) (*UpdateOrCreateOutrightResponse, error)
	FetchOrCreateGroup(ctx context.Context, in *FetchOrCreateGroupRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	FetchOrCreateCompetition(ctx context.Context, in *FetchOrCreateCompetitionRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	FetchOrCreateSport(ctx context.Context, in *FetchOrCreateSportRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	FetchOrCreateCompetitor(ctx context.Context, in *FetchOrCreateCompetitorRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventReply, error)
	UpdateEventStatus(ctx context.Context, in *EventStateUpdateRequest, opts ...grpc.CallOption) (*EventStateReply, error)
	ResultEvent(ctx context.Context, in *EventStateUpdateRequest, opts ...grpc.CallOption) (*EventStateReply, error)
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*EventStateReply, error)
	// TODO: consider if we need keep below
	CancelEvent(ctx context.Context, in *CancelEventRequest, opts ...grpc.CallOption) (*EventStateReply, error)
	ModifyGroupsOnEntity(ctx context.Context, in *ModifyGroupsOnEntityRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// add category on entity, if category already exists, skip
	AddCategoryOnEntity(ctx context.Context, in *AddCategoryOnEntityRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetTranslation(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationReply, error)
	SetTranslation(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationReply, error)
	GetEvent(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EventReply, error)
	GetEventV2(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Event, error)
	GetEventsV2(ctx context.Context, in *EntitiesRequest, opts ...grpc.CallOption) (*EventsReply, error)
	GetCompetition(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*CompetitionReply, error)
	GetOutrightV2(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Outright, error)
	GetOutrightsV2(ctx context.Context, in *EntitiesRequest, opts ...grpc.CallOption) (*OutrightsReply, error)
	GetOutright(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*OutrightReply, error)
	GetCompetitor(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*CompetitorReply, error)
	GetEventCompetitors(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Competitors, error)
	GetGroup(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*GroupReply, error)
	GetSport(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*SportReply, error)
	GetCompetitors(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (SportsentitiesManager_GetCompetitorsClient, error)
	GetCompetitions(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (SportsentitiesManager_GetCompetitionsClient, error)
	GetCompetitorsRPC(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetCompetitorsReply, error)
	GetCompetitionsRPC(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetCompetitionsReply, error)
	GetTranslationMap(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationMap, error)
	GetCompetitorDetails(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Competitor, error)
	GetCompetitionDetails(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Competition, error)
	UpdateTranslations(ctx context.Context, opts ...grpc.CallOption) (SportsentitiesManager_UpdateTranslationsClient, error)
	UpdateTranslationsRPC(ctx context.Context, in *TranslationMaps, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	SetEventFeatureAvailability(ctx context.Context, in *EventFeatureAvailabilityRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	AddCompetitionProviderOutright(ctx context.Context, in *CompetitionProviderOutrightRequest, opts ...grpc.CallOption) (*CompetitionProviderOutrightReply, error)
	// refator match entities
	UpdateEventV2(ctx context.Context, in *UpdateEventRequestV2, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	MatchOrCreateCompetitor(ctx context.Context, in *FetchOrCreateCompetitorRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	MatchOrCreateCompetition(ctx context.Context, in *FetchOrCreateCompetitionRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error)
	// matching overview
	GetMatchingOverview(ctx context.Context, in *MatchingOverviewRequest, opts ...grpc.CallOption) (*MatchingOverviewReply, error)
	GetCancelledMarkets(ctx context.Context, in *CancelledMarketListRequest, opts ...grpc.CallOption) (*api.CancelledMarketList, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*SingleId, error)
	Unmerge(ctx context.Context, in *UnmergeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	UnmergeSourceID(ctx context.Context, in *UnmergeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetMergedEntities(ctx context.Context, in *GetMergedEntitiesRequest, opts ...grpc.CallOption) (*api.MergedEntityList, error)
	MatchCompetition(ctx context.Context, in *MatchCompetitionRequest, opts ...grpc.CallOption) (*api.MatchedCompetition, error)
	UnmatchCompetition(ctx context.Context, in *UnmatchCompetitionRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetition, error)
	GetMatchedCompetitions(ctx context.Context, in *GetMatchedCompetitionsRequest, opts ...grpc.CallOption) (*api.MatchedCompetitionList, error)
	GetUnmatchedCompetitions(ctx context.Context, in *GetUnmatchedCompetitionsRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitionList, error)
	MatchCompetitor(ctx context.Context, in *MatchCompetitorRequest, opts ...grpc.CallOption) (*api.MatchedCompetitor, error)
	UnmatchCompetitor(ctx context.Context, in *UnmatchCompetitorRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitor, error)
	GetMatchedCompetitors(ctx context.Context, in *GetMatchedCompetitorsRequest, opts ...grpc.CallOption) (*api.MatchedCompetitorList, error)
	GetUnmatchedCompetitors(ctx context.Context, in *GetUnmatchedCompetitorsRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitorList, error)
	MatchEvent(ctx context.Context, in *MatchEventRequest, opts ...grpc.CallOption) (*api.MatchedEvent, error)
	GetMatchedEvents(ctx context.Context, in *GetMatchedEventsRequest, opts ...grpc.CallOption) (*api.MatchedEventList, error)
	GetUnmatchedEvents(ctx context.Context, in *GetUnmatchedEventsRequest, opts ...grpc.CallOption) (*api.UnmatchedEventList, error)
	// entity ids list by source, by provider
	GetList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Uint32List, error)
	SearchCompetitions(ctx context.Context, in *SearchCompetitionsRequest, opts ...grpc.CallOption) (*api.CompetitionList, error)
	// managing-provider
	SetManagingProvider(ctx context.Context, in *SetManagingProviderRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetManagingProvider(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*ManagingProvider, error)
	HealthCheck(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetUpcomingEvents(ctx context.Context, in *UpcomingEventsRequest, opts ...grpc.CallOption) (*UpcomingEventsResponse, error)
	GetActiveEvents(ctx context.Context, in *ActiveEventRequest, opts ...grpc.CallOption) (*Uint32List, error)
}

type sportsentitiesManagerClient struct {
	cc *grpc.ClientConn
}

func NewSportsentitiesManagerClient(cc *grpc.ClientConn) SportsentitiesManagerClient {
	return &sportsentitiesManagerClient{cc}
}

func (c *sportsentitiesManagerClient) FetchOrCreateEvent(ctx context.Context, in *FetchOrCreateEventRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/FetchOrCreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UpdateOrCreateOutright(ctx context.Context, in *UpdateOrCreateOutrightRequest, opts ...grpc.CallOption) (*UpdateOrCreateOutrightResponse, error) {
	out := new(UpdateOrCreateOutrightResponse)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UpdateOrCreateOutright", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) FetchOrCreateGroup(ctx context.Context, in *FetchOrCreateGroupRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/FetchOrCreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) FetchOrCreateCompetition(ctx context.Context, in *FetchOrCreateCompetitionRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/FetchOrCreateCompetition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) FetchOrCreateSport(ctx context.Context, in *FetchOrCreateSportRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/FetchOrCreateSport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) FetchOrCreateCompetitor(ctx context.Context, in *FetchOrCreateCompetitorRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/FetchOrCreateCompetitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventReply, error) {
	out := new(UpdateEventReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UpdateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UpdateEventStatus(ctx context.Context, in *EventStateUpdateRequest, opts ...grpc.CallOption) (*EventStateReply, error) {
	out := new(EventStateReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UpdateEventStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) ResultEvent(ctx context.Context, in *EventStateUpdateRequest, opts ...grpc.CallOption) (*EventStateReply, error) {
	out := new(EventStateReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/ResultEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*EventStateReply, error) {
	out := new(EventStateReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) CancelEvent(ctx context.Context, in *CancelEventRequest, opts ...grpc.CallOption) (*EventStateReply, error) {
	out := new(EventStateReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/CancelEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) ModifyGroupsOnEntity(ctx context.Context, in *ModifyGroupsOnEntityRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/ModifyGroupsOnEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) AddCategoryOnEntity(ctx context.Context, in *AddCategoryOnEntityRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/AddCategoryOnEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetTranslation(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationReply, error) {
	out := new(TranslationReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) SetTranslation(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationReply, error) {
	out := new(TranslationReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/SetTranslation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetEvent(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetEventV2(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Event, error) {
	out := new(api.Event)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetEventV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetEventsV2(ctx context.Context, in *EntitiesRequest, opts ...grpc.CallOption) (*EventsReply, error) {
	out := new(EventsReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetEventsV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCompetition(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*CompetitionReply, error) {
	out := new(CompetitionReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCompetition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetOutrightV2(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Outright, error) {
	out := new(api.Outright)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetOutrightV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetOutrightsV2(ctx context.Context, in *EntitiesRequest, opts ...grpc.CallOption) (*OutrightsReply, error) {
	out := new(OutrightsReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetOutrightsV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetOutright(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*OutrightReply, error) {
	out := new(OutrightReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetOutright", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCompetitor(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*CompetitorReply, error) {
	out := new(CompetitorReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCompetitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetEventCompetitors(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*Competitors, error) {
	out := new(Competitors)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetEventCompetitors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetGroup(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*GroupReply, error) {
	out := new(GroupReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetSport(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*SportReply, error) {
	out := new(SportReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetSport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCompetitors(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (SportsentitiesManager_GetCompetitorsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SportsentitiesManager_serviceDesc.Streams[0], c.cc, "/internalrpc.SportsentitiesManager/GetCompetitors", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportsentitiesManagerGetCompetitorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SportsentitiesManager_GetCompetitorsClient interface {
	Recv() (*GetCompetitorsReply, error)
	grpc.ClientStream
}

type sportsentitiesManagerGetCompetitorsClient struct {
	grpc.ClientStream
}

func (x *sportsentitiesManagerGetCompetitorsClient) Recv() (*GetCompetitorsReply, error) {
	m := new(GetCompetitorsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sportsentitiesManagerClient) GetCompetitions(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (SportsentitiesManager_GetCompetitionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SportsentitiesManager_serviceDesc.Streams[1], c.cc, "/internalrpc.SportsentitiesManager/GetCompetitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportsentitiesManagerGetCompetitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SportsentitiesManager_GetCompetitionsClient interface {
	Recv() (*GetCompetitionsReply, error)
	grpc.ClientStream
}

type sportsentitiesManagerGetCompetitionsClient struct {
	grpc.ClientStream
}

func (x *sportsentitiesManagerGetCompetitionsClient) Recv() (*GetCompetitionsReply, error) {
	m := new(GetCompetitionsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sportsentitiesManagerClient) GetCompetitorsRPC(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetCompetitorsReply, error) {
	out := new(GetCompetitorsReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCompetitorsRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCompetitionsRPC(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GetCompetitionsReply, error) {
	out := new(GetCompetitionsReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCompetitionsRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetTranslationMap(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationMap, error) {
	out := new(TranslationMap)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetTranslationMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCompetitorDetails(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Competitor, error) {
	out := new(api.Competitor)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCompetitorDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCompetitionDetails(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*api.Competition, error) {
	out := new(api.Competition)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCompetitionDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UpdateTranslations(ctx context.Context, opts ...grpc.CallOption) (SportsentitiesManager_UpdateTranslationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SportsentitiesManager_serviceDesc.Streams[2], c.cc, "/internalrpc.SportsentitiesManager/UpdateTranslations", opts...)
	if err != nil {
		return nil, err
	}
	x := &sportsentitiesManagerUpdateTranslationsClient{stream}
	return x, nil
}

type SportsentitiesManager_UpdateTranslationsClient interface {
	Send(*TranslationMap) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type sportsentitiesManagerUpdateTranslationsClient struct {
	grpc.ClientStream
}

func (x *sportsentitiesManagerUpdateTranslationsClient) Send(m *TranslationMap) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sportsentitiesManagerUpdateTranslationsClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sportsentitiesManagerClient) UpdateTranslationsRPC(ctx context.Context, in *TranslationMaps, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UpdateTranslationsRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UpdateMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) SetEventFeatureAvailability(ctx context.Context, in *EventFeatureAvailabilityRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/SetEventFeatureAvailability", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) AddCompetitionProviderOutright(ctx context.Context, in *CompetitionProviderOutrightRequest, opts ...grpc.CallOption) (*CompetitionProviderOutrightReply, error) {
	out := new(CompetitionProviderOutrightReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/AddCompetitionProviderOutright", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UpdateEventV2(ctx context.Context, in *UpdateEventRequestV2, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UpdateEventV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) MatchOrCreateCompetitor(ctx context.Context, in *FetchOrCreateCompetitorRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/MatchOrCreateCompetitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) MatchOrCreateCompetition(ctx context.Context, in *FetchOrCreateCompetitionRequest, opts ...grpc.CallOption) (*FetchOrCreateEntityReply, error) {
	out := new(FetchOrCreateEntityReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/MatchOrCreateCompetition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetMatchingOverview(ctx context.Context, in *MatchingOverviewRequest, opts ...grpc.CallOption) (*MatchingOverviewReply, error) {
	out := new(MatchingOverviewReply)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetMatchingOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetCancelledMarkets(ctx context.Context, in *CancelledMarketListRequest, opts ...grpc.CallOption) (*api.CancelledMarketList, error) {
	out := new(api.CancelledMarketList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetCancelledMarkets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*SingleId, error) {
	out := new(SingleId)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/Merge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) Unmerge(ctx context.Context, in *UnmergeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/Unmerge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UnmergeSourceID(ctx context.Context, in *UnmergeRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UnmergeSourceID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetMergedEntities(ctx context.Context, in *GetMergedEntitiesRequest, opts ...grpc.CallOption) (*api.MergedEntityList, error) {
	out := new(api.MergedEntityList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetMergedEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) MatchCompetition(ctx context.Context, in *MatchCompetitionRequest, opts ...grpc.CallOption) (*api.MatchedCompetition, error) {
	out := new(api.MatchedCompetition)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/MatchCompetition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UnmatchCompetition(ctx context.Context, in *UnmatchCompetitionRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetition, error) {
	out := new(api.UnmatchedCompetition)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UnmatchCompetition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetMatchedCompetitions(ctx context.Context, in *GetMatchedCompetitionsRequest, opts ...grpc.CallOption) (*api.MatchedCompetitionList, error) {
	out := new(api.MatchedCompetitionList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetMatchedCompetitions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetUnmatchedCompetitions(ctx context.Context, in *GetUnmatchedCompetitionsRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitionList, error) {
	out := new(api.UnmatchedCompetitionList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetUnmatchedCompetitions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) MatchCompetitor(ctx context.Context, in *MatchCompetitorRequest, opts ...grpc.CallOption) (*api.MatchedCompetitor, error) {
	out := new(api.MatchedCompetitor)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/MatchCompetitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) UnmatchCompetitor(ctx context.Context, in *UnmatchCompetitorRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitor, error) {
	out := new(api.UnmatchedCompetitor)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/UnmatchCompetitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetMatchedCompetitors(ctx context.Context, in *GetMatchedCompetitorsRequest, opts ...grpc.CallOption) (*api.MatchedCompetitorList, error) {
	out := new(api.MatchedCompetitorList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetMatchedCompetitors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetUnmatchedCompetitors(ctx context.Context, in *GetUnmatchedCompetitorsRequest, opts ...grpc.CallOption) (*api.UnmatchedCompetitorList, error) {
	out := new(api.UnmatchedCompetitorList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetUnmatchedCompetitors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) MatchEvent(ctx context.Context, in *MatchEventRequest, opts ...grpc.CallOption) (*api.MatchedEvent, error) {
	out := new(api.MatchedEvent)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/MatchEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetMatchedEvents(ctx context.Context, in *GetMatchedEventsRequest, opts ...grpc.CallOption) (*api.MatchedEventList, error) {
	out := new(api.MatchedEventList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetMatchedEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetUnmatchedEvents(ctx context.Context, in *GetUnmatchedEventsRequest, opts ...grpc.CallOption) (*api.UnmatchedEventList, error) {
	out := new(api.UnmatchedEventList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetUnmatchedEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Uint32List, error) {
	out := new(Uint32List)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) SearchCompetitions(ctx context.Context, in *SearchCompetitionsRequest, opts ...grpc.CallOption) (*api.CompetitionList, error) {
	out := new(api.CompetitionList)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/SearchCompetitions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) SetManagingProvider(ctx context.Context, in *SetManagingProviderRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/SetManagingProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetManagingProvider(ctx context.Context, in *api.Entity, opts ...grpc.CallOption) (*ManagingProvider, error) {
	out := new(ManagingProvider)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetManagingProvider", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) HealthCheck(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetUpcomingEvents(ctx context.Context, in *UpcomingEventsRequest, opts ...grpc.CallOption) (*UpcomingEventsResponse, error) {
	out := new(UpcomingEventsResponse)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetUpcomingEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsentitiesManagerClient) GetActiveEvents(ctx context.Context, in *ActiveEventRequest, opts ...grpc.CallOption) (*Uint32List, error) {
	out := new(Uint32List)
	err := grpc.Invoke(ctx, "/internalrpc.SportsentitiesManager/GetActiveEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SportsentitiesManager service

type SportsentitiesManagerServer interface {
	FetchOrCreateEvent(context.Context, *FetchOrCreateEventRequest) (*FetchOrCreateEntityReply, error)
	UpdateOrCreateOutright(context.Context, *UpdateOrCreateOutrightRequest) (*UpdateOrCreateOutrightResponse, error)
	FetchOrCreateGroup(context.Context, *FetchOrCreateGroupRequest) (*FetchOrCreateEntityReply, error)
	FetchOrCreateCompetition(context.Context, *FetchOrCreateCompetitionRequest) (*FetchOrCreateEntityReply, error)
	FetchOrCreateSport(context.Context, *FetchOrCreateSportRequest) (*FetchOrCreateEntityReply, error)
	FetchOrCreateCompetitor(context.Context, *FetchOrCreateCompetitorRequest) (*FetchOrCreateEntityReply, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventReply, error)
	UpdateEventStatus(context.Context, *EventStateUpdateRequest) (*EventStateReply, error)
	ResultEvent(context.Context, *EventStateUpdateRequest) (*EventStateReply, error)
	GetStatus(context.Context, *StatusRequest) (*EventStateReply, error)
	// TODO: consider if we need keep below
	CancelEvent(context.Context, *CancelEventRequest) (*EventStateReply, error)
	ModifyGroupsOnEntity(context.Context, *ModifyGroupsOnEntityRequest) (*google_protobuf1.Empty, error)
	// add category on entity, if category already exists, skip
	AddCategoryOnEntity(context.Context, *AddCategoryOnEntityRequest) (*google_protobuf1.Empty, error)
	GetTranslation(context.Context, *TranslationRequest) (*TranslationReply, error)
	SetTranslation(context.Context, *TranslationRequest) (*TranslationReply, error)
	GetEvent(context.Context, *EntityRequest) (*EventReply, error)
	GetEventV2(context.Context, *EntityRequest) (*api.Event, error)
	GetEventsV2(context.Context, *EntitiesRequest) (*EventsReply, error)
	GetCompetition(context.Context, *EntityRequest) (*CompetitionReply, error)
	GetOutrightV2(context.Context, *EntityRequest) (*api.Outright, error)
	GetOutrightsV2(context.Context, *EntitiesRequest) (*OutrightsReply, error)
	GetOutright(context.Context, *EntityRequest) (*OutrightReply, error)
	GetCompetitor(context.Context, *EntityRequest) (*CompetitorReply, error)
	GetEventCompetitors(context.Context, *EntityRequest) (*Competitors, error)
	GetGroup(context.Context, *EntityRequest) (*GroupReply, error)
	GetSport(context.Context, *EntityRequest) (*SportReply, error)
	GetCompetitors(*google_protobuf1.Empty, SportsentitiesManager_GetCompetitorsServer) error
	GetCompetitions(*google_protobuf1.Empty, SportsentitiesManager_GetCompetitionsServer) error
	GetCompetitorsRPC(context.Context, *google_protobuf1.Empty) (*GetCompetitorsReply, error)
	GetCompetitionsRPC(context.Context, *google_protobuf1.Empty) (*GetCompetitionsReply, error)
	GetTranslationMap(context.Context, *TranslationRequest) (*TranslationMap, error)
	GetCompetitorDetails(context.Context, *EntityRequest) (*api.Competitor, error)
	GetCompetitionDetails(context.Context, *EntityRequest) (*api.Competition, error)
	UpdateTranslations(SportsentitiesManager_UpdateTranslationsServer) error
	UpdateTranslationsRPC(context.Context, *TranslationMaps) (*google_protobuf1.Empty, error)
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*google_protobuf1.Empty, error)
	SetEventFeatureAvailability(context.Context, *EventFeatureAvailabilityRequest) (*google_protobuf1.Empty, error)
	AddCompetitionProviderOutright(context.Context, *CompetitionProviderOutrightRequest) (*CompetitionProviderOutrightReply, error)
	// refator match entities
	UpdateEventV2(context.Context, *UpdateEventRequestV2) (*FetchOrCreateEntityReply, error)
	MatchOrCreateCompetitor(context.Context, *FetchOrCreateCompetitorRequest) (*FetchOrCreateEntityReply, error)
	MatchOrCreateCompetition(context.Context, *FetchOrCreateCompetitionRequest) (*FetchOrCreateEntityReply, error)
	// matching overview
	GetMatchingOverview(context.Context, *MatchingOverviewRequest) (*MatchingOverviewReply, error)
	GetCancelledMarkets(context.Context, *CancelledMarketListRequest) (*api.CancelledMarketList, error)
	Merge(context.Context, *MergeRequest) (*SingleId, error)
	Unmerge(context.Context, *UnmergeRequest) (*google_protobuf1.Empty, error)
	UnmergeSourceID(context.Context, *UnmergeRequest) (*google_protobuf1.Empty, error)
	GetMergedEntities(context.Context, *GetMergedEntitiesRequest) (*api.MergedEntityList, error)
	MatchCompetition(context.Context, *MatchCompetitionRequest) (*api.MatchedCompetition, error)
	UnmatchCompetition(context.Context, *UnmatchCompetitionRequest) (*api.UnmatchedCompetition, error)
	GetMatchedCompetitions(context.Context, *GetMatchedCompetitionsRequest) (*api.MatchedCompetitionList, error)
	GetUnmatchedCompetitions(context.Context, *GetUnmatchedCompetitionsRequest) (*api.UnmatchedCompetitionList, error)
	MatchCompetitor(context.Context, *MatchCompetitorRequest) (*api.MatchedCompetitor, error)
	UnmatchCompetitor(context.Context, *UnmatchCompetitorRequest) (*api.UnmatchedCompetitor, error)
	GetMatchedCompetitors(context.Context, *GetMatchedCompetitorsRequest) (*api.MatchedCompetitorList, error)
	GetUnmatchedCompetitors(context.Context, *GetUnmatchedCompetitorsRequest) (*api.UnmatchedCompetitorList, error)
	MatchEvent(context.Context, *MatchEventRequest) (*api.MatchedEvent, error)
	GetMatchedEvents(context.Context, *GetMatchedEventsRequest) (*api.MatchedEventList, error)
	GetUnmatchedEvents(context.Context, *GetUnmatchedEventsRequest) (*api.UnmatchedEventList, error)
	// entity ids list by source, by provider
	GetList(context.Context, *ListRequest) (*Uint32List, error)
	SearchCompetitions(context.Context, *SearchCompetitionsRequest) (*api.CompetitionList, error)
	// managing-provider
	SetManagingProvider(context.Context, *SetManagingProviderRequest) (*google_protobuf1.Empty, error)
	GetManagingProvider(context.Context, *api.Entity) (*ManagingProvider, error)
	HealthCheck(context.Context, *google_protobuf1.Empty) (*HealthCheckResponse, error)
	GetUpcomingEvents(context.Context, *UpcomingEventsRequest) (*UpcomingEventsResponse, error)
	GetActiveEvents(context.Context, *ActiveEventRequest) (*Uint32List, error)
}

func RegisterSportsentitiesManagerServer(s *grpc.Server, srv SportsentitiesManagerServer) {
	s.RegisterService(&_SportsentitiesManager_serviceDesc, srv)
}

func _SportsentitiesManager_FetchOrCreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).FetchOrCreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/FetchOrCreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).FetchOrCreateEvent(ctx, req.(*FetchOrCreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UpdateOrCreateOutright_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrCreateOutrightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UpdateOrCreateOutright(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UpdateOrCreateOutright",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UpdateOrCreateOutright(ctx, req.(*UpdateOrCreateOutrightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_FetchOrCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).FetchOrCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/FetchOrCreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).FetchOrCreateGroup(ctx, req.(*FetchOrCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_FetchOrCreateCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateCompetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).FetchOrCreateCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/FetchOrCreateCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).FetchOrCreateCompetition(ctx, req.(*FetchOrCreateCompetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_FetchOrCreateSport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateSportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).FetchOrCreateSport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/FetchOrCreateSport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).FetchOrCreateSport(ctx, req.(*FetchOrCreateSportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_FetchOrCreateCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).FetchOrCreateCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/FetchOrCreateCompetitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).FetchOrCreateCompetitor(ctx, req.(*FetchOrCreateCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UpdateEventStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UpdateEventStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UpdateEventStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UpdateEventStatus(ctx, req.(*EventStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_ResultEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).ResultEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/ResultEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).ResultEvent(ctx, req.(*EventStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_CancelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).CancelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/CancelEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).CancelEvent(ctx, req.(*CancelEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_ModifyGroupsOnEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyGroupsOnEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).ModifyGroupsOnEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/ModifyGroupsOnEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).ModifyGroupsOnEntity(ctx, req.(*ModifyGroupsOnEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_AddCategoryOnEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryOnEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).AddCategoryOnEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/AddCategoryOnEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).AddCategoryOnEntity(ctx, req.(*AddCategoryOnEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetTranslation(ctx, req.(*TranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_SetTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).SetTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/SetTranslation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).SetTranslation(ctx, req.(*TranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetEvent(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetEventV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetEventV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetEventV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetEventV2(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetEventsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetEventsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetEventsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetEventsV2(ctx, req.(*EntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCompetition(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetOutrightV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetOutrightV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetOutrightV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetOutrightV2(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetOutrightsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetOutrightsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetOutrightsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetOutrightsV2(ctx, req.(*EntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetOutright_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetOutright(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetOutright",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetOutright(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCompetitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCompetitor(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetEventCompetitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetEventCompetitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetEventCompetitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetEventCompetitors(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetGroup(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetSport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetSport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetSport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetSport(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCompetitors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SportsentitiesManagerServer).GetCompetitors(m, &sportsentitiesManagerGetCompetitorsServer{stream})
}

type SportsentitiesManager_GetCompetitorsServer interface {
	Send(*GetCompetitorsReply) error
	grpc.ServerStream
}

type sportsentitiesManagerGetCompetitorsServer struct {
	grpc.ServerStream
}

func (x *sportsentitiesManagerGetCompetitorsServer) Send(m *GetCompetitorsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _SportsentitiesManager_GetCompetitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SportsentitiesManagerServer).GetCompetitions(m, &sportsentitiesManagerGetCompetitionsServer{stream})
}

type SportsentitiesManager_GetCompetitionsServer interface {
	Send(*GetCompetitionsReply) error
	grpc.ServerStream
}

type sportsentitiesManagerGetCompetitionsServer struct {
	grpc.ServerStream
}

func (x *sportsentitiesManagerGetCompetitionsServer) Send(m *GetCompetitionsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _SportsentitiesManager_GetCompetitorsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCompetitorsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCompetitorsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCompetitorsRPC(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCompetitionsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCompetitionsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCompetitionsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCompetitionsRPC(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetTranslationMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetTranslationMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetTranslationMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetTranslationMap(ctx, req.(*TranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCompetitorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCompetitorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCompetitorDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCompetitorDetails(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCompetitionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCompetitionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCompetitionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCompetitionDetails(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UpdateTranslations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SportsentitiesManagerServer).UpdateTranslations(&sportsentitiesManagerUpdateTranslationsServer{stream})
}

type SportsentitiesManager_UpdateTranslationsServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*TranslationMap, error)
	grpc.ServerStream
}

type sportsentitiesManagerUpdateTranslationsServer struct {
	grpc.ServerStream
}

func (x *sportsentitiesManagerUpdateTranslationsServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sportsentitiesManagerUpdateTranslationsServer) Recv() (*TranslationMap, error) {
	m := new(TranslationMap)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SportsentitiesManager_UpdateTranslationsRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslationMaps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UpdateTranslationsRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UpdateTranslationsRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UpdateTranslationsRPC(ctx, req.(*TranslationMaps))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_SetEventFeatureAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventFeatureAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).SetEventFeatureAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/SetEventFeatureAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).SetEventFeatureAvailability(ctx, req.(*EventFeatureAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_AddCompetitionProviderOutright_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionProviderOutrightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).AddCompetitionProviderOutright(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/AddCompetitionProviderOutright",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).AddCompetitionProviderOutright(ctx, req.(*CompetitionProviderOutrightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UpdateEventV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UpdateEventV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UpdateEventV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UpdateEventV2(ctx, req.(*UpdateEventRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_MatchOrCreateCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).MatchOrCreateCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/MatchOrCreateCompetitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).MatchOrCreateCompetitor(ctx, req.(*FetchOrCreateCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_MatchOrCreateCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOrCreateCompetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).MatchOrCreateCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/MatchOrCreateCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).MatchOrCreateCompetition(ctx, req.(*FetchOrCreateCompetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetMatchingOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchingOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetMatchingOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetMatchingOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetMatchingOverview(ctx, req.(*MatchingOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetCancelledMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelledMarketListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetCancelledMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetCancelledMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetCancelledMarkets(ctx, req.(*CancelledMarketListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_Unmerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).Unmerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/Unmerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).Unmerge(ctx, req.(*UnmergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UnmergeSourceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UnmergeSourceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UnmergeSourceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UnmergeSourceID(ctx, req.(*UnmergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetMergedEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergedEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetMergedEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetMergedEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetMergedEntities(ctx, req.(*GetMergedEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_MatchCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCompetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).MatchCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/MatchCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).MatchCompetition(ctx, req.(*MatchCompetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UnmatchCompetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmatchCompetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UnmatchCompetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UnmatchCompetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UnmatchCompetition(ctx, req.(*UnmatchCompetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetMatchedCompetitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchedCompetitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetMatchedCompetitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetMatchedCompetitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetMatchedCompetitions(ctx, req.(*GetMatchedCompetitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetUnmatchedCompetitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnmatchedCompetitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetUnmatchedCompetitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetUnmatchedCompetitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetUnmatchedCompetitions(ctx, req.(*GetUnmatchedCompetitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_MatchCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).MatchCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/MatchCompetitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).MatchCompetitor(ctx, req.(*MatchCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_UnmatchCompetitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmatchCompetitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).UnmatchCompetitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/UnmatchCompetitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).UnmatchCompetitor(ctx, req.(*UnmatchCompetitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetMatchedCompetitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchedCompetitorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetMatchedCompetitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetMatchedCompetitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetMatchedCompetitors(ctx, req.(*GetMatchedCompetitorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetUnmatchedCompetitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnmatchedCompetitorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetUnmatchedCompetitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetUnmatchedCompetitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetUnmatchedCompetitors(ctx, req.(*GetUnmatchedCompetitorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_MatchEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).MatchEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/MatchEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).MatchEvent(ctx, req.(*MatchEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetMatchedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetMatchedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetMatchedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetMatchedEvents(ctx, req.(*GetMatchedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetUnmatchedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnmatchedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetUnmatchedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetUnmatchedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetUnmatchedEvents(ctx, req.(*GetUnmatchedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_SearchCompetitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCompetitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).SearchCompetitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/SearchCompetitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).SearchCompetitions(ctx, req.(*SearchCompetitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_SetManagingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetManagingProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).SetManagingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/SetManagingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).SetManagingProvider(ctx, req.(*SetManagingProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetManagingProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetManagingProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetManagingProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetManagingProvider(ctx, req.(*api.Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).HealthCheck(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetUpcomingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpcomingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetUpcomingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetUpcomingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetUpcomingEvents(ctx, req.(*UpcomingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsentitiesManager_GetActiveEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsentitiesManagerServer).GetActiveEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internalrpc.SportsentitiesManager/GetActiveEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsentitiesManagerServer).GetActiveEvents(ctx, req.(*ActiveEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SportsentitiesManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internalrpc.SportsentitiesManager",
	HandlerType: (*SportsentitiesManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchOrCreateEvent",
			Handler:    _SportsentitiesManager_FetchOrCreateEvent_Handler,
		},
		{
			MethodName: "UpdateOrCreateOutright",
			Handler:    _SportsentitiesManager_UpdateOrCreateOutright_Handler,
		},
		{
			MethodName: "FetchOrCreateGroup",
			Handler:    _SportsentitiesManager_FetchOrCreateGroup_Handler,
		},
		{
			MethodName: "FetchOrCreateCompetition",
			Handler:    _SportsentitiesManager_FetchOrCreateCompetition_Handler,
		},
		{
			MethodName: "FetchOrCreateSport",
			Handler:    _SportsentitiesManager_FetchOrCreateSport_Handler,
		},
		{
			MethodName: "FetchOrCreateCompetitor",
			Handler:    _SportsentitiesManager_FetchOrCreateCompetitor_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _SportsentitiesManager_UpdateEvent_Handler,
		},
		{
			MethodName: "UpdateEventStatus",
			Handler:    _SportsentitiesManager_UpdateEventStatus_Handler,
		},
		{
			MethodName: "ResultEvent",
			Handler:    _SportsentitiesManager_ResultEvent_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _SportsentitiesManager_GetStatus_Handler,
		},
		{
			MethodName: "CancelEvent",
			Handler:    _SportsentitiesManager_CancelEvent_Handler,
		},
		{
			MethodName: "ModifyGroupsOnEntity",
			Handler:    _SportsentitiesManager_ModifyGroupsOnEntity_Handler,
		},
		{
			MethodName: "AddCategoryOnEntity",
			Handler:    _SportsentitiesManager_AddCategoryOnEntity_Handler,
		},
		{
			MethodName: "GetTranslation",
			Handler:    _SportsentitiesManager_GetTranslation_Handler,
		},
		{
			MethodName: "SetTranslation",
			Handler:    _SportsentitiesManager_SetTranslation_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _SportsentitiesManager_GetEvent_Handler,
		},
		{
			MethodName: "GetEventV2",
			Handler:    _SportsentitiesManager_GetEventV2_Handler,
		},
		{
			MethodName: "GetEventsV2",
			Handler:    _SportsentitiesManager_GetEventsV2_Handler,
		},
		{
			MethodName: "GetCompetition",
			Handler:    _SportsentitiesManager_GetCompetition_Handler,
		},
		{
			MethodName: "GetOutrightV2",
			Handler:    _SportsentitiesManager_GetOutrightV2_Handler,
		},
		{
			MethodName: "GetOutrightsV2",
			Handler:    _SportsentitiesManager_GetOutrightsV2_Handler,
		},
		{
			MethodName: "GetOutright",
			Handler:    _SportsentitiesManager_GetOutright_Handler,
		},
		{
			MethodName: "GetCompetitor",
			Handler:    _SportsentitiesManager_GetCompetitor_Handler,
		},
		{
			MethodName: "GetEventCompetitors",
			Handler:    _SportsentitiesManager_GetEventCompetitors_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _SportsentitiesManager_GetGroup_Handler,
		},
		{
			MethodName: "GetSport",
			Handler:    _SportsentitiesManager_GetSport_Handler,
		},
		{
			MethodName: "GetCompetitorsRPC",
			Handler:    _SportsentitiesManager_GetCompetitorsRPC_Handler,
		},
		{
			MethodName: "GetCompetitionsRPC",
			Handler:    _SportsentitiesManager_GetCompetitionsRPC_Handler,
		},
		{
			MethodName: "GetTranslationMap",
			Handler:    _SportsentitiesManager_GetTranslationMap_Handler,
		},
		{
			MethodName: "GetCompetitorDetails",
			Handler:    _SportsentitiesManager_GetCompetitorDetails_Handler,
		},
		{
			MethodName: "GetCompetitionDetails",
			Handler:    _SportsentitiesManager_GetCompetitionDetails_Handler,
		},
		{
			MethodName: "UpdateTranslationsRPC",
			Handler:    _SportsentitiesManager_UpdateTranslationsRPC_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _SportsentitiesManager_UpdateMetadata_Handler,
		},
		{
			MethodName: "SetEventFeatureAvailability",
			Handler:    _SportsentitiesManager_SetEventFeatureAvailability_Handler,
		},
		{
			MethodName: "AddCompetitionProviderOutright",
			Handler:    _SportsentitiesManager_AddCompetitionProviderOutright_Handler,
		},
		{
			MethodName: "UpdateEventV2",
			Handler:    _SportsentitiesManager_UpdateEventV2_Handler,
		},
		{
			MethodName: "MatchOrCreateCompetitor",
			Handler:    _SportsentitiesManager_MatchOrCreateCompetitor_Handler,
		},
		{
			MethodName: "MatchOrCreateCompetition",
			Handler:    _SportsentitiesManager_MatchOrCreateCompetition_Handler,
		},
		{
			MethodName: "GetMatchingOverview",
			Handler:    _SportsentitiesManager_GetMatchingOverview_Handler,
		},
		{
			MethodName: "GetCancelledMarkets",
			Handler:    _SportsentitiesManager_GetCancelledMarkets_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _SportsentitiesManager_Merge_Handler,
		},
		{
			MethodName: "Unmerge",
			Handler:    _SportsentitiesManager_Unmerge_Handler,
		},
		{
			MethodName: "UnmergeSourceID",
			Handler:    _SportsentitiesManager_UnmergeSourceID_Handler,
		},
		{
			MethodName: "GetMergedEntities",
			Handler:    _SportsentitiesManager_GetMergedEntities_Handler,
		},
		{
			MethodName: "MatchCompetition",
			Handler:    _SportsentitiesManager_MatchCompetition_Handler,
		},
		{
			MethodName: "UnmatchCompetition",
			Handler:    _SportsentitiesManager_UnmatchCompetition_Handler,
		},
		{
			MethodName: "GetMatchedCompetitions",
			Handler:    _SportsentitiesManager_GetMatchedCompetitions_Handler,
		},
		{
			MethodName: "GetUnmatchedCompetitions",
			Handler:    _SportsentitiesManager_GetUnmatchedCompetitions_Handler,
		},
		{
			MethodName: "MatchCompetitor",
			Handler:    _SportsentitiesManager_MatchCompetitor_Handler,
		},
		{
			MethodName: "UnmatchCompetitor",
			Handler:    _SportsentitiesManager_UnmatchCompetitor_Handler,
		},
		{
			MethodName: "GetMatchedCompetitors",
			Handler:    _SportsentitiesManager_GetMatchedCompetitors_Handler,
		},
		{
			MethodName: "GetUnmatchedCompetitors",
			Handler:    _SportsentitiesManager_GetUnmatchedCompetitors_Handler,
		},
		{
			MethodName: "MatchEvent",
			Handler:    _SportsentitiesManager_MatchEvent_Handler,
		},
		{
			MethodName: "GetMatchedEvents",
			Handler:    _SportsentitiesManager_GetMatchedEvents_Handler,
		},
		{
			MethodName: "GetUnmatchedEvents",
			Handler:    _SportsentitiesManager_GetUnmatchedEvents_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SportsentitiesManager_GetList_Handler,
		},
		{
			MethodName: "SearchCompetitions",
			Handler:    _SportsentitiesManager_SearchCompetitions_Handler,
		},
		{
			MethodName: "SetManagingProvider",
			Handler:    _SportsentitiesManager_SetManagingProvider_Handler,
		},
		{
			MethodName: "GetManagingProvider",
			Handler:    _SportsentitiesManager_GetManagingProvider_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SportsentitiesManager_HealthCheck_Handler,
		},
		{
			MethodName: "GetUpcomingEvents",
			Handler:    _SportsentitiesManager_GetUpcomingEvents_Handler,
		},
		{
			MethodName: "GetActiveEvents",
			Handler:    _SportsentitiesManager_GetActiveEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCompetitors",
			Handler:       _SportsentitiesManager_GetCompetitors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCompetitions",
			Handler:       _SportsentitiesManager_GetCompetitions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateTranslations",
			Handler:       _SportsentitiesManager_UpdateTranslations_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internalrpc/sportsentities_manager.proto",
}

func init() { proto.RegisterFile("internalrpc/sportsentities_manager.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 4718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x7b, 0xcd, 0x6f, 0x1b, 0x49,
	0x76, 0xb8, 0x9a, 0xa4, 0x24, 0xf2, 0x91, 0xd4, 0x47, 0x59, 0x92, 0xa9, 0x96, 0x65, 0xc9, 0xed,
	0xf1, 0x8e, 0x6c, 0xcf, 0xd0, 0x33, 0xf2, 0x62, 0x67, 0xd6, 0x3b, 0xbf, 0xf9, 0x45, 0x96, 0x65,
	0x59, 0x70, 0x64, 0x79, 0x9a, 0xb6, 0x67, 0x3f, 0x92, 0x30, 0x2d, 0xb2, 0x44, 0x35, 0x4c, 0x76,
	0x73, 0xba, 0x8b, 0xf6, 0xf2, 0x90, 0x1c, 0x72, 0x08, 0x92, 0x00, 0x0b, 0x2c, 0x82, 0x00, 0x39,
	0x24, 0x01, 0x06, 0x58, 0x20, 0xc9, 0x22, 0xb7, 0x20, 0x97, 0x45, 0x80, 0x04, 0x48, 0x0e, 0x39,
	0x06, 0xc8, 0x35, 0x40, 0x02, 0xe4, 0xcf, 0xc8, 0x21, 0x08, 0xea, 0xa3, 0xbb, 0xab, 0xfa, 0x8b,
	0xd4, 0xd8, 0x33, 0xbb, 0xb9, 0x91, 0x55, 0xaf, 0x5e, 0xbd, 0x7a, 0xf5, 0xbe, 0x5f, 0x35, 0xec,
	0xd8, 0x0e, 0xc1, 0x9e, 0x63, 0xf5, 0xbd, 0x61, 0xe7, 0x8e, 0x3f, 0x74, 0x3d, 0xe2, 0x63, 0x87,
	0xd8, 0xc4, 0xc6, 0x7e, 0x7b, 0x60, 0x39, 0x56, 0x0f, 0x7b, 0xcd, 0xa1, 0xe7, 0x12, 0x17, 0x55,
	0x25, 0x48, 0x7d, 0x5d, 0x5e, 0xd6, 0xc3, 0x0e, 0xf6, 0xec, 0x0e, 0x87, 0xd3, 0xb7, 0x38, 0x96,
	0x53, 0xd7, 0x7d, 0x79, 0xc7, 0x1a, 0xda, 0x77, 0xa2, 0xbf, 0x02, 0xe0, 0x1d, 0x09, 0xc0, 0xc3,
	0xfe, 0xa8, 0x4f, 0x6c, 0xa7, 0x17, 0xfd, 0x12, 0x50, 0x57, 0x7a, 0xae, 0xdb, 0xeb, 0x63, 0x86,
	0xc2, 0x72, 0x1c, 0x97, 0x58, 0xc4, 0x76, 0x1d, 0x5f, 0xcc, 0x6e, 0x88, 0x59, 0xf6, 0xef, 0x74,
	0x74, 0x76, 0x07, 0x0f, 0x86, 0x64, 0xcc, 0x27, 0x8d, 0x47, 0x50, 0xdd, 0x77, 0x07, 0x43, 0x4c,
	0x6c, 0xe2, 0x7a, 0x3e, 0xfa, 0x2e, 0x54, 0x3b, 0xd1, 0xdf, 0x86, 0xb6, 0x5d, 0xdc, 0xa9, 0xee,
	0x5e, 0x6e, 0x4a, 0x27, 0x68, 0x46, 0xe0, 0xa6, 0x0c, 0x6b, 0xec, 0x42, 0xf9, 0xa9, 0x4d, 0x3a,
	0xe7, 0xd8, 0xf3, 0x11, 0x82, 0xd2, 0xb9, 0x3b, 0xc0, 0x0d, 0x6d, 0x5b, 0xdb, 0xa9, 0x98, 0xec,
	0x37, 0x1d, 0xb3, 0x5e, 0x5b, 0xe3, 0x46, 0x81, 0x8f, 0xd1, 0xdf, 0xc6, 0x9f, 0x69, 0xd1, 0xf6,
	0xb6, 0xeb, 0xa0, 0x05, 0x28, 0xd8, 0x5d, 0xb6, 0xaa, 0x6e, 0x16, 0xec, 0x2e, 0xda, 0x82, 0x6a,
	0xc7, 0x22, 0xb8, 0xe7, 0x7a, 0xe3, 0xb6, 0xdd, 0x65, 0x4b, 0xeb, 0x26, 0x04, 0x43, 0x47, 0x5d,
	0x8a, 0xd4, 0xb1, 0x06, 0xb8, 0x51, 0xe4, 0x48, 0xe9, 0x6f, 0x74, 0x1d, 0xea, 0x43, 0xcf, 0x7d,
	0x65, 0x77, 0xb1, 0xd7, 0x7e, 0x89, 0xc7, 0x7e, 0xa3, 0xb4, 0x5d, 0xdc, 0xa9, 0x98, 0xb5, 0x60,
	0xf0, 0x31, 0x1e, 0xfb, 0xc8, 0x80, 0x12, 0xb1, 0x7a, 0x7e, 0x63, 0x76, 0xbb, 0xb8, 0xb3, 0xb0,
	0xbb, 0xd0, 0xb4, 0x86, 0x76, 0xf3, 0x80, 0x5e, 0xe6, 0xf8, 0x99, 0xd5, 0x33, 0xd9, 0x9c, 0xf1,
	0x27, 0x05, 0x80, 0xe8, 0xb4, 0x09, 0xe2, 0x10, 0x94, 0xc8, 0x78, 0x88, 0x05, 0x55, 0xec, 0x37,
	0xd2, 0xa1, 0x3c, 0x74, 0x7d, 0x76, 0x18, 0x46, 0x53, 0xdd, 0x0c, 0xff, 0xa3, 0x8f, 0xa1, 0x11,
	0xd2, 0x15, 0x31, 0x4e, 0x26, 0x71, 0x2d, 0x98, 0x8f, 0x76, 0x65, 0xc4, 0xbe, 0x0b, 0x8b, 0xd2,
	0x02, 0x76, 0xe0, 0x59, 0x76, 0xe0, 0x85, 0x68, 0xf8, 0x09, 0x3d, 0xfa, 0x1a, 0xcc, 0xf5, 0xdd,
	0x8e, 0xd5, 0xc7, 0x8d, 0x39, 0x36, 0x2f, 0xfe, 0xc5, 0x10, 0x30, 0xaa, 0xe7, 0xe3, 0x08, 0x9e,
	0x51, 0xfa, 0x03, 0xb6, 0x94, 0x73, 0xd8, 0xf2, 0x18, 0x16, 0x0f, 0x5e, 0x61, 0x87, 0x1c, 0x75,
	0xa9, 0xf4, 0x9f, 0xd9, 0xd8, 0x43, 0x9b, 0x00, 0x98, 0x0e, 0x71, 0xd4, 0xfc, 0xd6, 0x2b, 0x6c,
	0x84, 0x61, 0x5d, 0x87, 0x32, 0x9f, 0x0e, 0xef, 0x70, 0x1e, 0x73, 0x0c, 0xc6, 0x2f, 0x0a, 0x70,
	0x99, 0x61, 0x6b, 0x11, 0x8b, 0xe0, 0xe7, 0xc3, 0xae, 0x45, 0xb0, 0x89, 0xbf, 0x18, 0x61, 0x9f,
	0x20, 0x03, 0xea, 0xae, 0x67, 0xf7, 0x6c, 0xa7, 0x6d, 0x0d, 0x87, 0x6d, 0xc1, 0xfb, 0x8a, 0x59,
	0xe5, 0x83, 0x7b, 0xc3, 0xe1, 0x51, 0x17, 0x1d, 0xc2, 0x52, 0x80, 0x3a, 0xa0, 0x86, 0x6d, 0x51,
	0xdd, 0xbd, 0xa2, 0x48, 0x6d, 0x8c, 0x62, 0x73, 0x11, 0xc7, 0x8e, 0xf0, 0x29, 0x20, 0x8e, 0x68,
	0xc4, 0x68, 0x68, 0xfb, 0x94, 0x1e, 0x76, 0x87, 0x0b, 0xbb, 0x4b, 0x9c, 0x0f, 0x01, 0x99, 0x23,
	0xdf, 0xe4, 0x9b, 0x72, 0x72, 0x19, 0xe5, 0xa8, 0x09, 0x97, 0x7c, 0x62, 0x79, 0xc4, 0x6f, 0x5b,
	0xa4, 0x4d, 0xec, 0x01, 0xf6, 0x89, 0x35, 0x18, 0x36, 0x4a, 0xdb, 0xda, 0x4e, 0xd1, 0x5c, 0xe6,
	0x53, 0x7b, 0xe4, 0x59, 0x30, 0x81, 0xf6, 0x60, 0xc1, 0x67, 0xb8, 0xda, 0x1e, 0x3f, 0x2e, 0xbb,
	0xd2, 0xea, 0xae, 0xae, 0x90, 0x2d, 0xb6, 0xe3, 0x10, 0x66, 0xdd, 0x97, 0xff, 0x1a, 0x5f, 0x16,
	0x00, 0xed, 0x5b, 0x4e, 0x07, 0xf7, 0x19, 0x69, 0x01, 0xdb, 0xcc, 0xe0, 0x24, 0xec, 0x08, 0xe2,
	0x3c, 0x8c, 0x77, 0xd5, 0xdd, 0x77, 0x92, 0x4c, 0x49, 0x32, 0x5e, 0x9c, 0x4e, 0x9a, 0xa0, 0x17,
	0xdc, 0x61, 0x3b, 0xb5, 0x4f, 0x31, 0x61, 0x0c, 0x2e, 0x9b, 0x15, 0x3e, 0x72, 0x1f, 0x13, 0x74,
	0x0f, 0xf4, 0x68, 0xba, 0x3d, 0x1a, 0xb6, 0x89, 0x2b, 0xf1, 0xa0, 0xc8, 0x78, 0xb0, 0x16, 0x82,
	0x3f, 0x1f, 0x3e, 0x73, 0x23, 0x46, 0x7c, 0x00, 0xb3, 0x67, 0x7d, 0x2a, 0x73, 0x25, 0xc6, 0x6b,
	0xbd, 0x19, 0x59, 0xb7, 0x16, 0x26, 0xa4, 0x8f, 0x07, 0xd8, 0x21, 0x0f, 0x29, 0x84, 0xc9, 0x01,
	0xd1, 0x4d, 0x28, 0x07, 0x8a, 0xc2, 0x98, 0xb6, 0xb0, 0x5b, 0x67, 0x17, 0xf4, 0x54, 0x0c, 0x9a,
	0xe1, 0xb4, 0x41, 0x84, 0xac, 0xb2, 0xb3, 0x98, 0x78, 0xd8, 0x1f, 0xd3, 0x8b, 0xee, 0x5b, 0x04,
	0xfb, 0xa4, 0x2d, 0x71, 0x89, 0xb1, 0x27, 0xf5, 0xa2, 0x39, 0x6c, 0x84, 0x04, 0x5d, 0x83, 0x9a,
	0x10, 0x91, 0x8e, 0x3b, 0x72, 0x38, 0x33, 0x8a, 0x66, 0x95, 0x8f, 0xed, 0xd3, 0x21, 0xe3, 0x67,
	0x1a, 0xc0, 0xc1, 0x8f, 0x89, 0x67, 0x3d, 0xb4, 0x71, 0xbf, 0x8b, 0xae, 0x43, 0xcd, 0x27, 0x9e,
	0xed, 0xf4, 0xda, 0xaf, 0xac, 0xfe, 0x48, 0xe8, 0xc7, 0xa3, 0x19, 0xb3, 0xca, 0x47, 0x5f, 0xd0,
	0x41, 0xb4, 0x05, 0x70, 0xea, 0xba, 0x7d, 0x01, 0xc2, 0x38, 0xfc, 0x68, 0xc6, 0xac, 0xd0, 0x31,
	0x0e, 0x70, 0x0d, 0xaa, 0xa7, 0x63, 0x82, 0x7d, 0x01, 0x41, 0x99, 0x5a, 0x7b, 0x34, 0x63, 0x02,
	0x1b, 0xe4, 0x20, 0xd7, 0xa1, 0x36, 0xb2, 0x1d, 0x72, 0x77, 0x57, 0xc0, 0x50, 0x8e, 0xd6, 0xe9,
	0x46, 0x7c, 0x94, 0x01, 0xdd, 0x9f, 0x87, 0x59, 0x36, 0x6b, 0xfc, 0x45, 0x01, 0x1a, 0x0f, 0x31,
	0xe9, 0x9c, 0x9f, 0x78, 0xfb, 0x1e, 0xb6, 0x08, 0xe6, 0x8a, 0xce, 0xb9, 0x14, 0x37, 0x76, 0xab,
	0x30, 0x67, 0xfb, 0x6d, 0x07, 0xbf, 0x16, 0x97, 0x3f, 0x6b, 0xfb, 0x4f, 0xf0, 0x6b, 0x64, 0xc0,
	0x2c, 0xe3, 0xa2, 0x10, 0x5e, 0x88, 0xf8, 0xf7, 0x68, 0xc6, 0xe4, 0x53, 0xe8, 0x36, 0x94, 0xdd,
	0x11, 0xf1, 0xec, 0xde, 0x39, 0x61, 0x66, 0xa9, 0x2a, 0xae, 0xeb, 0x44, 0x0c, 0x3e, 0x9a, 0x31,
	0x43, 0x00, 0x6a, 0xa9, 0x86, 0xdc, 0x8b, 0xb4, 0x3b, 0xe7, 0x96, 0xd3, 0xc3, 0x5d, 0x76, 0xd2,
	0xb2, 0xb9, 0x20, 0x86, 0xf7, 0xf9, 0x28, 0xbd, 0x06, 0x82, 0xad, 0x41, 0xdb, 0x7f, 0x6d, 0x0d,
	0x87, 0xb8, 0xcb, 0xce, 0x5a, 0x36, 0xab, 0x74, 0xac, 0xc5, 0x87, 0xd0, 0x5d, 0x58, 0xed, 0x44,
	0xce, 0xa5, 0x3d, 0x72, 0x06, 0x16, 0x45, 0xd1, 0x65, 0xb6, 0xaf, 0x6c, 0xae, 0x48, 0x93, 0xcf,
	0x83, 0xb9, 0xfb, 0x65, 0x98, 0x63, 0x4e, 0x7d, 0x6c, 0xfc, 0x77, 0x09, 0xd6, 0x55, 0xfe, 0xc8,
	0x5a, 0xb6, 0x01, 0x95, 0x50, 0xdf, 0x19, 0x9f, 0x8a, 0x66, 0x39, 0xd0, 0x72, 0xaa, 0x2e, 0x5c,
	0x1e, 0xba, 0x74, 0x96, 0x4b, 0x48, 0x45, 0x8c, 0xec, 0x11, 0xb4, 0x03, 0x73, 0x5c, 0x93, 0x33,
	0xed, 0x8b, 0x98, 0x47, 0x1f, 0x42, 0x59, 0x9c, 0x9b, 0xeb, 0x47, 0x75, 0x77, 0x55, 0xd1, 0xe0,
	0xc0, 0xe3, 0x9a, 0x21, 0x18, 0xba, 0x05, 0xcb, 0xa1, 0x9b, 0x09, 0xad, 0x2e, 0x77, 0x17, 0x8b,
	0xc1, 0x84, 0xb0, 0x86, 0xd4, 0x30, 0xb3, 0x00, 0x83, 0x82, 0xcc, 0x71, 0xc3, 0xcc, 0xfe, 0x1f,
	0x75, 0xd1, 0x0d, 0x58, 0x90, 0x99, 0x67, 0x73, 0xae, 0xd5, 0xcd, 0xba, 0x34, 0x7a, 0x44, 0x65,
	0x7b, 0xce, 0x77, 0x47, 0x5e, 0x07, 0x37, 0xca, 0xec, 0x28, 0x55, 0x76, 0x94, 0x16, 0x1b, 0x32,
	0xc5, 0x94, 0xa2, 0xb0, 0x95, 0x5c, 0x85, 0xa5, 0x1e, 0xac, 0xe7, 0xb9, 0xa3, 0xa1, 0xdf, 0x80,
	0xed, 0xe2, 0x4e, 0xdd, 0x14, 0xff, 0xe2, 0x81, 0x49, 0x75, 0xfa, 0xc0, 0x04, 0xfd, 0x10, 0x6a,
	0x98, 0x2a, 0x63, 0xfb, 0x8c, 0x6a, 0xa3, 0xdf, 0xa8, 0xb1, 0xb5, 0x1f, 0x29, 0x6b, 0x33, 0xef,
	0xb9, 0x19, 0xe9, 0xb1, 0x7f, 0xe0, 0x10, 0x6f, 0x6c, 0x56, 0x71, 0x34, 0xa2, 0x7f, 0x0e, 0x4b,
	0x71, 0x00, 0xb4, 0x04, 0xc5, 0x97, 0x78, 0x2c, 0x9c, 0x15, 0xfd, 0x89, 0xde, 0x17, 0x2a, 0x27,
	0x3c, 0x93, 0x4a, 0x76, 0xb4, 0xde, 0xe4, 0x50, 0xf7, 0x0a, 0x1f, 0x6b, 0xc6, 0x29, 0x5c, 0xe5,
	0xa6, 0x37, 0x20, 0x2a, 0xd0, 0x16, 0x13, 0xfb, 0x43, 0xd7, 0xf1, 0xb1, 0xa4, 0x91, 0x9a, 0xac,
	0x91, 0x37, 0x25, 0x6d, 0x2b, 0xa4, 0x68, 0x5b, 0xa4, 0x6b, 0xc6, 0x1f, 0x15, 0x61, 0x33, 0x6b,
	0x93, 0x29, 0x84, 0xfc, 0x32, 0xcc, 0x63, 0xa7, 0xeb, 0x47, 0x12, 0x3e, 0x47, 0xff, 0xee, 0x11,
	0x1a, 0xb5, 0x9d, 0xd9, 0x8e, 0xed, 0x9f, 0x63, 0x36, 0xc9, 0xcd, 0x3f, 0x04, 0x43, 0x7b, 0x24,
	0x45, 0xb6, 0x4a, 0x69, 0xb2, 0x15, 0x8b, 0xfe, 0x66, 0x13, 0xd1, 0x5f, 0x8e, 0xf8, 0x7e, 0x47,
	0x0a, 0x02, 0xbb, 0x16, 0xb1, 0x98, 0xf4, 0x56, 0x77, 0x97, 0x15, 0xb9, 0x7b, 0x60, 0x11, 0x2b,
	0x8a, 0x0b, 0xe9, 0xbf, 0x30, 0xa0, 0x2c, 0x4b, 0x01, 0x65, 0xa4, 0xae, 0x95, 0x09, 0xea, 0x1a,
	0x93, 0x52, 0xb8, 0x40, 0xf8, 0xfc, 0xaf, 0x85, 0x98, 0xb5, 0x39, 0xa4, 0x82, 0x1f, 0x5c, 0x84,
	0x7c, 0x52, 0x6d, 0x92, 0xa2, 0x16, 0xd2, 0x98, 0x29, 0x9b, 0x85, 0x10, 0x15, 0x0f, 0x51, 0x43,
	0xb3, 0xd0, 0x12, 0x28, 0x65, 0x58, 0xa6, 0x7f, 0xd1, 0x15, 0x85, 0xb0, 0x8c, 0x3c, 0xc6, 0xe8,
	0xcb, 0x89, 0xa8, 0x56, 0xd0, 0xc1, 0x2f, 0x6c, 0x35, 0x1e, 0xd4, 0x72, 0x7a, 0x36, 0x01, 0x38,
	0x6a, 0xc6, 0x6e, 0x1e, 0xae, 0x56, 0xd8, 0x48, 0x2c, 0x92, 0x2d, 0x2b, 0x91, 0xac, 0x6c, 0x4a,
	0xe6, 0xf3, 0x7d, 0xff, 0x1f, 0x96, 0x60, 0x4b, 0xe1, 0xa8, 0x44, 0xc0, 0x14, 0x7c, 0x5d, 0x87,
	0x72, 0x78, 0x76, 0x11, 0xb4, 0xf6, 0xc4, 0x99, 0x2f, 0xc2, 0xcb, 0x1c, 0xfe, 0x94, 0xf2, 0xf8,
	0xf3, 0xff, 0x60, 0x23, 0x75, 0x9d, 0x3f, 0x3a, 0x8d, 0x78, 0xdb, 0x48, 0x59, 0xdb, 0x1a, 0x9d,
	0x1e, 0x75, 0x15, 0x3e, 0xcd, 0xe5, 0x9b, 0xdc, 0x9b, 0xb0, 0x24, 0x6f, 0xc0, 0xee, 0x83, 0x67,
	0x07, 0x8b, 0xd2, 0x38, 0xbb, 0x95, 0x18, 0x28, 0x4b, 0x5d, 0xca, 0x2c, 0x75, 0x91, 0x41, 0x59,
	0xce, 0x12, 0x19, 0xf2, 0x8a, 0x62, 0xc8, 0xa3, 0x8b, 0xad, 0x2a, 0x17, 0xfb, 0x31, 0x34, 0x7c,
	0xeb, 0x15, 0x6e, 0x77, 0xf1, 0x99, 0x35, 0xea, 0x93, 0x36, 0xf1, 0x2c, 0xc7, 0xef, 0xb3, 0x44,
	0xb6, 0x01, 0xcc, 0xc0, 0xad, 0xd1, 0xf9, 0x07, 0x7c, 0xfa, 0x59, 0x34, 0x1b, 0xe6, 0x2c, 0xb5,
	0x9c, 0x9c, 0xe5, 0xe7, 0x5a, 0x4c, 0xbb, 0xd8, 0xf5, 0x04, 0x52, 0x90, 0x7a, 0x9f, 0x5a, 0xfa,
	0x7d, 0x6e, 0x02, 0x70, 0x10, 0xc6, 0x27, 0x9e, 0xcc, 0x56, 0xd8, 0x88, 0xe0, 0x50, 0xc4, 0xf7,
	0xe2, 0x44, 0x57, 0x27, 0x38, 0x51, 0x92, 0x39, 0x61, 0xfc, 0xb4, 0x04, 0x57, 0x53, 0xe5, 0xd6,
	0xf5, 0xde, 0x9e, 0x39, 0xf8, 0x36, 0xac, 0xa5, 0x25, 0xa3, 0xa1, 0x1c, 0xaf, 0x24, 0x53, 0xd1,
	0xa3, 0xee, 0x37, 0x9b, 0xc2, 0x96, 0x27, 0xa5, 0xb0, 0x73, 0xa9, 0x29, 0xec, 0xf4, 0x16, 0x22,
	0x4f, 0x37, 0x2b, 0x79, 0xba, 0x99, 0x2a, 0x2f, 0x90, 0x2e, 0x2f, 0x81, 0x74, 0x56, 0xb3, 0xa5,
	0x93, 0x3a, 0x3a, 0xdb, 0x6f, 0x87, 0x6e, 0xbb, 0xc6, 0xc4, 0x1d, 0x6c, 0x3f, 0x70, 0xc7, 0xc6,
	0x7f, 0x14, 0x01, 0x71, 0x4f, 0xad, 0xc4, 0xa0, 0xf1, 0x20, 0x5d, 0x71, 0xd7, 0x85, 0xdc, 0x98,
	0xb4, 0x98, 0x1d, 0x93, 0x96, 0x2e, 0x10, 0x93, 0xce, 0x4e, 0x17, 0x93, 0xb6, 0x62, 0x21, 0xd8,
	0x1c, 0x73, 0x8c, 0x1f, 0x28, 0xcb, 0x92, 0xe7, 0xcb, 0x8f, 0xbd, 0x2e, 0x72, 0xd1, 0x91, 0x31,
	0x2a, 0x2b, 0xc6, 0xa8, 0x09, 0xe5, 0x01, 0x26, 0x16, 0x0b, 0x10, 0x2a, 0xec, 0x28, 0x28, 0x3a,
	0xf6, 0xb1, 0x98, 0x31, 0x43, 0x98, 0xaf, 0x2f, 0xdc, 0xfb, 0xf3, 0x59, 0x58, 0x49, 0x32, 0xe0,
	0xc5, 0xee, 0x04, 0x07, 0x15, 0xc6, 0xf7, 0x25, 0xa5, 0xaa, 0x22, 0x5d, 0xe6, 0xec, 0x84, 0xcb,
	0x54, 0x44, 0x66, 0x2e, 0x26, 0x32, 0x89, 0x20, 0xaa, 0x3e, 0x5d, 0x10, 0x95, 0x9a, 0x82, 0x94,
	0x55, 0xfd, 0x08, 0x52, 0x10, 0x59, 0x9a, 0x2a, 0xd3, 0x49, 0xd3, 0x1b, 0xe4, 0x02, 0xf2, 0x85,
	0xd7, 0x26, 0x5f, 0x38, 0xba, 0x17, 0x6d, 0x45, 0x1d, 0xd1, 0x22, 0x5b, 0xd2, 0x48, 0xdd, 0x8a,
	0x46, 0x15, 0x32, 0xf0, 0x45, 0xe4, 0xf3, 0x06, 0x2c, 0xf4, 0xed, 0x57, 0xb8, 0x6d, 0xbd, 0xb2,
	0xec, 0xbe, 0x75, 0xda, 0xc7, 0xc2, 0xe5, 0xd5, 0xe9, 0xe8, 0x5e, 0x30, 0x98, 0x6a, 0x7e, 0x85,
	0x1f, 0x6e, 0x2c, 0x30, 0xf9, 0x5b, 0x4b, 0x31, 0x58, 0x8f, 0xf1, 0x58, 0x52, 0x80, 0xa2, 0xa2,
	0x00, 0xd3, 0x79, 0x0b, 0xe3, 0x6f, 0x0b, 0xb0, 0xca, 0xc5, 0x33, 0xe4, 0xd1, 0x5b, 0xf3, 0x44,
	0xb2, 0x18, 0x17, 0x55, 0x31, 0x96, 0x39, 0x58, 0x9a, 0xc4, 0xc1, 0xd9, 0x01, 0xee, 0xda, 0x96,
	0xb0, 0x48, 0x8b, 0xf2, 0xad, 0x76, 0x6d, 0xcb, 0xe4, 0xb3, 0xe8, 0x1e, 0xd4, 0x04, 0x8f, 0xed,
	0xbe, 0x4d, 0xc6, 0x22, 0x34, 0x5a, 0x63, 0xd0, 0x7b, 0xd2, 0x04, 0xaf, 0x37, 0x29, 0xb0, 0x8a,
	0xec, 0xcc, 0x4f, 0x96, 0x1d, 0xe3, 0x9f, 0x35, 0x58, 0x52, 0x74, 0x7a, 0xd8, 0x1f, 0xa7, 0xd5,
	0x37, 0xb4, 0xd4, 0xfa, 0x06, 0x75, 0xd0, 0x0a, 0x20, 0xbd, 0xf1, 0x01, 0x16, 0x05, 0xa7, 0x8a,
	0xb9, 0xa2, 0xc0, 0xef, 0xf3, 0x39, 0xaa, 0x79, 0x9d, 0x91, 0xe7, 0x89, 0xba, 0x96, 0x50, 0x6b,
	0x6e, 0xeb, 0x17, 0xc5, 0x44, 0x2b, 0xd0, 0xee, 0x77, 0x58, 0x05, 0x52, 0x54, 0x2c, 0xbb, 0xf6,
	0xd9, 0x99, 0x28, 0x56, 0xd6, 0x02, 0xfd, 0x7f, 0x60, 0x9f, 0x9d, 0x19, 0x77, 0xa1, 0xae, 0x14,
	0x21, 0xc3, 0xb2, 0xb7, 0xa8, 0xed, 0xb3, 0xb2, 0x37, 0x77, 0x44, 0x85, 0xc0, 0x11, 0x19, 0x1e,
	0x20, 0x29, 0x42, 0x0b, 0x56, 0x46, 0xae, 0x5d, 0x53, 0x5c, 0xbb, 0x5c, 0x48, 0x57, 0x31, 0x16,
	0x43, 0xd7, 0xb6, 0x0d, 0x55, 0x39, 0x22, 0xe4, 0x11, 0x93, 0x3c, 0x64, 0x7c, 0x1b, 0x96, 0x94,
	0x3d, 0x29, 0xb7, 0x63, 0xab, 0xb4, 0xe4, 0xaa, 0x8f, 0xa0, 0x1e, 0x94, 0xbd, 0xd2, 0x7d, 0x6a,
	0x44, 0x74, 0x41, 0x89, 0xd2, 0x9e, 0xc1, 0xe2, 0x81, 0x68, 0xfe, 0x04, 0x4b, 0x6f, 0x42, 0xd1,
	0xee, 0xfa, 0xa2, 0xd2, 0xaa, 0xda, 0xa3, 0xe7, 0xac, 0x00, 0xf7, 0xeb, 0xb6, 0x4f, 0x4c, 0x0a,
	0x93, 0x89, 0xf5, 0x2f, 0x4b, 0x00, 0x92, 0xb4, 0xbc, 0x49, 0x91, 0x49, 0xd6, 0xcc, 0xe2, 0x24,
	0xcd, 0x4c, 0xcd, 0xbf, 0xdf, 0x07, 0x34, 0xb4, 0xbc, 0xbe, 0x35, 0x6e, 0x7b, 0xd8, 0x27, 0x9e,
	0xdd, 0x61, 0x4c, 0xe4, 0x99, 0xc7, 0x32, 0x9f, 0x31, 0xa3, 0x09, 0xc9, 0xe9, 0xcc, 0x4d, 0x70,
	0x3a, 0xb7, 0x94, 0x22, 0x0f, 0xd5, 0x23, 0x99, 0x57, 0x3c, 0xf1, 0x7d, 0x0b, 0x85, 0x1f, 0xd9,
	0xb5, 0xd4, 0xa6, 0x73, 0x2d, 0x77, 0xa0, 0x12, 0x98, 0x14, 0x9e, 0xb8, 0xa4, 0x7a, 0xbb, 0x08,
	0x46, 0x31, 0x0a, 0xf5, 0x29, 0x1c, 0xca, 0x06, 0x54, 0x82, 0xac, 0xd2, 0x6f, 0xcc, 0x33, 0x5b,
	0x5c, 0x16, 0x69, 0xa5, 0x2f, 0xa7, 0x57, 0xae, 0xe7, 0xb7, 0x45, 0x21, 0x42, 0x49, 0xaf, 0x5c,
	0xcf, 0xa7, 0x61, 0xb2, 0x71, 0x1b, 0x66, 0x19, 0x9f, 0x72, 0xbb, 0x52, 0x42, 0x99, 0x8c, 0xdf,
	0x81, 0x25, 0x25, 0xf7, 0xa5, 0xa2, 0x95, 0x63, 0xb8, 0xa3, 0xeb, 0x29, 0x4c, 0xbc, 0x9e, 0xb4,
	0x06, 0x1c, 0x27, 0xa9, 0x14, 0x5a, 0x83, 0xbf, 0x2e, 0x42, 0x3d, 0xaa, 0x2c, 0xd1, 0xcd, 0x37,
	0x01, 0x3a, 0x2c, 0xb5, 0xe9, 0x46, 0x82, 0x5d, 0x11, 0x23, 0x93, 0x25, 0x5b, 0xd1, 0x8a, 0x62,
	0x76, 0x55, 0xaa, 0x94, 0x57, 0x95, 0x9a, 0x4d, 0x54, 0xa5, 0xde, 0xbc, 0x18, 0xaa, 0x48, 0x4f,
	0x79, 0x0a, 0xe9, 0x99, 0xbe, 0xb2, 0xf4, 0xcd, 0xa8, 0x8c, 0xf1, 0x65, 0x01, 0x16, 0xe5, 0x74,
	0x73, 0x82, 0xa4, 0x4c, 0xe9, 0xe2, 0x03, 0x99, 0x2c, 0x4a, 0x06, 0xbe, 0x15, 0x8f, 0x2d, 0x4b,
	0x8c, 0xcc, 0x66, 0x16, 0x99, 0x94, 0x14, 0x85, 0x8f, 0x3c, 0x23, 0x50, 0x03, 0x4f, 0x2e, 0x79,
	0xb3, 0x81, 0xe4, 0xe9, 0x26, 0x2c, 0x27, 0x96, 0xa4, 0x04, 0xec, 0xef, 0xaa, 0x01, 0x7b, 0xca,
	0x9d, 0x29, 0x95, 0x59, 0x10, 0xa5, 0xb9, 0xaf, 0x8d, 0x39, 0xc6, 0x09, 0x80, 0x28, 0x50, 0xd0,
	0x3d, 0x92, 0x04, 0x2b, 0x82, 0x56, 0x98, 0x2c, 0x68, 0x86, 0x09, 0x97, 0x8f, 0x2d, 0xd2, 0x39,
	0xb7, 0x9d, 0xde, 0xc9, 0x2b, 0xec, 0xbd, 0xb2, 0xf1, 0xeb, 0xc0, 0x6b, 0x7d, 0x04, 0x55, 0xde,
	0xf0, 0x88, 0x9a, 0xb7, 0x41, 0x44, 0xc4, 0x68, 0xf0, 0x45, 0xb6, 0x3a, 0x1e, 0x62, 0xdf, 0x04,
	0x1c, 0xfe, 0x31, 0xfe, 0x4b, 0x83, 0xd5, 0x24, 0x52, 0x4a, 0xf0, 0x39, 0xa0, 0xf0, 0x6e, 0x5d,
	0x31, 0x13, 0x3c, 0x26, 0xf8, 0xae, 0x72, 0xc1, 0xa9, 0xeb, 0xc3, 0x53, 0x04, 0xa3, 0x22, 0xfb,
	0x0b, 0x93, 0x8a, 0x70, 0x5c, 0x6f, 0xc3, 0x5a, 0x3a, 0x70, 0x2a, 0xd3, 0x94, 0x5b, 0x5e, 0x67,
	0x47, 0x64, 0x04, 0xb0, 0xae, 0xdd, 0xfd, 0x71, 0x18, 0x56, 0x4a, 0xb7, 0xfd, 0x0f, 0x1a, 0x6c,
	0x1c, 0xbb, 0x5d, 0xfb, 0x6c, 0xcc, 0x2e, 0xdd, 0x3f, 0x71, 0xd4, 0x70, 0xa1, 0x09, 0xf3, 0x34,
	0x2e, 0xb3, 0x9c, 0xae, 0xe0, 0xdc, 0x4a, 0x5c, 0x80, 0xe9, 0x9c, 0x19, 0x00, 0xc5, 0xb9, 0x5d,
	0x98, 0x96, 0xdb, 0xd4, 0xe8, 0x89, 0x85, 0xa1, 0x3f, 0x2f, 0xf3, 0x81, 0x58, 0xad, 0xb2, 0xa4,
	0xd4, 0x2a, 0x8d, 0x53, 0xd0, 0xf7, 0xba, 0xdd, 0x7d, 0x51, 0x34, 0x8f, 0x93, 0x7f, 0x3d, 0xe8,
	0x76, 0x89, 0xa8, 0xa5, 0x2a, 0xd5, 0x27, 0x4c, 0x31, 0x35, 0xf1, 0x15, 0x86, 0xf1, 0xa7, 0x1a,
	0x18, 0x92, 0x83, 0x09, 0x6f, 0x24, 0xd6, 0x4d, 0x48, 0x2a, 0x84, 0x96, 0xa6, 0x10, 0x72, 0xd4,
	0x5f, 0xc8, 0x8f, 0xfa, 0xb7, 0xa0, 0x1a, 0x54, 0x4d, 0x22, 0xb6, 0x40, 0x30, 0x74, 0xd4, 0x35,
	0x7e, 0x52, 0x80, 0xed, 0x5c, 0xca, 0xa8, 0xb8, 0xfa, 0xb2, 0xb8, 0x8a, 0x99, 0x40, 0x5c, 0x1f,
	0x64, 0xe5, 0x7a, 0xa9, 0xa8, 0x9a, 0xf1, 0xd1, 0x84, 0xe4, 0x06, 0xe3, 0x19, 0x0d, 0x55, 0xfd,
	0x37, 0x25, 0x81, 0x56, 0x70, 0x5c, 0xb4, 0xce, 0x20, 0x45, 0x9c, 0x92, 0x38, 0x13, 0xd0, 0xf9,
	0x8b, 0x81, 0x3e, 0xee, 0x1e, 0x5b, 0xde, 0x4b, 0x4c, 0x18, 0x84, 0xb8, 0xa0, 0x4d, 0x00, 0x62,
	0x0f, 0x70, 0xdb, 0xa3, 0x29, 0x45, 0xe0, 0x96, 0xe9, 0x88, 0x49, 0x07, 0x28, 0xb7, 0x89, 0x4b,
	0xac, 0x7e, 0xdb, 0x26, 0x78, 0xe0, 0x07, 0x72, 0xc0, 0x86, 0x8e, 0xe8, 0x08, 0x8d, 0x6a, 0x45,
	0x33, 0x90, 0x1b, 0x33, 0xf1, 0xcf, 0xf8, 0x99, 0x06, 0xb5, 0x63, 0xec, 0xf5, 0xf0, 0x9b, 0xda,
	0x1c, 0xe6, 0xfa, 0x19, 0xce, 0x48, 0x10, 0xcb, 0x7c, 0x80, 0x1b, 0xdc, 0x2e, 0xf6, 0x89, 0xed,
	0x58, 0x81, 0x7c, 0x71, 0x81, 0xa8, 0x4b, 0xa3, 0x47, 0x2c, 0xa2, 0xb7, 0x46, 0xe4, 0xdc, 0xf5,
	0x82, 0xba, 0x2b, 0xff, 0x67, 0xfc, 0x00, 0x16, 0x9e, 0x3b, 0x83, 0xb7, 0x42, 0x66, 0x3c, 0x1f,
	0x6a, 0x41, 0xe3, 0x10, 0x13, 0xc6, 0x82, 0x6e, 0x3c, 0x6b, 0xf8, 0xca, 0xf6, 0xf7, 0xef, 0x35,
	0xb8, 0x74, 0x88, 0x89, 0xf4, 0x7c, 0x8b, 0x8b, 0x73, 0x2b, 0xed, 0x0d, 0xd7, 0x87, 0x6a, 0xbc,
	0x90, 0x5c, 0x26, 0xf9, 0xda, 0xa0, 0xd8, 0x26, 0x61, 0xd1, 0x4f, 0xa2, 0x10, 0x32, 0x00, 0x90,
	0x25, 0xb2, 0xce, 0x25, 0xf2, 0x86, 0x2a, 0x91, 0x3c, 0x0b, 0x97, 0x9c, 0xb8, 0x24, 0x89, 0xff,
	0xa4, 0xc1, 0x8a, 0x44, 0x86, 0xed, 0x3a, 0x82, 0xfc, 0xcf, 0xa1, 0x26, 0xd9, 0x83, 0x80, 0xfe,
	0xbb, 0x59, 0xf4, 0x87, 0x0b, 0x65, 0xe5, 0x14, 0x27, 0x50, 0x10, 0xe9, 0x9f, 0xc1, 0x72, 0x02,
	0x24, 0xe5, 0x0c, 0xdf, 0x52, 0xcf, 0xb0, 0xa4, 0x9c, 0x81, 0x86, 0xcf, 0xd2, 0x21, 0xbe, 0xd4,
	0x60, 0x41, 0x4a, 0x3a, 0x8f, 0xad, 0x21, 0x7a, 0x12, 0x4f, 0x39, 0x29, 0xf5, 0xef, 0x29, 0xd4,
	0xab, 0x2b, 0xe4, 0xbf, 0x82, 0xf1, 0x12, 0x02, 0xfd, 0x53, 0x25, 0xad, 0xcd, 0x32, 0x05, 0x2b,
	0x32, 0xd1, 0x15, 0x99, 0xc4, 0x7f, 0xd4, 0x60, 0x51, 0xdd, 0xd0, 0x47, 0x27, 0x69, 0x34, 0xbe,
	0x9f, 0x43, 0xa3, 0x3f, 0x81, 0xc8, 0x1f, 0x4d, 0x45, 0xe4, 0x87, 0x2a, 0x67, 0x37, 0x72, 0x36,
	0x94, 0x4f, 0xf0, 0x0b, 0x4d, 0x04, 0x2f, 0x29, 0xfd, 0x3b, 0xd9, 0x57, 0x68, 0xf9, 0xbe, 0xe2,
	0x1a, 0xd4, 0xe4, 0x67, 0x81, 0x82, 0x53, 0x55, 0xe9, 0x55, 0x60, 0x8a, 0x83, 0x2a, 0xa6, 0x3b,
	0xa8, 0x64, 0xc3, 0xac, 0x94, 0xda, 0x30, 0x33, 0x7e, 0xaa, 0xc1, 0xba, 0x78, 0x5b, 0xf2, 0x2b,
	0x42, 0xbd, 0xf1, 0xfb, 0x1a, 0x6c, 0x52, 0x63, 0xc4, 0xdf, 0xbb, 0xa8, 0x6a, 0x74, 0x61, 0xb2,
	0xe4, 0xf0, 0xb7, 0xa0, 0x86, 0xbf, 0xb1, 0xa8, 0xa1, 0x98, 0x88, 0x1a, 0xfe, 0x40, 0x83, 0xad,
	0x43, 0x4c, 0xc2, 0xa7, 0x37, 0xbf, 0x44, 0x52, 0xfe, 0x5d, 0x83, 0x35, 0x45, 0xc4, 0xa2, 0x56,
	0xdb, 0x2f, 0x45, 0xc2, 0xae, 0x43, 0x5d, 0x6d, 0xca, 0xf1, 0xa0, 0xae, 0xd6, 0x91, 0x9b, 0x71,
	0xd3, 0xb6, 0xd4, 0x8c, 0xbf, 0xd3, 0xa0, 0x11, 0x13, 0xc2, 0xff, 0x03, 0xe7, 0x33, 0x3c, 0xb8,
	0x92, 0x94, 0x53, 0xe6, 0xae, 0x2e, 0x4c, 0xb9, 0xc4, 0x2a, 0x4e, 0x16, 0xcf, 0x9a, 0xea, 0xe6,
	0x82, 0x42, 0x97, 0x6f, 0x10, 0xb8, 0x9a, 0x26, 0x92, 0x6f, 0xbc, 0x6b, 0x70, 0x41, 0x85, 0xd4,
	0x0b, 0xfa, 0x0d, 0x58, 0x66, 0xc7, 0x54, 0x9a, 0x7b, 0xef, 0x01, 0x0a, 0x5f, 0xac, 0x45, 0x5d,
	0x14, 0xee, 0xa8, 0x96, 0xc2, 0x19, 0xe9, 0x25, 0x57, 0xd6, 0x13, 0xdb, 0x9f, 0x6b, 0x70, 0x39,
	0x62, 0x24, 0x5b, 0xf0, 0x96, 0xf5, 0x2b, 0x85, 0xbd, 0xc5, 0x34, 0xf6, 0xc6, 0x15, 0xb1, 0x94,
	0x50, 0xc4, 0xbf, 0xd1, 0x60, 0x5d, 0xbe, 0x80, 0x5f, 0x6d, 0x6a, 0xff, 0x45, 0x83, 0xf5, 0x16,
	0xb6, 0x3c, 0xc5, 0xb8, 0x87, 0xd4, 0xde, 0x96, 0x93, 0x74, 0x8d, 0xb5, 0x7f, 0x63, 0xe4, 0x4a,
	0x95, 0xa0, 0x37, 0xb0, 0x5e, 0x2c, 0xa0, 0xed, 0x10, 0xfb, 0x15, 0x16, 0x8f, 0x20, 0xc5, 0xbf,
	0x54, 0x3f, 0x35, 0x9b, 0xee, 0xa7, 0x7e, 0x52, 0x80, 0xa5, 0x63, 0xcb, 0xb1, 0x7a, 0xb6, 0xd3,
	0x0b, 0xc8, 0x43, 0x9f, 0x00, 0x1a, 0x88, 0xfc, 0xbc, 0x3d, 0xe1, 0x24, 0xcb, 0x01, 0xe0, 0xd3,
	0xf0, 0x44, 0x9f, 0x00, 0x62, 0x15, 0x3d, 0xba, 0xb5, 0x5a, 0xac, 0x48, 0xae, 0x0e, 0x00, 0xa3,
	0xd5, 0xff, 0x1f, 0xae, 0x84, 0x7b, 0x93, 0x73, 0x0f, 0xfb, 0xe7, 0x6e, 0xbf, 0xdb, 0xb6, 0x9d,
	0xb6, 0x8f, 0x3b, 0xae, 0xd3, 0x15, 0x65, 0xbf, 0xf5, 0x00, 0xe6, 0x59, 0x00, 0x72, 0xe4, 0xb4,
	0x18, 0x00, 0x23, 0x5e, 0x14, 0x5d, 0xa5, 0xed, 0x4b, 0xe9, 0xc4, 0x0b, 0xc0, 0x70, 0x7b, 0xe3,
	0x77, 0x41, 0x6f, 0x51, 0x95, 0x51, 0x39, 0x72, 0xa1, 0xac, 0xf9, 0x7b, 0x6a, 0x8d, 0x86, 0xc2,
	0x6d, 0xc6, 0x6a, 0x1f, 0x31, 0xec, 0x52, 0xbd, 0xe6, 0xdf, 0x34, 0xa8, 0xca, 0x99, 0x59, 0xa2,
	0x13, 0xab, 0x4d, 0xd7, 0x89, 0xfd, 0xca, 0xe5, 0x86, 0xbb, 0x50, 0x8b, 0x9e, 0x47, 0xe7, 0x3c,
	0x54, 0xad, 0xe2, 0xe8, 0x0f, 0xcd, 0x1f, 0x2d, 0x67, 0xdc, 0x16, 0x39, 0x20, 0x17, 0xc6, 0x8a,
	0xe5, 0x8c, 0xf9, 0x73, 0x50, 0x1a, 0xf2, 0xaf, 0x3e, 0x1f, 0x76, 0xdc, 0x81, 0xed, 0xf4, 0xbe,
	0xb2, 0x62, 0x6f, 0x41, 0xe8, 0x70, 0x02, 0x5d, 0xa9, 0x98, 0x10, 0x0c, 0x1d, 0x75, 0xf3, 0xab,
	0xc3, 0x53, 0x76, 0x3e, 0x64, 0x6d, 0x9c, 0x55, 0xb4, 0x91, 0xea, 0xbc, 0x7a, 0x88, 0xf0, 0x41,
	0x66, 0xca, 0xc7, 0x2b, 0xf9, 0x94, 0x5e, 0x87, 0x7a, 0x24, 0xe3, 0xb6, 0x28, 0xa2, 0x17, 0xcd,
	0x5a, 0x28, 0xd4, 0x36, 0xff, 0x9a, 0x25, 0x02, 0xa2, 0x77, 0xc8, 0x23, 0xcd, 0x08, 0x88, 0xde,
	0xd6, 0x9a, 0xd2, 0xef, 0xaf, 0x4c, 0xd5, 0xdd, 0x37, 0x9e, 0xc1, 0x5a, 0xfc, 0x36, 0xc4, 0x49,
	0xee, 0xc1, 0x1c, 0xbb, 0xd6, 0x20, 0xf9, 0x32, 0x62, 0x0f, 0x35, 0x52, 0x4e, 0x6f, 0x8a, 0x15,
	0xc6, 0x1e, 0xa0, 0x3d, 0x66, 0x7e, 0x14, 0x67, 0x76, 0x11, 0x5b, 0x68, 0xfc, 0xb1, 0x06, 0xd5,
	0x80, 0x22, 0x9a, 0x11, 0x7e, 0x12, 0x23, 0x27, 0xe5, 0x23, 0x06, 0x91, 0x02, 0xf2, 0xdf, 0x3c,
	0x41, 0x11, 0x6b, 0xf4, 0x83, 0x00, 0x59, 0x56, 0xc2, 0xb7, 0xad, 0xa6, 0x25, 0xd2, 0x1b, 0x76,
	0x39, 0x0b, 0xf9, 0x2b, 0x0d, 0x16, 0xc2, 0x8a, 0x0c, 0xa7, 0xeb, 0x11, 0x54, 0xe2, 0xe5, 0xa2,
	0x5b, 0x0a, 0x69, 0x2a, 0x7c, 0x33, 0x56, 0x14, 0x8a, 0x16, 0xeb, 0x8f, 0x25, 0xdc, 0x59, 0x64,
	0x5e, 0x57, 0xc9, 0x8c, 0xbd, 0xea, 0x95, 0x28, 0xfd, 0x1f, 0x0d, 0xb6, 0x18, 0xf9, 0x0f, 0xb1,
	0x45, 0x46, 0x1e, 0x96, 0xfb, 0xda, 0x52, 0xdb, 0x3e, 0x16, 0x52, 0x84, 0x4d, 0xf7, 0x1f, 0xc3,
	0xca, 0x19, 0x5f, 0xd8, 0x56, 0x5a, 0xe5, 0xbc, 0xcc, 0x7c, 0x90, 0xe4, 0x7d, 0xf6, 0x36, 0xcd,
	0x94, 0x29, 0x7e, 0xf6, 0x4b, 0x67, 0xc9, 0x19, 0xfd, 0x21, 0x34, 0xb2, 0x16, 0xa4, 0xf0, 0x43,
	0x49, 0x79, 0xcb, 0x12, 0x03, 0x6e, 0x5d, 0x85, 0x79, 0x51, 0x77, 0x45, 0xf3, 0x50, 0xdc, 0x7b,
	0xf0, 0x60, 0x69, 0x06, 0x01, 0xcc, 0x99, 0x07, 0xc7, 0x27, 0x2f, 0x0e, 0x96, 0xb4, 0xdd, 0xff,
	0xbc, 0x0d, 0xab, 0x2d, 0xe5, 0xf3, 0xbd, 0x63, 0xfe, 0xf5, 0x1e, 0xc2, 0x80, 0x92, 0x2f, 0xc1,
	0xd1, 0xb7, 0xa6, 0x7b, 0x2a, 0xae, 0xdf, 0xc8, 0x81, 0x8b, 0x3e, 0xad, 0x30, 0x66, 0x90, 0x4f,
	0x35, 0x2f, 0xed, 0xdd, 0x35, 0xba, 0x95, 0xf2, 0x24, 0x2a, 0xe3, 0x71, 0xb6, 0x7e, 0x7b, 0x2a,
	0x58, 0xae, 0x9e, 0xc6, 0x4c, 0xe2, 0x6c, 0xbc, 0x7d, 0x98, 0x73, 0x36, 0xf9, 0x01, 0xf2, 0xf4,
	0x67, 0xfb, 0x22, 0xf6, 0x51, 0x89, 0xfc, 0x79, 0xdf, 0x7b, 0xd9, 0x48, 0x92, 0xd9, 0xf1, 0xf4,
	0x5b, 0xc6, 0x4f, 0xc6, 0xee, 0x36, 0xef, 0x64, 0xf2, 0xe3, 0xcf, 0xe9, 0xb7, 0x71, 0xe1, 0x72,
	0xc6, 0xb3, 0x4c, 0x74, 0x7b, 0xf2, 0xc1, 0xc2, 0x8c, 0x6b, 0xfa, 0x0d, 0x4f, 0xa0, 0x2a, 0xbd,
	0x1f, 0x41, 0x5b, 0x13, 0x9e, 0xcb, 0xe9, 0x9b, 0xd9, 0x00, 0x1c, 0xe1, 0x0f, 0x60, 0x59, 0x1a,
	0x15, 0x4e, 0x7b, 0xaa, 0x4f, 0xc2, 0xf4, 0x2b, 0x19, 0x50, 0x01, 0xea, 0x16, 0x54, 0x4d, 0xf6,
	0xdd, 0x16, 0xa7, 0xf5, 0xed, 0x20, 0x3d, 0x84, 0xca, 0x21, 0x0e, 0xe8, 0xcc, 0xf9, 0x30, 0x6e,
	0x22, 0xa2, 0x27, 0x50, 0x95, 0x3e, 0x94, 0x8b, 0x71, 0x32, 0xf9, 0x09, 0xdd, 0x44, 0x7c, 0x3f,
	0x84, 0x95, 0xb4, 0xa6, 0x10, 0xda, 0x51, 0x03, 0xbc, 0xec, 0xbe, 0x91, 0xbe, 0xd6, 0xe4, 0x5f,
	0xe5, 0x36, 0x83, 0xaf, 0x72, 0x9b, 0x07, 0x83, 0x21, 0xa1, 0xb8, 0xbf, 0x0f, 0x97, 0x52, 0x1a,
	0x36, 0xe8, 0x5d, 0x05, 0x75, 0x76, 0x4b, 0x27, 0x07, 0xb3, 0x09, 0x0b, 0x87, 0x58, 0x79, 0x3a,
	0xbd, 0x95, 0x55, 0x82, 0x4b, 0x17, 0xa9, 0xf8, 0xfb, 0x1a, 0x8e, 0xb3, 0xf5, 0xb6, 0x71, 0xee,
	0x41, 0xf9, 0x10, 0x0b, 0x41, 0x52, 0x6f, 0x5d, 0x3d, 0xe9, 0xe5, 0xe4, 0x2d, 0x05, 0x28, 0xbe,
	0x03, 0x10, 0xa0, 0x78, 0xb1, 0x9b, 0x8b, 0x44, 0x72, 0xf7, 0x4c, 0xe2, 0xaa, 0xc1, 0x3a, 0xff,
	0xc5, 0x2e, 0xba, 0x92, 0x5c, 0x18, 0x55, 0xee, 0xf5, 0x46, 0x56, 0x1c, 0x62, 0xcc, 0xa0, 0x63,
	0xc6, 0x6b, 0xd9, 0xf8, 0xe5, 0x11, 0xb1, 0x99, 0xf9, 0xa2, 0x50, 0xa0, 0xfb, 0x04, 0xea, 0x87,
	0x98, 0x04, 0x56, 0x7d, 0xc2, 0x91, 0xd4, 0xd0, 0x20, 0x24, 0x26, 0x8c, 0x30, 0x26, 0x1e, 0x6c,
	0x23, 0x27, 0x8a, 0x09, 0x99, 0x14, 0xfa, 0xac, 0x3c, 0x52, 0xf4, 0x54, 0x4c, 0x01, 0xa2, 0xc7,
	0xec, 0x54, 0x92, 0x1d, 0xcd, 0x43, 0x75, 0x25, 0xef, 0x65, 0x00, 0x3b, 0xe4, 0xa5, 0xe0, 0xea,
	0xe4, 0x2f, 0xda, 0xf3, 0x50, 0x36, 0x32, 0x50, 0xfa, 0xa1, 0x10, 0x72, 0x27, 0x39, 0xbd, 0x10,
	0x46, 0x2f, 0x03, 0x42, 0x14, 0xdc, 0x1b, 0x4d, 0x8f, 0x22, 0x6a, 0xfc, 0x33, 0xc3, 0xb5, 0xa0,
	0xf6, 0x6a, 0x50, 0x86, 0x7a, 0xeb, 0xdb, 0x93, 0x1a, 0x3c, 0xc6, 0xcc, 0x07, 0x1a, 0x7a, 0x0a,
	0x8b, 0xb1, 0xde, 0x49, 0x26, 0xc2, 0x6b, 0x13, 0x3b, 0x2e, 0x0c, 0xe3, 0x09, 0x2c, 0xc7, 0x36,
	0x7b, 0xba, 0xff, 0x26, 0x44, 0xa2, 0xcf, 0x00, 0xc5, 0x37, 0xcb, 0xc1, 0x38, 0x0d, 0x95, 0xa8,
	0xc5, 0x68, 0x8c, 0x35, 0x6a, 0x26, 0xda, 0xa9, 0xbc, 0xfe, 0x84, 0x31, 0x83, 0x0e, 0x94, 0xfe,
	0x95, 0xeb, 0x3d, 0xc0, 0xc4, 0xb2, 0xfb, 0xf9, 0x02, 0x17, 0x6f, 0x88, 0x31, 0x65, 0x5a, 0x55,
	0xa9, 0x9e, 0x06, 0x4f, 0xa2, 0x29, 0xc5, 0xe4, 0x5f, 0x7c, 0x22, 0x20, 0x51, 0xea, 0xa3, 0xbc,
	0x43, 0x64, 0xbb, 0x8a, 0x1d, 0x7a, 0xaf, 0xab, 0x49, 0x74, 0xf4, 0x26, 0xae, 0xe4, 0xf5, 0x89,
	0x72, 0xbc, 0xcf, 0x13, 0x58, 0x50, 0x9f, 0x10, 0x23, 0x23, 0x25, 0x5e, 0x89, 0xbd, 0x2f, 0xce,
	0xc1, 0x87, 0x61, 0xa3, 0x25, 0xf4, 0x3d, 0x25, 0x6b, 0x88, 0xc5, 0x9a, 0x13, 0x12, 0x95, 0x9c,
	0x6d, 0x7e, 0x4f, 0x83, 0xab, 0xd4, 0xdb, 0x66, 0x77, 0xfe, 0xd1, 0x9d, 0xe9, 0xdf, 0x08, 0xf0,
	0xdd, 0xde, 0xbf, 0xd0, 0xa3, 0x02, 0x63, 0x06, 0xfd, 0x08, 0xea, 0x52, 0xe0, 0xf6, 0x62, 0x17,
	0x5d, 0x9b, 0x10, 0x0b, 0xbe, 0xd8, 0xbd, 0x50, 0x5c, 0xcb, 0x6a, 0xc3, 0xdf, 0x58, 0x5c, 0xfb,
	0x05, 0x34, 0x52, 0x37, 0xfc, 0x1a, 0x53, 0x04, 0x8b, 0x39, 0x87, 0xf8, 0x6b, 0xa3, 0x58, 0x98,
	0x9a, 0xf1, 0x42, 0x4a, 0x37, 0x26, 0x3f, 0x59, 0x62, 0x31, 0x21, 0xeb, 0xc6, 0xab, 0xaf, 0x2b,
	0xfc, 0x58, 0xdc, 0x96, 0xfd, 0xf8, 0x42, 0x6f, 0x70, 0x9d, 0x4e, 0x02, 0x18, 0x33, 0xe8, 0x7b,
	0x30, 0xcb, 0x1e, 0x0f, 0xa0, 0x75, 0x95, 0x14, 0xe9, 0xb1, 0x82, 0xae, 0xbe, 0x6d, 0x6d, 0xd9,
	0x4e, 0xaf, 0x8f, 0x8f, 0xba, 0xc6, 0x0c, 0xfa, 0x35, 0x98, 0x17, 0xef, 0x1a, 0x62, 0xd6, 0x40,
	0x7d, 0xed, 0x90, 0xa3, 0x03, 0x8f, 0x60, 0x51, 0xc0, 0xf2, 0x4a, 0xde, 0xd1, 0x83, 0xaf, 0x8a,
	0x89, 0x5b, 0x62, 0xf5, 0x21, 0x04, 0xba, 0x11, 0xb7, 0xe1, 0xa9, 0x0f, 0x25, 0xf4, 0x55, 0xfe,
	0x60, 0x2b, 0x9a, 0x1b, 0x0b, 0xee, 0xb4, 0x60, 0x29, 0xde, 0x1f, 0x4e, 0xbb, 0xd9, 0x14, 0xf9,
	0xb9, 0x1c, 0xbd, 0x01, 0x53, 0xfa, 0x8f, 0x2c, 0x57, 0x42, 0xc9, 0xc6, 0x6d, 0x2c, 0xa9, 0xcc,
	0xec, 0xec, 0xea, 0xfc, 0x71, 0x59, 0x5a, 0x6b, 0xd3, 0x98, 0x41, 0x1d, 0x58, 0x4b, 0x6f, 0xc0,
	0xc6, 0xd2, 0xff, 0xdc, 0x2e, 0xad, 0xbe, 0x91, 0x41, 0xbb, 0x60, 0x8a, 0xcd, 0x9e, 0x9c, 0xa4,
	0x36, 0x57, 0x63, 0x4a, 0x36, 0xa1, 0x07, 0xab, 0x6f, 0x66, 0x9e, 0x45, 0x6c, 0xf5, 0x14, 0x16,
	0x63, 0xcd, 0x53, 0x74, 0x3d, 0x9b, 0xfd, 0x91, 0xc1, 0x58, 0x4b, 0x3b, 0x01, 0x73, 0x8a, 0x2f,
	0x60, 0x39, 0xd1, 0xb0, 0x8c, 0x89, 0x49, 0x56, 0x43, 0x53, 0xe8, 0x51, 0x4a, 0x0b, 0xcf, 0x98,
	0x41, 0xbf, 0xcd, 0x9c, 0x6d, 0xb2, 0xa5, 0x88, 0x6e, 0x4e, 0x60, 0x7c, 0xd4, 0x00, 0xd4, 0xf5,
	0x74, 0xaa, 0x05, 0x2f, 0xce, 0x58, 0xaf, 0x2d, 0xad, 0x81, 0x18, 0x33, 0xa6, 0xf9, 0x6d, 0x46,
	0xfd, 0x4a, 0xd6, 0x29, 0xc4, 0x3e, 0x7b, 0x00, 0x51, 0xcb, 0x10, 0x5d, 0x4d, 0xb2, 0x5b, 0xc9,
	0x67, 0x97, 0x65, 0x9a, 0x83, 0x5c, 0xe7, 0x33, 0x58, 0x8a, 0xb7, 0x05, 0x63, 0x6a, 0x93, 0xd1,
	0x35, 0x0c, 0x34, 0x51, 0x9a, 0x12, 0x54, 0x7d, 0xce, 0x62, 0xb7, 0x58, 0xf7, 0x2e, 0xa6, 0x34,
	0x99, 0xed, 0x3d, 0xa1, 0x8d, 0xea, 0xa4, 0x40, 0xfc, 0x29, 0xcc, 0x1f, 0x72, 0x6b, 0x88, 0xd4,
	0xa0, 0x5d, 0xb6, 0xa0, 0x59, 0x0f, 0xe0, 0x8c, 0x19, 0xf4, 0x0c, 0x50, 0xb2, 0x51, 0x17, 0x23,
	0x2c, 0xb3, 0x93, 0xa7, 0xaf, 0xc4, 0xc3, 0x2d, 0x81, 0xf5, 0xfb, 0x70, 0x29, 0xa5, 0x4b, 0x14,
	0x33, 0xf9, 0xd9, 0x7d, 0xa4, 0x1c, 0x3b, 0xb9, 0x2f, 0xfc, 0x55, 0x0c, 0xb3, 0xdc, 0x68, 0xd2,
	0xf3, 0xbb, 0x49, 0xc6, 0x0c, 0x3a, 0x82, 0xea, 0x23, 0x6c, 0xf5, 0xc9, 0xf9, 0xfe, 0x39, 0xee,
	0xbc, 0x9c, 0x32, 0x28, 0x97, 0x56, 0x48, 0xc5, 0xc3, 0xdf, 0x62, 0x76, 0x5b, 0x6d, 0x17, 0xa0,
	0x9c, 0xb6, 0x40, 0xc8, 0xba, 0xeb, 0xb9, 0x30, 0x21, 0xfe, 0x63, 0x96, 0x97, 0x48, 0x8d, 0x03,
	0x3f, 0x16, 0x9f, 0x27, 0x7b, 0x0a, 0x39, 0xd7, 0x7d, 0x7f, 0x13, 0x36, 0x3a, 0xee, 0xa0, 0x79,
	0x6a, 0x93, 0x9e, 0x35, 0xc0, 0x7d, 0xeb, 0xd4, 0x97, 0x61, 0x4f, 0xe7, 0x18, 0x07, 0xee, 0xfe,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x92, 0x26, 0x55, 0xd1, 0x4d, 0x00, 0x00,
}
